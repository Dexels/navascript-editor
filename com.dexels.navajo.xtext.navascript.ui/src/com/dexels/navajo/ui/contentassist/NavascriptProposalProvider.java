/*
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.ui.contentassist;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.jface.viewers.StyledString.Styler;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.TextStyle;
import org.eclipse.swt.widgets.Display;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceEvent;
import org.osgi.framework.ServiceListener;
import org.osgi.framework.ServiceReference;

import com.dexels.navajo.NavascriptStandaloneSetup;
import com.dexels.navajo.navascript.Expression;
import com.dexels.navajo.navascript.KeyValueArgument;
import com.dexels.navajo.navascript.impl.AdapterMethodImpl;
import com.dexels.navajo.navascript.impl.FunctionIdentifierImpl;
import com.dexels.navajo.navascript.impl.KeyValueArgumentsImpl;
import com.dexels.navajo.navascript.impl.LoopImpl;
import com.dexels.navajo.navascript.impl.MapImpl;
import com.dexels.navajo.navascript.impl.MappedArrayFieldImpl;
import com.dexels.navajo.navascript.impl.MessageImpl;
import com.dexels.navajo.navascript.impl.SetterFieldImpl;
import com.dexels.navajo.navigation.NavigationUtils;
import com.dexels.navajo.services.NavascriptGrammarAccess;
import com.dexels.navajo.xtext.navascript.navajobridge.AdapterClassDefinition;
import com.dexels.navajo.xtext.navascript.navajobridge.NavajoProxyStub;
import com.dexels.navajo.xtext.navascript.navajobridge.OSGIRuntime;
import com.dexels.navajo.xtext.navascript.navajobridge.ProxyMapDefinition;
import com.dexels.navajo.xtext.navascript.navajobridge.ProxyMethodDefinition;
import com.dexels.navajo.xtext.navascript.navajobridge.ProxyParameterDefinition;
import com.dexels.navajo.xtext.navascript.navajobridge.ProxyValueDefinition;
import com.google.inject.Injector;

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */

class NavascriptKeyWord {

	public String name;
	public String description;
	
	public NavascriptKeyWord(String name, String description) {
		this.name = name;
		this.description = description;
	}
	
	
}

public class NavascriptProposalProvider extends AbstractNavascriptProposalProvider implements ServiceListener {

	NavajoProxyStub adapters = null;
	BundleContext context;
	NavascriptGrammarAccess grammar;

	private static final Logger logger = Logger.getLogger(NavascriptProposalProvider.class);
	
	public NavascriptProposalProvider() {
		context = OSGIRuntime.getDefaultBundleContext();
		initGrammar();
		if ( context != null ) {
			context.addServiceListener(this);
		} else {
			logger.warn("No OSGI environment found");
		}
	}

	private void initGrammar() {

		Injector injector = new NavascriptStandaloneSetup().createInjectorAndDoEMFRegistration();
		grammar = injector.getInstance(NavascriptGrammarAccess.class);

	}

	public synchronized void init() {
		if ( adapters == null ) {
			ServiceReference<NavajoProxyStub> ref = context.getServiceReference(NavajoProxyStub.class);
			adapters = context.getService(ref);
			//adapters = NavajoProxyStub.getInstance();
		}
	}

	private NavajoProxyStub getNavajoProxyStub() {
		init();
		return adapters;
	}

	private StyledString.Styler createStyler(final Font font, final Color fgColor){
		Styler result=new StyledString.Styler(){

			@Override
			public void applyStyles(TextStyle textStyle) {
				if (fgColor != null) {
					textStyle.foreground=fgColor;
				}
				if (font != null) {
					textStyle.font=font;
				}

			}
		};
		return result;
	}
    
	protected ICompletionProposal createCompletionProposalFormatted(String proposal, String extra, int priority, ContentAssistContext contentAssistContext) {


		StyledString displayText = ( extra != null ? 
				new StyledString(proposal).append(" - " + extra, ( priority > 1 ? StyledString.DECORATIONS_STYLER : StyledString.QUALIFIER_STYLER) ) : null);

		return createCompletionProposal(proposal, displayText, null, priority, contentAssistContext.getPrefix(), contentAssistContext);
	}

	protected ICompletionProposal createCompletionProposalFormatted(String proposal, String done, String tbd, int priority, ContentAssistContext contentAssistContext) {


		Display display = Display.getCurrent();
		Color red = display.getSystemColor(SWT.COLOR_DARK_RED);

		
		StyledString displayText = ( done != null ? 
				new StyledString(proposal).append(" - " + done, createStyler(null, red)) : null);

		if ( tbd != null && displayText != null ) { 
			displayText.append("" + tbd, StyledString.QUALIFIER_STYLER );
		} else if ( tbd != null ) {
			displayText = new StyledString(proposal).append(" - " + tbd, StyledString.QUALIFIER_STYLER );
		} else {
			displayText = new StyledString();
		}

		return createCompletionProposal(proposal, displayText, null, priority, contentAssistContext.getPrefix(), contentAssistContext);
	}

	private void processKeyValueArguments(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if ( model instanceof KeyValueArgumentsImpl ) {
			// Get parent
			KeyValueArgumentsImpl kvai = (KeyValueArgumentsImpl) model;
			EObject parent = context.getCurrentNode().getParent().getSemanticElement();
			EObject map = NavigationUtils.findFirstMapOrMappedField(context.getLastCompleteNode(), 0);
			if ( parent instanceof AdapterMethodImpl ) {
				AdapterMethodImpl method = (AdapterMethodImpl) parent;
				Set<String> currentParameters = new HashSet<>();
				for ( KeyValueArgument arg : kvai.getKeyValueArguments()) {
					currentParameters.add(arg.getKey());
				}
				createParameterList(context, acceptor, map, method, currentParameters);
			} else if ( parent instanceof MapImpl ) {
				map = (MapImpl) parent;
				Set<String> currentParameters = new HashSet<>();
				for ( KeyValueArgument arg : kvai.getKeyValueArguments()) {
					currentParameters.add(arg.getKey());
				}
				createParameterList(context, acceptor,  (MapImpl) map, currentParameters);
			} else {
				logger.warn("Unknown Parent im processing keyvalue arguments: " + parent);
			}
		} else if ( model instanceof AdapterMethodImpl ) {
			AdapterMethodImpl method = (AdapterMethodImpl) model;
			EObject map = NavigationUtils.findFirstMapOrMappedField(context.getLastCompleteNode(), 0);
			createParameterList(context, acceptor, map, method, null);
		} else if ( model instanceof MapImpl ) {
			MapImpl map = (MapImpl) model;
			ProxyMapDefinition md = getNavajoProxyStub().getAdapter(map.getAdapterName()).getMapDefinition();
			Set<String> values = new TreeSet<>(md.getValueDefinitions());
			for ( String value : values) {
				ProxyValueDefinition vd = md.getValueDefinition(value);
				if ( vd != null && ( vd.getRequired() == null || !"automatic".equals(vd.getRequired()))) {
					acceptor.accept(createCompletionProposalFormatted(vd.getName() + "=", vd.getMapType(), 1, context));
				}
			}
		}
	}

	private void createParameterList(ContentAssistContext context, ICompletionProposalAcceptor acceptor, MapImpl map, Set<String> currentParameters) {

		String adapterName = map.getAdapterName();

		AdapterClassDefinition md = getNavajoProxyStub().getAdapter(adapterName);
		Set<String> parameters  = new TreeSet<>(md.getMapDefinition().getValueDefinitions());
		for ( String value : parameters) {
			if ( !currentParameters.contains(value)) {
				ProxyValueDefinition vd = md.getMapDefinition().getValueDefinition(value);
				String type = vd.getMapType();
				if ( vd.getMapType() == null || "".equals(vd.getMapType())) {
					try {
						type = md.getType(value);
					} catch (Exception e) {

					}
				}
				if ( vd != null && ( vd.getRequired() == null || !"automatic".equals(vd.getRequired()))) {
					acceptor.accept(createCompletionProposalFormatted(vd.getName() + "=", type, 1, context));
				}
			}
		}
	}

	private void createParameterList(ContentAssistContext context, ICompletionProposalAcceptor acceptor, EObject map,
			AdapterMethodImpl method, Set<String> currentParameters) {

		String adapterName = "";
		if ( map instanceof MapImpl ) {
			adapterName = ((MapImpl) map).getAdapterName();
		} else if ( map instanceof MappedArrayFieldImpl ) { // It's a mapped field. Find it
			MappedArrayFieldImpl maf = (MappedArrayFieldImpl) map;
			String field = maf.getField();

		}
		AdapterClassDefinition md = getNavajoProxyStub().getAdapter(adapterName);
		ProxyMethodDefinition mdm = md.getMapDefinition().getMethodDefinition(method.getMethod().substring(1));
		Set<String> parameters = new TreeSet<>( mdm.getParameters() );
		if ( currentParameters == null ) {
			currentParameters =  new HashSet<>();
		}
		for ( String param : parameters ) { // First add all required params
			ProxyParameterDefinition vd = mdm.getParameterDefinition(param);
			if ( vd != null && !currentParameters.contains(param) && "true".equals(vd.getRequired())) {
				currentParameters.add(param);
				String type = "unknown";
				try {
					type = md.getType(vd.getField());
				} catch (Exception e) {
					logger.warn("Could not determine type for parameter: " + param);
				}
				acceptor.accept(createCompletionProposalFormatted(param + "=", type + " [" + vd.getRequired() + "]", 10, context));
			}
		}
		for ( String param : parameters ) {
			ProxyParameterDefinition vd = mdm.getParameterDefinition(param);
			if (  vd != null && !currentParameters.contains(param) && ( vd.getRequired() == null || !"automatic".equals(vd.getRequired()))) {
				String type = "unknown";
				try {
					type = md.getType(vd.getField());
				} catch (Exception e) {
					logger.warn("Could not determine type for parameter: " + param);
				}
				acceptor.accept(createCompletionProposalFormatted(param + "=", type, 1, context));
			}
		}
	}

	@Override
	public void complete_KeyValueArguments(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		processKeyValueArguments(model, ruleCall, context, acceptor);
	}

	public void complete_KeyValueArgument(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		processKeyValueArguments(model, ruleCall, context, acceptor);
	}

	/**
	 * For the construction inside inner body
	 * {
	 *     $[setterfield] = [somevalue];
	 * }
	 * 
	 * The available setterfield values should be found in nearest map (either from MapImpl or from MappedArrayFieldImpl)
	 */
	@Override
	public void completeSetterField_Field(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		EObject map = NavigationUtils.findFirstMapOrMappedField(context.getLastCompleteNode(), 0);

		// Check if parent is mapped message.
		boolean showGetters = false;
		if (context.getLastCompleteNode().getParent() != null && context.getLastCompleteNode().getParent().getSemanticElement() instanceof MessageImpl) {
			showGetters = true;
		}
		
		if ( map != null ) {
			String adapterName;
			Set<String> fields;
			if ( map instanceof MapImpl ||  map instanceof SetterFieldImpl || map instanceof LoopImpl ) {
				AdapterClassDefinition md  = null;
				if (map instanceof MapImpl ) {
					adapterName = ((MapImpl) map).getAdapterName();
					md = getNavajoProxyStub().getAdapter(adapterName);
				} else {
					md = NavigationUtils.findAdapterClass(adapters, map);
				}
				fields = md.getSetters();
				for ( String a : fields ) {
					String type = "unknown";
					try {
						type = md.getSetterType(a);
					} catch (Exception e) {
						logger.warn("(1) Could not determine type for field:  " + md.getObjectName() + ":"  + a + ": " + e);
					}
					acceptor.accept(createCompletionProposalFormatted("$" + a, type, 1, context));
				}
				if ( showGetters ) {
					fields = md.getGetters();
					for ( String a : fields ) {
						String type = "unknown";
						try {
							type = md.getGetterType(a);
						} catch (Exception e) {
							logger.warn("(1) Could not determine type for field:  " + md.getObjectName() + ":"  + a + ": " + e);
						}
						acceptor.accept(createCompletionProposalFormatted("$" + a, type, 1, context));
					}
				}
			} else if ( map instanceof MappedArrayFieldImpl ) {
				logger.warn("Closest map is a MappedArrayFieldImpl: should not happen.");
			}
		}
	}

	/**
	 * For the construction of a "method" inside an adapter.
	 * Shows list of available method names based on  nearest map.
	 * 
	 * map.[someadapter]  {
	 * 
	 *   .[method]([arguments]);
	 *   
	 * }
	 */
	@Override
	public void completeAdapterMethod_Method(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {


		EObject map = NavigationUtils.findFirstMapOrMappedField(context.getLastCompleteNode(), 0);
		if ( map != null ) {
			String adapterName = null;
			if ( map instanceof MapImpl ) {
				adapterName = ((MapImpl) map).getAdapterName();
			} else {
				// Methods are not supported in MappedArrayField
				return;
			}
			Set<ProxyMethodDefinition> methods = getNavajoProxyStub().getAdapter(adapterName).getMethods();
			ProxyMapDefinition md = getNavajoProxyStub().getAdapter(adapterName).getMapDefinition();
			for ( ProxyMethodDefinition a : methods) {
				Set<String> parameters = a.getParameters();
				acceptor.accept(createCompletionProposalFormatted("." + a.getName(), parameters+"", 1, context));
			}
		} else {
			logger.warn("No parent map found");
		}
	}
	
	@Override
	public void completeLoop_Mappable(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		String prefix = NavigationUtils.getParentPrefix(context.getPrefix(), new StringBuffer());
		int level = NavigationUtils.countMappableParentLevel(prefix);

		EObject map = NavigationUtils.findFirstMapOrMappedField(context.getLastCompleteNode(), level);

		if ( map != null ) {
			AdapterClassDefinition md = NavigationUtils.findAdapterClass(getNavajoProxyStub(), map);

			if ( md != null ) {
				Set<String> fields = md.getGetters();
				for ( String a : fields ) {
					if ( !md.isPrimitiveType(a)) { // Exclude primitive types from being loop-ed.
						List<List<String>> type = new ArrayList<>();
						try {
							type = md.getGetterTypeSignatures(a);
						} catch (Exception e) {
							logger.warn("(2) Could not determine type for field: " + a  + ": " + e);
						}
						String typeStr = ( ( type != null ) ? type.toString() : "" ) + " -> " + md.getGetterType(a);
						acceptor.accept(createCompletionProposalFormatted(prefix + a, typeStr, 1, context));
					}
				}
			} else {
				logger.warn("Could not findAdapterClass for map: " + map);
			}
		}
	}

	@Override
	public void completeMap_AdapterName(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		String [] list =  getNavajoProxyStub().getAdapters();

		for ( String a : list) {
			if ( getNavajoProxyStub().getAdapter(a) != null ) {
				ProxyMapDefinition md = getNavajoProxyStub().getAdapter(a).getMapDefinition();
				String description = ( md.description != null ? md.description.replaceAll("\n", "") : null);
				acceptor.accept(createCompletionProposalFormatted(md.tagName, description, 1, context));
			} else {
				acceptor.accept(createCompletionProposalFormatted(a, "-", 1, context));
			}
		}
	}

	/**
	 * For the construction of a mappabled field inside an expression.
	 * 
	 * ... = $[mappable_field] ... [expression]
	 * 
	 */
	@Override
	public void completeMappableIdentifier_Field(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		String prefix = NavigationUtils.getParentPrefix(context.getPrefix(), new StringBuffer());
		int level = NavigationUtils.countMappableParentLevel(prefix);

		EObject map = NavigationUtils.findFirstMapOrMappedField(context.getLastCompleteNode(), level);
		if ( map != null ) {
			AdapterClassDefinition md = NavigationUtils.findAdapterClass(getNavajoProxyStub(), map);
			if ( md != null ) {
				Set<String> fields = md.getGetters();
				for ( String a : fields ) {
					List<List<String>> type = new ArrayList<>();
					try {
						type = md.getGetterTypeSignatures(a);
					} catch (Exception e) {
						logger.warn("(2) Could not determine type for field: " + a  + ": " + e);
					}
					String typeStr = ( ( type != null ) ? type.toString() : "" ) + " -> " + md.getGetterType(a);
					acceptor.accept(createCompletionProposalFormatted(prefix + a, typeStr, 1, context));
				}
			} else {
				logger.warn("**** completeMappableIdentifier_Field: Could not find parent adapter for " + model);
			}
		}
	}

	/**
	 * For the construction of a mapped field 
	 * 
	 * [/My/Array] {
	 *   $[mapped_field]  {
	 *   
	 *   }
	 * }
	 */
	@Override
	public void completeMappedArrayField_Field(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {


		String prefix = NavigationUtils.getParentPrefix(context.getPrefix(), new StringBuffer());
		int level = NavigationUtils.countMappableParentLevel(prefix);

		EObject map = NavigationUtils.findFirstMapOrMappedField(context.getLastCompleteNode(), level);

		if ( map != null ) {
			AdapterClassDefinition md = NavigationUtils.findAdapterClass(getNavajoProxyStub(), map);

			if ( md != null ) {
				Set<String> fields = md.getGetters();
				for ( String a : fields ) {
					if ( !md.isPrimitiveType(a)) {
						List<List<String>> type = new ArrayList<>();
						try {
							type = md.getGetterTypeSignatures(a);
						} catch (Exception e) {
							logger.warn("(2) Could not determine type for field: " + a  + ": " + e);
						}
						String typeStr = ( ( type != null ) ? type.toString() : "" ) + " -> " + md.getGetterType(a);
						acceptor.accept(createCompletionProposalFormatted(prefix + a, typeStr, 1, context));
					}
				}
			} else {
				logger.warn("Could not findAdapterClass for map: " + map);
			}
		}
	}


	@Override
	public void completeFunctionIdentifier_Func(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		String [] functions = getNavajoProxyStub().getFunctions();
		for ( String a : functions ) {
			if ( a != null ) {
				String description = "";
				try {
					description = getNavajoProxyStub().getFunction(a).getDescription();
				} catch (Exception e) {
					logger.warn("(3) Could not determine type for field: " + a + ": " + e);
				}
				acceptor.accept(createCompletionProposalFormatted( a + "(", ": " + getNavajoProxyStub().getFunction(a).getResult() + " -- " + description, 1, context));
			}
		}
	}

	@Override
	public void completeFunctionIdentifier_Args(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		if ( model instanceof FunctionIdentifierImpl ) {

			FunctionIdentifierImpl fil = (FunctionIdentifierImpl) model;
			EList<Expression> arguments = fil.getArgs();
			int doneSize = arguments.size();
			
			List<String> altInputs = getNavajoProxyStub().getFunction(fil.getFunc()).getInput();
		
			for ( String alt : altInputs ) {
				String [] allParams = alt.split(",");
				StringBuffer done = new StringBuffer();
				StringBuffer tbd = new StringBuffer();
				for ( int i = 0; i < allParams.length; i++ ) {
					if ( i < doneSize ) {
						done.append(allParams[i]);
					} else {
						tbd.append(allParams[i]);
					}
				}
				acceptor.accept(createCompletionProposalFormatted("", done.toString(), tbd.toString(), 10, context));
			}

		}
	}

	@Override
	public void serviceChanged(ServiceEvent arg0) {
		init();
	}

}
