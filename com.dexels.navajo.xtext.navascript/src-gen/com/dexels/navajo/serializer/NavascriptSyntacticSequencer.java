/*
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.serializer;

import com.dexels.navajo.services.NavascriptGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class NavascriptSyntacticSequencer extends AbstractSyntacticSequencer {

	protected NavascriptGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BreakParameter_ColonKeyword_0_1_1_or_EqualsSignKeyword_0_1_0;
	protected AbstractElementAlias match_BreakParameter_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0;
	protected AbstractElementAlias match_BreakParameter_ColonKeyword_2_1_1_or_EqualsSignKeyword_2_1_0;
	protected AbstractElementAlias match_Break___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_CardinalityArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0;
	protected AbstractElementAlias match_CheckAttribute_ColonKeyword_0_1_1_1_or_EqualsSignKeyword_0_1_1_0;
	protected AbstractElementAlias match_CheckAttribute_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0;
	protected AbstractElementAlias match_Check_ColonKeyword_7_1_or_EqualsSignKeyword_7_0;
	protected AbstractElementAlias match_Define_ColonKeyword_3_1_or_EqualsSignKeyword_3_0;
	protected AbstractElementAlias match_DescriptionArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0;
	protected AbstractElementAlias match_DirectionArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0;
	protected AbstractElementAlias match_KeyValueArgument_ColonKeyword_2_1_or_EqualsSignKeyword_2_0;
	protected AbstractElementAlias match_LengthArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0;
	protected AbstractElementAlias match_Loop_ColonKeyword_3_2_1_or_EqualsSignKeyword_3_2_0;
	protected AbstractElementAlias match_Map_ColonKeyword_1_1_3_1_or_EqualsSignKeyword_1_1_3_0;
	protected AbstractElementAlias match_Map___LeftParenthesisKeyword_1_0_2_0_RightParenthesisKeyword_1_0_2_2__q;
	protected AbstractElementAlias match_MappableIdentifier___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_MappedArrayField_ColonKeyword_2_2_1_or_EqualsSignKeyword_2_2_0;
	protected AbstractElementAlias match_MappedArrayMessage_ColonKeyword_2_2_1_or_EqualsSignKeyword_2_2_0;
	protected AbstractElementAlias match_MessageArgument_ColonKeyword_0_1_1_or_EqualsSignKeyword_0_1_0;
	protected AbstractElementAlias match_MessageArgument_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0;
	protected AbstractElementAlias match_Message_SemicolonKeyword_4_1_or___LeftCurlyBracketKeyword_4_0_0_RightCurlyBracketKeyword_4_0_2___or___LeftSquareBracketKeyword_4_2_0_RightSquareBracketKeyword_4_2_2__;
	protected AbstractElementAlias match_Option_ColonKeyword_2_1_or_EqualsSignKeyword_2_0;
	protected AbstractElementAlias match_Property_ColonKeyword_4_0_0_0_1_or_EqualsSignKeyword_4_0_0_0_0;
	protected AbstractElementAlias match_SBreakOnNoLock_ColonKeyword_1_1_or_EqualsSignKeyword_1_0;
	protected AbstractElementAlias match_SBreakOnNoLock_STimeout___BreakOnNoLockKeyword_0___ColonKeyword_1_1_or_EqualsSignKeyword_1_0_____or___TimeoutKeyword_0___ColonKeyword_1_1_or_EqualsSignKeyword_1_0____;
	protected AbstractElementAlias match_SKey_ColonKeyword_1_1_or_EqualsSignKeyword_1_0;
	protected AbstractElementAlias match_STimeout_ColonKeyword_1_1_or_EqualsSignKeyword_1_0;
	protected AbstractElementAlias match_SetterField_ColonKeyword_2_0_0_1_or_EqualsSignKeyword_2_0_0_0;
	protected AbstractElementAlias match_SubTypeArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0;
	protected AbstractElementAlias match_TypeArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0;
	protected AbstractElementAlias match_VarMode_ColonKeyword_2_1_or_EqualsSignKeyword_2_0;
	protected AbstractElementAlias match_VarType_ColonKeyword_2_1_or_EqualsSignKeyword_2_0;
	protected AbstractElementAlias match_Var_ColonKeyword_4_0_0_1_or_EqualsSignKeyword_4_0_0_0;
	protected AbstractElementAlias match_Var___LeftCurlyBracketKeyword_4_2_0_RightCurlyBracketKeyword_4_2_2___or___LeftSquareBracketKeyword_4_1_0_RightSquareBracketKeyword_4_1_2__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (NavascriptGrammarAccess) access;
		match_BreakParameter_ColonKeyword_0_1_1_or_EqualsSignKeyword_0_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBreakParameterAccess().getColonKeyword_0_1_1()), new TokenAlias(false, false, grammarAccess.getBreakParameterAccess().getEqualsSignKeyword_0_1_0()));
		match_BreakParameter_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBreakParameterAccess().getColonKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getBreakParameterAccess().getEqualsSignKeyword_1_1_0()));
		match_BreakParameter_ColonKeyword_2_1_1_or_EqualsSignKeyword_2_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBreakParameterAccess().getColonKeyword_2_1_1()), new TokenAlias(false, false, grammarAccess.getBreakParameterAccess().getEqualsSignKeyword_2_1_0()));
		match_Break___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getBreakAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getBreakAccess().getRightParenthesisKeyword_2_2()));
		match_CardinalityArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCardinalityArgumentAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getCardinalityArgumentAccess().getEqualsSignKeyword_1_0()));
		match_CheckAttribute_ColonKeyword_0_1_1_1_or_EqualsSignKeyword_0_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCheckAttributeAccess().getColonKeyword_0_1_1_1()), new TokenAlias(false, false, grammarAccess.getCheckAttributeAccess().getEqualsSignKeyword_0_1_1_0()));
		match_CheckAttribute_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCheckAttributeAccess().getColonKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getCheckAttributeAccess().getEqualsSignKeyword_1_1_0()));
		match_Check_ColonKeyword_7_1_or_EqualsSignKeyword_7_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCheckAccess().getColonKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getCheckAccess().getEqualsSignKeyword_7_0()));
		match_Define_ColonKeyword_3_1_or_EqualsSignKeyword_3_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDefineAccess().getColonKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getDefineAccess().getEqualsSignKeyword_3_0()));
		match_DescriptionArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDescriptionArgumentAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getDescriptionArgumentAccess().getEqualsSignKeyword_1_0()));
		match_DirectionArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDirectionArgumentAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getDirectionArgumentAccess().getEqualsSignKeyword_1_0()));
		match_KeyValueArgument_ColonKeyword_2_1_or_EqualsSignKeyword_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getKeyValueArgumentAccess().getColonKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getKeyValueArgumentAccess().getEqualsSignKeyword_2_0()));
		match_LengthArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLengthArgumentAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getLengthArgumentAccess().getEqualsSignKeyword_1_0()));
		match_Loop_ColonKeyword_3_2_1_or_EqualsSignKeyword_3_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLoopAccess().getColonKeyword_3_2_1()), new TokenAlias(false, false, grammarAccess.getLoopAccess().getEqualsSignKeyword_3_2_0()));
		match_Map_ColonKeyword_1_1_3_1_or_EqualsSignKeyword_1_1_3_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMapAccess().getColonKeyword_1_1_3_1()), new TokenAlias(false, false, grammarAccess.getMapAccess().getEqualsSignKeyword_1_1_3_0()));
		match_Map___LeftParenthesisKeyword_1_0_2_0_RightParenthesisKeyword_1_0_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMapAccess().getLeftParenthesisKeyword_1_0_2_0()), new TokenAlias(false, false, grammarAccess.getMapAccess().getRightParenthesisKeyword_1_0_2_2()));
		match_MappableIdentifier___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMappableIdentifierAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getMappableIdentifierAccess().getRightParenthesisKeyword_2_2()));
		match_MappedArrayField_ColonKeyword_2_2_1_or_EqualsSignKeyword_2_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMappedArrayFieldAccess().getColonKeyword_2_2_1()), new TokenAlias(false, false, grammarAccess.getMappedArrayFieldAccess().getEqualsSignKeyword_2_2_0()));
		match_MappedArrayMessage_ColonKeyword_2_2_1_or_EqualsSignKeyword_2_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMappedArrayMessageAccess().getColonKeyword_2_2_1()), new TokenAlias(false, false, grammarAccess.getMappedArrayMessageAccess().getEqualsSignKeyword_2_2_0()));
		match_MessageArgument_ColonKeyword_0_1_1_or_EqualsSignKeyword_0_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMessageArgumentAccess().getColonKeyword_0_1_1()), new TokenAlias(false, false, grammarAccess.getMessageArgumentAccess().getEqualsSignKeyword_0_1_0()));
		match_MessageArgument_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMessageArgumentAccess().getColonKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getMessageArgumentAccess().getEqualsSignKeyword_1_1_0()));
		match_Message_SemicolonKeyword_4_1_or___LeftCurlyBracketKeyword_4_0_0_RightCurlyBracketKeyword_4_0_2___or___LeftSquareBracketKeyword_4_2_0_RightSquareBracketKeyword_4_2_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getMessageAccess().getLeftCurlyBracketKeyword_4_0_0()), new TokenAlias(false, false, grammarAccess.getMessageAccess().getRightCurlyBracketKeyword_4_0_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getMessageAccess().getLeftSquareBracketKeyword_4_2_0()), new TokenAlias(false, false, grammarAccess.getMessageAccess().getRightSquareBracketKeyword_4_2_2())), new TokenAlias(false, false, grammarAccess.getMessageAccess().getSemicolonKeyword_4_1()));
		match_Option_ColonKeyword_2_1_or_EqualsSignKeyword_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOptionAccess().getColonKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getOptionAccess().getEqualsSignKeyword_2_0()));
		match_Property_ColonKeyword_4_0_0_0_1_or_EqualsSignKeyword_4_0_0_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPropertyAccess().getColonKeyword_4_0_0_0_1()), new TokenAlias(false, false, grammarAccess.getPropertyAccess().getEqualsSignKeyword_4_0_0_0_0()));
		match_SBreakOnNoLock_ColonKeyword_1_1_or_EqualsSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSBreakOnNoLockAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getSBreakOnNoLockAccess().getEqualsSignKeyword_1_0()));
		match_SBreakOnNoLock_STimeout___BreakOnNoLockKeyword_0___ColonKeyword_1_1_or_EqualsSignKeyword_1_0_____or___TimeoutKeyword_0___ColonKeyword_1_1_or_EqualsSignKeyword_1_0____ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getSBreakOnNoLockAccess().getBreakOnNoLockKeyword_0()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSBreakOnNoLockAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getSBreakOnNoLockAccess().getEqualsSignKeyword_1_0()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getSTimeoutAccess().getTimeoutKeyword_0()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSTimeoutAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getSTimeoutAccess().getEqualsSignKeyword_1_0()))));
		match_SKey_ColonKeyword_1_1_or_EqualsSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSKeyAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getSKeyAccess().getEqualsSignKeyword_1_0()));
		match_STimeout_ColonKeyword_1_1_or_EqualsSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSTimeoutAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getSTimeoutAccess().getEqualsSignKeyword_1_0()));
		match_SetterField_ColonKeyword_2_0_0_1_or_EqualsSignKeyword_2_0_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSetterFieldAccess().getColonKeyword_2_0_0_1()), new TokenAlias(false, false, grammarAccess.getSetterFieldAccess().getEqualsSignKeyword_2_0_0_0()));
		match_SubTypeArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSubTypeArgumentAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getSubTypeArgumentAccess().getEqualsSignKeyword_1_0()));
		match_TypeArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTypeArgumentAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getTypeArgumentAccess().getEqualsSignKeyword_1_0()));
		match_VarMode_ColonKeyword_2_1_or_EqualsSignKeyword_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getVarModeAccess().getColonKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getVarModeAccess().getEqualsSignKeyword_2_0()));
		match_VarType_ColonKeyword_2_1_or_EqualsSignKeyword_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getVarTypeAccess().getColonKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getVarTypeAccess().getEqualsSignKeyword_2_0()));
		match_Var_ColonKeyword_4_0_0_1_or_EqualsSignKeyword_4_0_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getVarAccess().getColonKeyword_4_0_0_1()), new TokenAlias(false, false, grammarAccess.getVarAccess().getEqualsSignKeyword_4_0_0_0()));
		match_Var___LeftCurlyBracketKeyword_4_2_0_RightCurlyBracketKeyword_4_2_2___or___LeftSquareBracketKeyword_4_1_0_RightSquareBracketKeyword_4_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getVarAccess().getLeftCurlyBracketKeyword_4_2_0()), new TokenAlias(false, false, grammarAccess.getVarAccess().getRightCurlyBracketKeyword_4_2_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getVarAccess().getLeftSquareBracketKeyword_4_1_0()), new TokenAlias(false, false, grammarAccess.getVarAccess().getRightSquareBracketKeyword_4_1_2())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getSContextRule())
			return getSContextToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * SContext : 'context' ('=' | ':') ('user' | 'service');
	 */
	protected String getSContextToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "context = user";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BreakParameter_ColonKeyword_0_1_1_or_EqualsSignKeyword_0_1_0.equals(syntax))
				emit_BreakParameter_ColonKeyword_0_1_1_or_EqualsSignKeyword_0_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BreakParameter_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0.equals(syntax))
				emit_BreakParameter_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BreakParameter_ColonKeyword_2_1_1_or_EqualsSignKeyword_2_1_0.equals(syntax))
				emit_BreakParameter_ColonKeyword_2_1_1_or_EqualsSignKeyword_2_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Break___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_Break___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CardinalityArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0.equals(syntax))
				emit_CardinalityArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CheckAttribute_ColonKeyword_0_1_1_1_or_EqualsSignKeyword_0_1_1_0.equals(syntax))
				emit_CheckAttribute_ColonKeyword_0_1_1_1_or_EqualsSignKeyword_0_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CheckAttribute_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0.equals(syntax))
				emit_CheckAttribute_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Check_ColonKeyword_7_1_or_EqualsSignKeyword_7_0.equals(syntax))
				emit_Check_ColonKeyword_7_1_or_EqualsSignKeyword_7_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Define_ColonKeyword_3_1_or_EqualsSignKeyword_3_0.equals(syntax))
				emit_Define_ColonKeyword_3_1_or_EqualsSignKeyword_3_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DescriptionArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0.equals(syntax))
				emit_DescriptionArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DirectionArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0.equals(syntax))
				emit_DirectionArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_KeyValueArgument_ColonKeyword_2_1_or_EqualsSignKeyword_2_0.equals(syntax))
				emit_KeyValueArgument_ColonKeyword_2_1_or_EqualsSignKeyword_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LengthArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0.equals(syntax))
				emit_LengthArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Loop_ColonKeyword_3_2_1_or_EqualsSignKeyword_3_2_0.equals(syntax))
				emit_Loop_ColonKeyword_3_2_1_or_EqualsSignKeyword_3_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Map_ColonKeyword_1_1_3_1_or_EqualsSignKeyword_1_1_3_0.equals(syntax))
				emit_Map_ColonKeyword_1_1_3_1_or_EqualsSignKeyword_1_1_3_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Map___LeftParenthesisKeyword_1_0_2_0_RightParenthesisKeyword_1_0_2_2__q.equals(syntax))
				emit_Map___LeftParenthesisKeyword_1_0_2_0_RightParenthesisKeyword_1_0_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MappableIdentifier___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_MappableIdentifier___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MappedArrayField_ColonKeyword_2_2_1_or_EqualsSignKeyword_2_2_0.equals(syntax))
				emit_MappedArrayField_ColonKeyword_2_2_1_or_EqualsSignKeyword_2_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MappedArrayMessage_ColonKeyword_2_2_1_or_EqualsSignKeyword_2_2_0.equals(syntax))
				emit_MappedArrayMessage_ColonKeyword_2_2_1_or_EqualsSignKeyword_2_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MessageArgument_ColonKeyword_0_1_1_or_EqualsSignKeyword_0_1_0.equals(syntax))
				emit_MessageArgument_ColonKeyword_0_1_1_or_EqualsSignKeyword_0_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MessageArgument_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0.equals(syntax))
				emit_MessageArgument_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_SemicolonKeyword_4_1_or___LeftCurlyBracketKeyword_4_0_0_RightCurlyBracketKeyword_4_0_2___or___LeftSquareBracketKeyword_4_2_0_RightSquareBracketKeyword_4_2_2__.equals(syntax))
				emit_Message_SemicolonKeyword_4_1_or___LeftCurlyBracketKeyword_4_0_0_RightCurlyBracketKeyword_4_0_2___or___LeftSquareBracketKeyword_4_2_0_RightSquareBracketKeyword_4_2_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Option_ColonKeyword_2_1_or_EqualsSignKeyword_2_0.equals(syntax))
				emit_Option_ColonKeyword_2_1_or_EqualsSignKeyword_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Property_ColonKeyword_4_0_0_0_1_or_EqualsSignKeyword_4_0_0_0_0.equals(syntax))
				emit_Property_ColonKeyword_4_0_0_0_1_or_EqualsSignKeyword_4_0_0_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SBreakOnNoLock_ColonKeyword_1_1_or_EqualsSignKeyword_1_0.equals(syntax))
				emit_SBreakOnNoLock_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SBreakOnNoLock_STimeout___BreakOnNoLockKeyword_0___ColonKeyword_1_1_or_EqualsSignKeyword_1_0_____or___TimeoutKeyword_0___ColonKeyword_1_1_or_EqualsSignKeyword_1_0____.equals(syntax))
				emit_SBreakOnNoLock_STimeout___BreakOnNoLockKeyword_0___ColonKeyword_1_1_or_EqualsSignKeyword_1_0_____or___TimeoutKeyword_0___ColonKeyword_1_1_or_EqualsSignKeyword_1_0____(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SKey_ColonKeyword_1_1_or_EqualsSignKeyword_1_0.equals(syntax))
				emit_SKey_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_STimeout_ColonKeyword_1_1_or_EqualsSignKeyword_1_0.equals(syntax))
				emit_STimeout_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SetterField_ColonKeyword_2_0_0_1_or_EqualsSignKeyword_2_0_0_0.equals(syntax))
				emit_SetterField_ColonKeyword_2_0_0_1_or_EqualsSignKeyword_2_0_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SubTypeArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0.equals(syntax))
				emit_SubTypeArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TypeArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0.equals(syntax))
				emit_TypeArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VarMode_ColonKeyword_2_1_or_EqualsSignKeyword_2_0.equals(syntax))
				emit_VarMode_ColonKeyword_2_1_or_EqualsSignKeyword_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VarType_ColonKeyword_2_1_or_EqualsSignKeyword_2_0.equals(syntax))
				emit_VarType_ColonKeyword_2_1_or_EqualsSignKeyword_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Var_ColonKeyword_4_0_0_1_or_EqualsSignKeyword_4_0_0_0.equals(syntax))
				emit_Var_ColonKeyword_4_0_0_1_or_EqualsSignKeyword_4_0_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Var___LeftCurlyBracketKeyword_4_2_0_RightCurlyBracketKeyword_4_2_2___or___LeftSquareBracketKeyword_4_1_0_RightSquareBracketKeyword_4_1_2__.equals(syntax))
				emit_Var___LeftCurlyBracketKeyword_4_2_0_RightCurlyBracketKeyword_4_2_2___or___LeftSquareBracketKeyword_4_1_0_RightSquareBracketKeyword_4_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'code' (ambiguity) code=LiteralOrExpression
	 */
	protected void emit_BreakParameter_ColonKeyword_0_1_1_or_EqualsSignKeyword_0_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'description' (ambiguity) description=LiteralOrExpression
	 */
	protected void emit_BreakParameter_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'error' (ambiguity) expression=Expression
	 *     (rule start) 'error' (ambiguity) literal=QUOTED_IDENTIFIER
	 *     (rule start) 'error' (ambiguity) literal=STRING_CONSTANT
	 */
	protected void emit_BreakParameter_ColonKeyword_2_1_1_or_EqualsSignKeyword_2_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'break' (ambiguity) ';' (rule start)
	 */
	protected void emit_Break___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'cardinality' (ambiguity) value='+'
	 *     (rule start) 'cardinality' (ambiguity) value=ONE
	 */
	protected void emit_CardinalityArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'code' (ambiguity) value=LiteralOrExpression
	 */
	protected void emit_CheckAttribute_ColonKeyword_0_1_1_1_or_EqualsSignKeyword_0_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'description' (ambiguity) value=LiteralOrExpression
	 */
	protected void emit_CheckAttribute_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     checkAttributes+=CheckAttribute ')' (ambiguity) expression=Expression
	 */
	protected void emit_Check_ColonKeyword_7_1_or_EqualsSignKeyword_7_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     defineKey=QUOTED_IDENTIFIER (ambiguity) expression=Expression
	 */
	protected void emit_Define_ColonKeyword_3_1_or_EqualsSignKeyword_3_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'description' (ambiguity) value=LiteralOrExpression
	 */
	protected void emit_DescriptionArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'direction' (ambiguity) value='in'
	 *     (rule start) 'direction' (ambiguity) value='inout'
	 *     (rule start) 'direction' (ambiguity) value='out'
	 */
	protected void emit_DirectionArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     key=IDENTIFIER (ambiguity) value=LiteralOrExpression
	 *     key=OPTION_TYPE (ambiguity) value=LiteralOrExpression
	 */
	protected void emit_KeyValueArgument_ColonKeyword_2_1_or_EqualsSignKeyword_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'length' (ambiguity) value=INTEGER
	 */
	protected void emit_LengthArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     mappable=MappableIdentifier '(' 'filter' (ambiguity) filter=Expression
	 *     tml=TmlIdentifier '(' 'filter' (ambiguity) filter=Expression
	 */
	protected void emit_Loop_ColonKeyword_3_2_1_or_EqualsSignKeyword_3_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'map' '(' 'object' (ambiguity) objectName=OBJECT_IDENTIFIER
	 */
	protected void emit_Map_ColonKeyword_1_1_3_1_or_EqualsSignKeyword_1_1_3_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     adapterName=IDENTIFIER (ambiguity) '{' '}' (rule end)
	 *     adapterName=IDENTIFIER (ambiguity) '{' statements+=InnerBody
	 */
	protected void emit_Map___LeftParenthesisKeyword_1_0_2_0_RightParenthesisKeyword_1_0_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     field=MAPPABLE_IDENTIFIER (ambiguity) (rule end)
	 */
	protected void emit_MappableIdentifier___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     field=MAPPABLE_IDENTIFIER '(' 'filter' (ambiguity) filter=Expression
	 */
	protected void emit_MappedArrayField_ColonKeyword_2_2_1_or_EqualsSignKeyword_2_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     message=TML_LITERAL '(' 'filter' (ambiguity) filter=Expression
	 */
	protected void emit_MappedArrayMessage_ColonKeyword_2_2_1_or_EqualsSignKeyword_2_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'type' (ambiguity) 'array' (rule start)
	 *     (rule start) 'type' (ambiguity) 'arrayelement' (rule start)
	 *     (rule start) 'type' (ambiguity) 'simple' (rule start)
	 */
	protected void emit_MessageArgument_ColonKeyword_0_1_1_or_EqualsSignKeyword_0_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'mode' (ambiguity) 'ignore' (rule start)
	 *     (rule start) 'mode' (ambiguity) 'overwrite' (rule start)
	 */
	protected void emit_MessageArgument_ColonKeyword_1_1_1_or_EqualsSignKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}') | ';' | ('[' ']')
	 *
	 * This ambiguous syntax occurs at:
	 *     arguments=MessageArguments ')' (ambiguity) (rule end)
	 *     messageName=QUOTED_IDENTIFIER (ambiguity) (rule end)
	 */
	protected void emit_Message_SemicolonKeyword_4_1_or___LeftCurlyBracketKeyword_4_0_0_RightCurlyBracketKeyword_4_0_2___or___LeftSquareBracketKeyword_4_2_0_RightSquareBracketKeyword_4_2_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     option=OPTION_TYPE (ambiguity) expressionList=ConditionalExpressions
	 */
	protected void emit_Option_ColonKeyword_2_1_or_EqualsSignKeyword_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     arguments=PropertyArguments (ambiguity) expressionList=ConditionalExpressions
	 *     propertyName=QUOTED_IDENTIFIER (ambiguity) expressionList=ConditionalExpressions
	 */
	protected void emit_Property_ColonKeyword_4_0_0_0_1_or_EqualsSignKeyword_4_0_0_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'breakOnNoLock' (ambiguity) '!' expression=Atomic
	 *     (rule start) 'breakOnNoLock' (ambiguity) '(' value=Expression
	 *     (rule start) 'breakOnNoLock' (ambiguity) '-' expression=Atomic
	 *     (rule start) 'breakOnNoLock' (ambiguity) hasExists?='?'
	 *     (rule start) 'breakOnNoLock' (ambiguity) value=FALSE
	 *     (rule start) 'breakOnNoLock' (ambiguity) value=FLOAT
	 *     (rule start) 'breakOnNoLock' (ambiguity) value=ForAllIdentifier
	 *     (rule start) 'breakOnNoLock' (ambiguity) value=FunctionIdentifier
	 *     (rule start) 'breakOnNoLock' (ambiguity) value=INTEGER
	 *     (rule start) 'breakOnNoLock' (ambiguity) value=MappableIdentifier
	 *     (rule start) 'breakOnNoLock' (ambiguity) value=NULL_DEF
	 *     (rule start) 'breakOnNoLock' (ambiguity) value=ONE
	 *     (rule start) 'breakOnNoLock' (ambiguity) value=STRING_LITERAL
	 *     (rule start) 'breakOnNoLock' (ambiguity) value=TRUE
	 *     (rule start) 'breakOnNoLock' (ambiguity) value=TmlIdentifier
	 *     (rule start) 'breakOnNoLock' (ambiguity) {AndOrExpression.left=}
	 *     (rule start) 'breakOnNoLock' (ambiguity) {Comparison.left=}
	 *     (rule start) 'breakOnNoLock' (ambiguity) {Equals.left=}
	 *     (rule start) 'breakOnNoLock' (ambiguity) {Minus.left=}
	 *     (rule start) 'breakOnNoLock' (ambiguity) {MultiOrDiv.left=}
	 *     (rule start) 'breakOnNoLock' (ambiguity) {Plus.left=}
	 */
	protected void emit_SBreakOnNoLock_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('timeout' ('=' | ':')) | ('breakOnNoLock' ('=' | ':'))
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' expression=Atomic
	 *     (rule start) (ambiguity) '(' value=Expression
	 *     (rule start) (ambiguity) '-' expression=Atomic
	 *     (rule start) (ambiguity) hasExists?='?'
	 *     (rule start) (ambiguity) value=FALSE
	 *     (rule start) (ambiguity) value=FLOAT
	 *     (rule start) (ambiguity) value=ForAllIdentifier
	 *     (rule start) (ambiguity) value=FunctionIdentifier
	 *     (rule start) (ambiguity) value=INTEGER
	 *     (rule start) (ambiguity) value=MappableIdentifier
	 *     (rule start) (ambiguity) value=NULL_DEF
	 *     (rule start) (ambiguity) value=ONE
	 *     (rule start) (ambiguity) value=STRING_LITERAL
	 *     (rule start) (ambiguity) value=TRUE
	 *     (rule start) (ambiguity) value=TmlIdentifier
	 *     (rule start) (ambiguity) {AndOrExpression.left=}
	 *     (rule start) (ambiguity) {Comparison.left=}
	 *     (rule start) (ambiguity) {Equals.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {MultiOrDiv.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 */
	protected void emit_SBreakOnNoLock_STimeout___BreakOnNoLockKeyword_0___ColonKeyword_1_1_or_EqualsSignKeyword_1_0_____or___TimeoutKeyword_0___ColonKeyword_1_1_or_EqualsSignKeyword_1_0____(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'key' (ambiguity) expression=Expression
	 *     (rule start) 'key' (ambiguity) literal=QUOTED_IDENTIFIER
	 *     (rule start) 'key' (ambiguity) literal=STRING_CONSTANT
	 */
	protected void emit_SKey_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'timeout' (ambiguity) '!' expression=Atomic
	 *     (rule start) 'timeout' (ambiguity) '(' value=Expression
	 *     (rule start) 'timeout' (ambiguity) '-' expression=Atomic
	 *     (rule start) 'timeout' (ambiguity) hasExists?='?'
	 *     (rule start) 'timeout' (ambiguity) value=FALSE
	 *     (rule start) 'timeout' (ambiguity) value=FLOAT
	 *     (rule start) 'timeout' (ambiguity) value=ForAllIdentifier
	 *     (rule start) 'timeout' (ambiguity) value=FunctionIdentifier
	 *     (rule start) 'timeout' (ambiguity) value=INTEGER
	 *     (rule start) 'timeout' (ambiguity) value=MappableIdentifier
	 *     (rule start) 'timeout' (ambiguity) value=NULL_DEF
	 *     (rule start) 'timeout' (ambiguity) value=ONE
	 *     (rule start) 'timeout' (ambiguity) value=STRING_LITERAL
	 *     (rule start) 'timeout' (ambiguity) value=TRUE
	 *     (rule start) 'timeout' (ambiguity) value=TmlIdentifier
	 *     (rule start) 'timeout' (ambiguity) {AndOrExpression.left=}
	 *     (rule start) 'timeout' (ambiguity) {Comparison.left=}
	 *     (rule start) 'timeout' (ambiguity) {Equals.left=}
	 *     (rule start) 'timeout' (ambiguity) {Minus.left=}
	 *     (rule start) 'timeout' (ambiguity) {MultiOrDiv.left=}
	 *     (rule start) 'timeout' (ambiguity) {Plus.left=}
	 */
	protected void emit_STimeout_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     field=MAPPABLE_IDENTIFIER (ambiguity) expressionList=ConditionalExpressions
	 */
	protected void emit_SetterField_ColonKeyword_2_0_0_1_or_EqualsSignKeyword_2_0_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'subtype' (ambiguity) value=IDENTIFIER
	 */
	protected void emit_SubTypeArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'type' (ambiguity) value=PropertyType
	 */
	protected void emit_TypeArgument_ColonKeyword_1_1_or_EqualsSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'mode' (ambiguity) mode=MessageMode
	 */
	protected void emit_VarMode_ColonKeyword_2_1_or_EqualsSignKeyword_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'type' (ambiguity) type=MessageType
	 *     (rule start) 'type' (ambiguity) type=PropertyType
	 */
	protected void emit_VarType_ColonKeyword_2_1_or_EqualsSignKeyword_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | ':'
	 *
	 * This ambiguous syntax occurs at:
	 *     arguments=VarArguments (ambiguity) expressionList=ConditionalExpressions
	 *     varName=IDENTIFIER (ambiguity) expressionList=ConditionalExpressions
	 */
	protected void emit_Var_ColonKeyword_4_0_0_1_or_EqualsSignKeyword_4_0_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']') | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     arguments=VarArguments (ambiguity) (rule end)
	 *     varName=IDENTIFIER (ambiguity) (rule end)
	 */
	protected void emit_Var___LeftCurlyBracketKeyword_4_2_0_RightCurlyBracketKeyword_4_2_2___or___LeftSquareBracketKeyword_4_1_0_RightSquareBracketKeyword_4_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
