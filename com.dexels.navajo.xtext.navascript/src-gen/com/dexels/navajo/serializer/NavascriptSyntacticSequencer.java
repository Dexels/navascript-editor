/*
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.serializer;

import com.dexels.navajo.services.NavascriptGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class NavascriptSyntacticSequencer extends AbstractSyntacticSequencer {

	protected NavascriptGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Break___ARGS_STARTTerminalRuleCall_2_0_ARGS_ENDTerminalRuleCall_2_2__q;
	protected AbstractElementAlias match_Map___ARGS_STARTTerminalRuleCall_1_0_2_0_ARGS_ENDTerminalRuleCall_1_0_2_2__q;
	protected AbstractElementAlias match_MappableIdentifier___ARGS_STARTTerminalRuleCall_2_0_ARGS_ENDTerminalRuleCall_2_2__q;
	protected AbstractElementAlias match_Message_EOLTerminalRuleCall_4_1_or___BLOCK_STARTTerminalRuleCall_4_0_0_BLOCK_ENDTerminalRuleCall_4_0_2__;
	protected AbstractElementAlias match_SBreakOnNoLock_STimeout___BREAKONNOLOCK_DEFTerminalRuleCall_0_ASSIGNMENTTerminalRuleCall_1___or___TIMEOUT_DEFTerminalRuleCall_0_ASSIGNMENTTerminalRuleCall_1__;
	protected AbstractElementAlias match_Var___BLOCK_STARTTerminalRuleCall_4_2_0_BLOCK_ENDTerminalRuleCall_4_2_2___or___TML_STARTTerminalRuleCall_4_1_0_TML_ENDTerminalRuleCall_4_1_2__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (NavascriptGrammarAccess) access;
		match_Break___ARGS_STARTTerminalRuleCall_2_0_ARGS_ENDTerminalRuleCall_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getBreakAccess().getARGS_STARTTerminalRuleCall_2_0()), new TokenAlias(false, false, grammarAccess.getBreakAccess().getARGS_ENDTerminalRuleCall_2_2()));
		match_Map___ARGS_STARTTerminalRuleCall_1_0_2_0_ARGS_ENDTerminalRuleCall_1_0_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMapAccess().getARGS_STARTTerminalRuleCall_1_0_2_0()), new TokenAlias(false, false, grammarAccess.getMapAccess().getARGS_ENDTerminalRuleCall_1_0_2_2()));
		match_MappableIdentifier___ARGS_STARTTerminalRuleCall_2_0_ARGS_ENDTerminalRuleCall_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMappableIdentifierAccess().getARGS_STARTTerminalRuleCall_2_0()), new TokenAlias(false, false, grammarAccess.getMappableIdentifierAccess().getARGS_ENDTerminalRuleCall_2_2()));
		match_Message_EOLTerminalRuleCall_4_1_or___BLOCK_STARTTerminalRuleCall_4_0_0_BLOCK_ENDTerminalRuleCall_4_0_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getMessageAccess().getBLOCK_STARTTerminalRuleCall_4_0_0()), new TokenAlias(false, false, grammarAccess.getMessageAccess().getBLOCK_ENDTerminalRuleCall_4_0_2())), new TokenAlias(false, false, grammarAccess.getMessageAccess().getEOLTerminalRuleCall_4_1()));
		match_SBreakOnNoLock_STimeout___BREAKONNOLOCK_DEFTerminalRuleCall_0_ASSIGNMENTTerminalRuleCall_1___or___TIMEOUT_DEFTerminalRuleCall_0_ASSIGNMENTTerminalRuleCall_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getSBreakOnNoLockAccess().getBREAKONNOLOCK_DEFTerminalRuleCall_0()), new TokenAlias(false, false, grammarAccess.getSBreakOnNoLockAccess().getASSIGNMENTTerminalRuleCall_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getSTimeoutAccess().getTIMEOUT_DEFTerminalRuleCall_0()), new TokenAlias(false, false, grammarAccess.getSTimeoutAccess().getASSIGNMENTTerminalRuleCall_1())));
		match_Var___BLOCK_STARTTerminalRuleCall_4_2_0_BLOCK_ENDTerminalRuleCall_4_2_2___or___TML_STARTTerminalRuleCall_4_1_0_TML_ENDTerminalRuleCall_4_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getVarAccess().getBLOCK_STARTTerminalRuleCall_4_2_0()), new TokenAlias(false, false, grammarAccess.getVarAccess().getBLOCK_ENDTerminalRuleCall_4_2_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getVarAccess().getTML_STARTTerminalRuleCall_4_1_0()), new TokenAlias(false, false, grammarAccess.getVarAccess().getTML_ENDTerminalRuleCall_4_1_2())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getANTIMESSAGE_DEFRule())
			return getANTIMESSAGE_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getARGS_ENDRule())
			return getARGS_ENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getARGS_STARTRule())
			return getARGS_STARTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getARG_SEPRule())
			return getARG_SEPToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getASSIGNMENTRule())
			return getASSIGNMENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBLOCK_ENDRule())
			return getBLOCK_ENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBLOCK_STARTRule())
			return getBLOCK_STARTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBREAKONNOLOCK_DEFRule())
			return getBREAKONNOLOCK_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBREAK_DEFRule())
			return getBREAK_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCARDINALITY_DEFRule())
			return getCARDINALITY_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCHECK_DEFRule())
			return getCHECK_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCODE_DEFRule())
			return getCODE_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDEFINE_DEFRule())
			return getDEFINE_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDESCRIPTION_DEFRule())
			return getDESCRIPTION_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDIRECTION_DEFRule())
			return getDIRECTION_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getELSERule())
			return getELSEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEOLRule())
			return getEOLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getERROR_DEFRule())
			return getERROR_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFILTER_DEFRule())
			return getFILTER_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFINALLY_DEFRule())
			return getFINALLY_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIFRule())
			return getIFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINCLUDE_DEFRule())
			return getINCLUDE_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getKEY_DEFRule())
			return getKEY_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLENGTH_DEFRule())
			return getLENGTH_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLOG_DEFRule())
			return getLOG_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLOOP_DEFRule())
			return getLOOP_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMAP_DEFRule())
			return getMAP_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMAP_OLDSKOOL_DEFRule())
			return getMAP_OLDSKOOL_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMESSAGE_DEFRule())
			return getMESSAGE_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMETHODS_DEFRule())
			return getMETHODS_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMODE_DEFRule())
			return getMODE_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOBJECT_OLDSKOOL_DEFRule())
			return getOBJECT_OLDSKOOL_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOPTION_DEFRule())
			return getOPTION_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPRINT_DEFRule())
			return getPRINT_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPROPERTY_DEFRule())
			return getPROPERTY_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSContextRule())
			return getSContextToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSUBTYPE_DEFRule())
			return getSUBTYPE_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSYNCHRONIZED_DEFRule())
			return getSYNCHRONIZED_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTHENRule())
			return getTHENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTIMEOUT_DEFRule())
			return getTIMEOUT_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTML_ENDRule())
			return getTML_ENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTML_STARTRule())
			return getTML_STARTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTYPE_DEFRule())
			return getTYPE_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVALIDATIONS_DEFRule())
			return getVALIDATIONS_DEFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVAR_DEFRule())
			return getVAR_DEFToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ANTIMESSAGE_DEF : "antimessage";
	 */
	protected String getANTIMESSAGE_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "antimessage";
	}
	
	/**
	 * terminal ARGS_END : ')';
	 */
	protected String getARGS_ENDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal ARGS_START : '(';
	 */
	protected String getARGS_STARTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal ARG_SEP : ',';
	 */
	protected String getARG_SEPToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal ASSIGNMENT : ( "=" | ":" );
	 */
	protected String getASSIGNMENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal BLOCK_END : '}';
	 */
	protected String getBLOCK_ENDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "}";
	}
	
	/**
	 * terminal BLOCK_START : '{';
	 */
	protected String getBLOCK_STARTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "{";
	}
	
	/**
	 * terminal BREAKONNOLOCK_DEF : "breakOnNoLock";
	 */
	protected String getBREAKONNOLOCK_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "breakOnNoLock";
	}
	
	/**
	 * terminal BREAK_DEF : "break";
	 */
	protected String getBREAK_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "break";
	}
	
	/**
	 * terminal CARDINALITY_DEF : "cardinality";
	 */
	protected String getCARDINALITY_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "cardinality";
	}
	
	/**
	 * terminal CHECK_DEF : "check";
	 */
	protected String getCHECK_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "check";
	}
	
	/**
	 * terminal CODE_DEF : 'code';
	 */
	protected String getCODE_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "code";
	}
	
	/**
	 * terminal DEFINE_DEF : 'define';
	 */
	protected String getDEFINE_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "define";
	}
	
	/**
	 * terminal DESCRIPTION_DEF : "description";
	 */
	protected String getDESCRIPTION_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "description";
	}
	
	/**
	 * terminal DIRECTION_DEF : "direction";
	 */
	protected String getDIRECTION_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "direction";
	}
	
	/**
	 * terminal ELSE: 'else';
	 */
	protected String getELSEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "else";
	}
	
	/**
	 * terminal EOL : ';';
	 */
	protected String getEOLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	/**
	 * terminal ERROR_DEF : "error";
	 */
	protected String getERROR_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "error";
	}
	
	/**
	 * terminal FILTER_DEF : 'filter';
	 */
	protected String getFILTER_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "filter";
	}
	
	/**
	 * terminal FINALLY_DEF : 'finally';
	 */
	protected String getFINALLY_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "finally";
	}
	
	/**
	 * terminal IF: 'if';
	 */
	protected String getIFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "if";
	}
	
	/**
	 * terminal INCLUDE_DEF : 'include';
	 */
	protected String getINCLUDE_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "include";
	}
	
	/**
	 * terminal KEY_DEF : "key";
	 */
	protected String getKEY_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "key";
	}
	
	/**
	 * terminal LENGTH_DEF : "length";
	 */
	protected String getLENGTH_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "length";
	}
	
	/**
	 * terminal LOG_DEF : 'log';
	 */
	protected String getLOG_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "log";
	}
	
	/**
	 * terminal LOOP_DEF : 'loop';
	 */
	protected String getLOOP_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "loop";
	}
	
	/**
	 * terminal MAP_DEF : "map.";
	 */
	protected String getMAP_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "map.";
	}
	
	/**
	 * terminal MAP_OLDSKOOL_DEF : "map";
	 */
	protected String getMAP_OLDSKOOL_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "map";
	}
	
	/**
	 * terminal MESSAGE_DEF : 'message';
	 */
	protected String getMESSAGE_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "message";
	}
	
	/**
	 * terminal METHODS_DEF : 'methods';
	 */
	protected String getMETHODS_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "methods";
	}
	
	/**
	 * terminal MODE_DEF : "mode";
	 */
	protected String getMODE_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "mode";
	}
	
	/**
	 * terminal OBJECT_OLDSKOOL_DEF : "object";
	 */
	protected String getOBJECT_OLDSKOOL_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "object";
	}
	
	/**
	 * terminal OPTION_DEF : "option";
	 */
	protected String getOPTION_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "option";
	}
	
	/**
	 * terminal PRINT_DEF : 'print';
	 */
	protected String getPRINT_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "print";
	}
	
	/**
	 * terminal PROPERTY_DEF : 'property';
	 */
	protected String getPROPERTY_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "property";
	}
	
	/**
	 * SContext : CONTEXT_DEF ASSIGNMENT SContextType;
	 */
	protected String getSContextToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "context = user";
	}
	
	/**
	 * terminal SUBTYPE_DEF : "subtype";
	 */
	protected String getSUBTYPE_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "subtype";
	}
	
	/**
	 * terminal SYNCHRONIZED_DEF : 'synchronized';
	 */
	protected String getSYNCHRONIZED_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "synchronized";
	}
	
	/**
	 * terminal THEN: 'then';
	 */
	protected String getTHENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "then";
	}
	
	/**
	 * terminal TIMEOUT_DEF : "timeout";
	 */
	protected String getTIMEOUT_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "timeout";
	}
	
	/**
	 * terminal TML_END : ']';
	 */
	protected String getTML_ENDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "]";
	}
	
	/**
	 * terminal TML_START : '[';
	 */
	protected String getTML_STARTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[";
	}
	
	/**
	 * terminal TYPE_DEF : "type";
	 */
	protected String getTYPE_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "type";
	}
	
	/**
	 * terminal VALIDATIONS_DEF : 'validations';
	 */
	protected String getVALIDATIONS_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "validations";
	}
	
	/**
	 * terminal VAR_DEF : "var";
	 */
	protected String getVAR_DEFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "var";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Break___ARGS_STARTTerminalRuleCall_2_0_ARGS_ENDTerminalRuleCall_2_2__q.equals(syntax))
				emit_Break___ARGS_STARTTerminalRuleCall_2_0_ARGS_ENDTerminalRuleCall_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Map___ARGS_STARTTerminalRuleCall_1_0_2_0_ARGS_ENDTerminalRuleCall_1_0_2_2__q.equals(syntax))
				emit_Map___ARGS_STARTTerminalRuleCall_1_0_2_0_ARGS_ENDTerminalRuleCall_1_0_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MappableIdentifier___ARGS_STARTTerminalRuleCall_2_0_ARGS_ENDTerminalRuleCall_2_2__q.equals(syntax))
				emit_MappableIdentifier___ARGS_STARTTerminalRuleCall_2_0_ARGS_ENDTerminalRuleCall_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_EOLTerminalRuleCall_4_1_or___BLOCK_STARTTerminalRuleCall_4_0_0_BLOCK_ENDTerminalRuleCall_4_0_2__.equals(syntax))
				emit_Message_EOLTerminalRuleCall_4_1_or___BLOCK_STARTTerminalRuleCall_4_0_0_BLOCK_ENDTerminalRuleCall_4_0_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SBreakOnNoLock_STimeout___BREAKONNOLOCK_DEFTerminalRuleCall_0_ASSIGNMENTTerminalRuleCall_1___or___TIMEOUT_DEFTerminalRuleCall_0_ASSIGNMENTTerminalRuleCall_1__.equals(syntax))
				emit_SBreakOnNoLock_STimeout___BREAKONNOLOCK_DEFTerminalRuleCall_0_ASSIGNMENTTerminalRuleCall_1___or___TIMEOUT_DEFTerminalRuleCall_0_ASSIGNMENTTerminalRuleCall_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Var___BLOCK_STARTTerminalRuleCall_4_2_0_BLOCK_ENDTerminalRuleCall_4_2_2___or___TML_STARTTerminalRuleCall_4_1_0_TML_ENDTerminalRuleCall_4_1_2__.equals(syntax))
				emit_Var___BLOCK_STARTTerminalRuleCall_4_2_0_BLOCK_ENDTerminalRuleCall_4_2_2___or___TML_STARTTerminalRuleCall_4_1_0_TML_ENDTerminalRuleCall_4_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (ARGS_START ARGS_END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) BREAK_DEF (ambiguity) EOL (rule start)
	 */
	protected void emit_Break___ARGS_STARTTerminalRuleCall_2_0_ARGS_ENDTerminalRuleCall_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ARGS_START ARGS_END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     adapterName=IDENTIFIER (ambiguity) BLOCK_START BLOCK_END (rule end)
	 *     adapterName=IDENTIFIER (ambiguity) BLOCK_START statements+=InnerBody
	 */
	protected void emit_Map___ARGS_STARTTerminalRuleCall_1_0_2_0_ARGS_ENDTerminalRuleCall_1_0_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ARGS_START ARGS_END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     field=MAPPABLE_IDENTIFIER (ambiguity) (rule end)
	 */
	protected void emit_MappableIdentifier___ARGS_STARTTerminalRuleCall_2_0_ARGS_ENDTerminalRuleCall_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (BLOCK_START BLOCK_END) | EOL
	 *
	 * This ambiguous syntax occurs at:
	 *     arguments=MessageArguments ARGS_END (ambiguity) (rule end)
	 *     messageName=QUOTED_IDENTIFIER (ambiguity) (rule end)
	 */
	protected void emit_Message_EOLTerminalRuleCall_4_1_or___BLOCK_STARTTerminalRuleCall_4_0_0_BLOCK_ENDTerminalRuleCall_4_0_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (TIMEOUT_DEF ASSIGNMENT) | (BREAKONNOLOCK_DEF ASSIGNMENT)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' expression=Atomic
	 *     (rule start) (ambiguity) '-' expression=Atomic
	 *     (rule start) (ambiguity) ARGS_START value=Expression
	 *     (rule start) (ambiguity) hasExists?='?'
	 *     (rule start) (ambiguity) value=FALSE
	 *     (rule start) (ambiguity) value=ForAllIdentifier
	 *     (rule start) (ambiguity) value=FunctionIdentifier
	 *     (rule start) (ambiguity) value=INTEGER
	 *     (rule start) (ambiguity) value=MappableIdentifier
	 *     (rule start) (ambiguity) value=NULL_DEF
	 *     (rule start) (ambiguity) value=STRING_LITERAL
	 *     (rule start) (ambiguity) value=TRUE
	 *     (rule start) (ambiguity) value=TmlIdentifier
	 *     (rule start) (ambiguity) {AndOrExpression.left=}
	 *     (rule start) (ambiguity) {Comparison.left=}
	 *     (rule start) (ambiguity) {Equals.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {MultiOrDiv.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 */
	protected void emit_SBreakOnNoLock_STimeout___BREAKONNOLOCK_DEFTerminalRuleCall_0_ASSIGNMENTTerminalRuleCall_1___or___TIMEOUT_DEFTerminalRuleCall_0_ASSIGNMENTTerminalRuleCall_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (TML_START TML_END) | (BLOCK_START BLOCK_END)
	 *
	 * This ambiguous syntax occurs at:
	 *     arguments=VarArguments (ambiguity) (rule end)
	 *     varName=IDENTIFIER (ambiguity) (rule end)
	 */
	protected void emit_Var___BLOCK_STARTTerminalRuleCall_4_2_0_BLOCK_ENDTerminalRuleCall_4_2_2___or___TML_STARTTerminalRuleCall_4_1_0_TML_ENDTerminalRuleCall_4_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
