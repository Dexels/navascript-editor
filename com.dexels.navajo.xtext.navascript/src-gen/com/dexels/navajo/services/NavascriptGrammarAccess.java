/*
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NavascriptGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class NavascriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Navascript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNavascriptAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValidationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValidationsValidationsParserRuleCall_1_0 = (RuleCall)cValidationsAssignment_1.eContents().get(0);
		private final Assignment cToplevelStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToplevelStatementsTopLevelStatementsParserRuleCall_2_0 = (RuleCall)cToplevelStatementsAssignment_2.eContents().get(0);
		private final Assignment cFinallyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFinallyFinallyParserRuleCall_3_0 = (RuleCall)cFinallyAssignment_3.eContents().get(0);
		
		//Navascript:
		//	{Navascript} validations=Validations? toplevelStatements=TopLevelStatements finally=Finally?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Navascript} validations=Validations? toplevelStatements=TopLevelStatements finally=Finally?
		public Group getGroup() { return cGroup; }
		
		//{Navascript}
		public Action getNavascriptAction_0() { return cNavascriptAction_0; }
		
		//validations=Validations?
		public Assignment getValidationsAssignment_1() { return cValidationsAssignment_1; }
		
		//Validations
		public RuleCall getValidationsValidationsParserRuleCall_1_0() { return cValidationsValidationsParserRuleCall_1_0; }
		
		//toplevelStatements=TopLevelStatements
		public Assignment getToplevelStatementsAssignment_2() { return cToplevelStatementsAssignment_2; }
		
		//TopLevelStatements
		public RuleCall getToplevelStatementsTopLevelStatementsParserRuleCall_2_0() { return cToplevelStatementsTopLevelStatementsParserRuleCall_2_0; }
		
		//finally=Finally?
		public Assignment getFinallyAssignment_3() { return cFinallyAssignment_3; }
		
		//Finally
		public RuleCall getFinallyFinallyParserRuleCall_3_0() { return cFinallyFinallyParserRuleCall_3_0; }
	}
	public class TopLevelStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.TopLevelStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTopLevelStatementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsTopLevelStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//// TopLevelStatement ::= Include | Message | Var | Break | Map | AntiMessage | Define | ConditionalEmptyMessage | Synchronized | Print | Log | Loop | Methods
		//TopLevelStatements:
		//	{TopLevelStatements} statements+=TopLevelStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TopLevelStatements} statements+=TopLevelStatement*
		public Group getGroup() { return cGroup; }
		
		//{TopLevelStatements}
		public Action getTopLevelStatementsAction_0() { return cTopLevelStatementsAction_0; }
		
		//statements+=TopLevelStatement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//TopLevelStatement
		public RuleCall getStatementsTopLevelStatementParserRuleCall_1_0() { return cStatementsTopLevelStatementParserRuleCall_1_0; }
	}
	public class TopLevelStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.TopLevelStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTopLevelStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cThenKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cStatementAlternatives_2_0 = (Alternatives)cStatementAssignment_2.eContents().get(0);
		private final RuleCall cStatementMessageParserRuleCall_2_0_0 = (RuleCall)cStatementAlternatives_2_0.eContents().get(0);
		private final RuleCall cStatementVarParserRuleCall_2_0_1 = (RuleCall)cStatementAlternatives_2_0.eContents().get(1);
		private final RuleCall cStatementMapParserRuleCall_2_0_2 = (RuleCall)cStatementAlternatives_2_0.eContents().get(2);
		private final RuleCall cStatementAntiMessageParserRuleCall_2_0_3 = (RuleCall)cStatementAlternatives_2_0.eContents().get(3);
		private final RuleCall cStatementDefineParserRuleCall_2_0_4 = (RuleCall)cStatementAlternatives_2_0.eContents().get(4);
		private final RuleCall cStatementPrintParserRuleCall_2_0_5 = (RuleCall)cStatementAlternatives_2_0.eContents().get(5);
		private final RuleCall cStatementLogParserRuleCall_2_0_6 = (RuleCall)cStatementAlternatives_2_0.eContents().get(6);
		private final RuleCall cStatementLoopParserRuleCall_2_0_7 = (RuleCall)cStatementAlternatives_2_0.eContents().get(7);
		private final RuleCall cStatementMethodsParserRuleCall_2_0_8 = (RuleCall)cStatementAlternatives_2_0.eContents().get(8);
		private final RuleCall cStatementIncludeParserRuleCall_2_0_9 = (RuleCall)cStatementAlternatives_2_0.eContents().get(9);
		private final RuleCall cStatementBreakParserRuleCall_2_0_10 = (RuleCall)cStatementAlternatives_2_0.eContents().get(10);
		private final RuleCall cStatementSynchronizedParserRuleCall_2_0_11 = (RuleCall)cStatementAlternatives_2_0.eContents().get(11);
		private final RuleCall cStatementBlockStatementsParserRuleCall_2_0_12 = (RuleCall)cStatementAlternatives_2_0.eContents().get(12);
		
		//TopLevelStatement:
		//	{TopLevelStatement} ('if' condition=Expression 'then')?
		//	statement=(Message | Var | Map | AntiMessage | Define | Print | Log | Loop | Methods | Include | Break |
		//	Synchronized | BlockStatements);
		@Override public ParserRule getRule() { return rule; }
		
		//{TopLevelStatement} ('if' condition=Expression 'then')?
		//statement=(Message | Var | Map | AntiMessage | Define | Print | Log | Loop | Methods | Include | Break | Synchronized |
		//BlockStatements)
		public Group getGroup() { return cGroup; }
		
		//{TopLevelStatement}
		public Action getTopLevelStatementAction_0() { return cTopLevelStatementAction_0; }
		
		//('if' condition=Expression 'then')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'if'
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_1_0() { return cConditionExpressionParserRuleCall_1_1_0; }
		
		//'then'
		public Keyword getThenKeyword_1_2() { return cThenKeyword_1_2; }
		
		//statement=(Message | Var | Map | AntiMessage | Define | Print | Log | Loop | Methods | Include | Break | Synchronized |
		//BlockStatements)
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//(Message | Var | Map | AntiMessage | Define | Print | Log | Loop | Methods | Include | Break | Synchronized |
		//BlockStatements)
		public Alternatives getStatementAlternatives_2_0() { return cStatementAlternatives_2_0; }
		
		//Message
		public RuleCall getStatementMessageParserRuleCall_2_0_0() { return cStatementMessageParserRuleCall_2_0_0; }
		
		//Var
		public RuleCall getStatementVarParserRuleCall_2_0_1() { return cStatementVarParserRuleCall_2_0_1; }
		
		//Map
		public RuleCall getStatementMapParserRuleCall_2_0_2() { return cStatementMapParserRuleCall_2_0_2; }
		
		//AntiMessage
		public RuleCall getStatementAntiMessageParserRuleCall_2_0_3() { return cStatementAntiMessageParserRuleCall_2_0_3; }
		
		//Define
		public RuleCall getStatementDefineParserRuleCall_2_0_4() { return cStatementDefineParserRuleCall_2_0_4; }
		
		//Print
		public RuleCall getStatementPrintParserRuleCall_2_0_5() { return cStatementPrintParserRuleCall_2_0_5; }
		
		//Log
		public RuleCall getStatementLogParserRuleCall_2_0_6() { return cStatementLogParserRuleCall_2_0_6; }
		
		//Loop
		public RuleCall getStatementLoopParserRuleCall_2_0_7() { return cStatementLoopParserRuleCall_2_0_7; }
		
		//Methods
		public RuleCall getStatementMethodsParserRuleCall_2_0_8() { return cStatementMethodsParserRuleCall_2_0_8; }
		
		//Include
		public RuleCall getStatementIncludeParserRuleCall_2_0_9() { return cStatementIncludeParserRuleCall_2_0_9; }
		
		//Break
		public RuleCall getStatementBreakParserRuleCall_2_0_10() { return cStatementBreakParserRuleCall_2_0_10; }
		
		//Synchronized
		public RuleCall getStatementSynchronizedParserRuleCall_2_0_11() { return cStatementSynchronizedParserRuleCall_2_0_11; }
		
		//BlockStatements
		public RuleCall getStatementBlockStatementsParserRuleCall_2_0_12() { return cStatementBlockStatementsParserRuleCall_2_0_12; }
	}
	public class InnerBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.InnerBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInnerBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cThenKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cStatementAlternatives_2_0 = (Alternatives)cStatementAssignment_2.eContents().get(0);
		private final RuleCall cStatementPropertyParserRuleCall_2_0_0 = (RuleCall)cStatementAlternatives_2_0.eContents().get(0);
		private final RuleCall cStatementOptionParserRuleCall_2_0_1 = (RuleCall)cStatementAlternatives_2_0.eContents().get(1);
		private final RuleCall cStatementMethodOrSetterParserRuleCall_2_0_2 = (RuleCall)cStatementAlternatives_2_0.eContents().get(2);
		private final RuleCall cStatementMessageParserRuleCall_2_0_3 = (RuleCall)cStatementAlternatives_2_0.eContents().get(3);
		private final RuleCall cStatementAntiMessageParserRuleCall_2_0_4 = (RuleCall)cStatementAlternatives_2_0.eContents().get(4);
		private final RuleCall cStatementIncludeParserRuleCall_2_0_5 = (RuleCall)cStatementAlternatives_2_0.eContents().get(5);
		private final RuleCall cStatementMethodsParserRuleCall_2_0_6 = (RuleCall)cStatementAlternatives_2_0.eContents().get(6);
		private final RuleCall cStatementVarParserRuleCall_2_0_7 = (RuleCall)cStatementAlternatives_2_0.eContents().get(7);
		private final RuleCall cStatementPrintParserRuleCall_2_0_8 = (RuleCall)cStatementAlternatives_2_0.eContents().get(8);
		private final RuleCall cStatementLogParserRuleCall_2_0_9 = (RuleCall)cStatementAlternatives_2_0.eContents().get(9);
		private final RuleCall cStatementDefineParserRuleCall_2_0_10 = (RuleCall)cStatementAlternatives_2_0.eContents().get(10);
		private final RuleCall cStatementLoopParserRuleCall_2_0_11 = (RuleCall)cStatementAlternatives_2_0.eContents().get(11);
		private final RuleCall cStatementMapParserRuleCall_2_0_12 = (RuleCall)cStatementAlternatives_2_0.eContents().get(12);
		private final RuleCall cStatementBreakParserRuleCall_2_0_13 = (RuleCall)cStatementAlternatives_2_0.eContents().get(13);
		private final RuleCall cStatementBlockStatementsParserRuleCall_2_0_14 = (RuleCall)cStatementAlternatives_2_0.eContents().get(14);
		
		//InnerBody:
		//	{InnerBody} ('if' condition=Expression 'then')?
		//	statement=(Property | Option | MethodOrSetter | Message | AntiMessage | Include | Methods | Var | Print | Log |
		//	Define | Loop | Map | Break | BlockStatements);
		@Override public ParserRule getRule() { return rule; }
		
		//{InnerBody} ('if' condition=Expression 'then')?
		//statement=(Property | Option | MethodOrSetter | Message | AntiMessage | Include | Methods | Var | Print | Log | Define |
		//Loop | Map | Break | BlockStatements)
		public Group getGroup() { return cGroup; }
		
		//{InnerBody}
		public Action getInnerBodyAction_0() { return cInnerBodyAction_0; }
		
		//('if' condition=Expression 'then')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'if'
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_1_0() { return cConditionExpressionParserRuleCall_1_1_0; }
		
		//'then'
		public Keyword getThenKeyword_1_2() { return cThenKeyword_1_2; }
		
		//statement=(Property | Option | MethodOrSetter | Message | AntiMessage | Include | Methods | Var | Print | Log | Define |
		//Loop | Map | Break | BlockStatements)
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//(Property | Option | MethodOrSetter | Message | AntiMessage | Include | Methods | Var | Print | Log | Define | Loop |
		//Map | Break | BlockStatements)
		public Alternatives getStatementAlternatives_2_0() { return cStatementAlternatives_2_0; }
		
		//Property
		public RuleCall getStatementPropertyParserRuleCall_2_0_0() { return cStatementPropertyParserRuleCall_2_0_0; }
		
		//Option
		public RuleCall getStatementOptionParserRuleCall_2_0_1() { return cStatementOptionParserRuleCall_2_0_1; }
		
		//MethodOrSetter
		public RuleCall getStatementMethodOrSetterParserRuleCall_2_0_2() { return cStatementMethodOrSetterParserRuleCall_2_0_2; }
		
		//Message
		public RuleCall getStatementMessageParserRuleCall_2_0_3() { return cStatementMessageParserRuleCall_2_0_3; }
		
		//AntiMessage
		public RuleCall getStatementAntiMessageParserRuleCall_2_0_4() { return cStatementAntiMessageParserRuleCall_2_0_4; }
		
		//Include
		public RuleCall getStatementIncludeParserRuleCall_2_0_5() { return cStatementIncludeParserRuleCall_2_0_5; }
		
		//Methods
		public RuleCall getStatementMethodsParserRuleCall_2_0_6() { return cStatementMethodsParserRuleCall_2_0_6; }
		
		//Var
		public RuleCall getStatementVarParserRuleCall_2_0_7() { return cStatementVarParserRuleCall_2_0_7; }
		
		//Print
		public RuleCall getStatementPrintParserRuleCall_2_0_8() { return cStatementPrintParserRuleCall_2_0_8; }
		
		//Log
		public RuleCall getStatementLogParserRuleCall_2_0_9() { return cStatementLogParserRuleCall_2_0_9; }
		
		//Define
		public RuleCall getStatementDefineParserRuleCall_2_0_10() { return cStatementDefineParserRuleCall_2_0_10; }
		
		//Loop
		public RuleCall getStatementLoopParserRuleCall_2_0_11() { return cStatementLoopParserRuleCall_2_0_11; }
		
		//Map
		public RuleCall getStatementMapParserRuleCall_2_0_12() { return cStatementMapParserRuleCall_2_0_12; }
		
		//Break
		public RuleCall getStatementBreakParserRuleCall_2_0_13() { return cStatementBreakParserRuleCall_2_0_13; }
		
		//BlockStatements
		public RuleCall getStatementBlockStatementsParserRuleCall_2_0_14() { return cStatementBlockStatementsParserRuleCall_2_0_14; }
	}
	public class BlockStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.BlockStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockStatementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsInnerBodyParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///*
		// * if EXPRESSION THEN { [STATEMENTS }
		// */
		//BlockStatements:
		//	{BlockStatements} '{' statements+=InnerBody* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BlockStatements} '{' statements+=InnerBody* '}'
		public Group getGroup() { return cGroup; }
		
		//{BlockStatements}
		public Action getBlockStatementsAction_0() { return cBlockStatementsAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=InnerBody*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//InnerBody
		public RuleCall getStatementsInnerBodyParserRuleCall_2_0() { return cStatementsInnerBodyParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SynchronizedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Synchronized");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSYNCHRONIZED_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cARGS_STARTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsSynchronizedArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsTopLevelStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*
		// * synchronized() {
		// * 
		// * }
		// */
		//Synchronized:
		//	SYNCHRONIZED_DEF ARGS_START arguments=SynchronizedArguments ARGS_END '{' statements+=TopLevelStatement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//SYNCHRONIZED_DEF ARGS_START arguments=SynchronizedArguments ARGS_END '{' statements+=TopLevelStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//SYNCHRONIZED_DEF
		public RuleCall getSYNCHRONIZED_DEFTerminalRuleCall_0() { return cSYNCHRONIZED_DEFTerminalRuleCall_0; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_1() { return cARGS_STARTTerminalRuleCall_1; }
		
		//arguments=SynchronizedArguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//SynchronizedArguments
		public RuleCall getArgumentsSynchronizedArgumentsParserRuleCall_2_0() { return cArgumentsSynchronizedArgumentsParserRuleCall_2_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_3() { return cARGS_ENDTerminalRuleCall_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//statements+=TopLevelStatement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//TopLevelStatement
		public RuleCall getStatementsTopLevelStatementParserRuleCall_5_0() { return cStatementsTopLevelStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SynchronizedArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SynchronizedArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsSynchronizedArgumentParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cARG_SEPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsSynchronizedArgumentParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		
		//SynchronizedArguments:
		//	arguments+=SynchronizedArgument (ARG_SEP arguments+=SynchronizedArgument)*;
		@Override public ParserRule getRule() { return rule; }
		
		//arguments+=SynchronizedArgument (ARG_SEP arguments+=SynchronizedArgument)*
		public Group getGroup() { return cGroup; }
		
		//arguments+=SynchronizedArgument
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }
		
		//SynchronizedArgument
		public RuleCall getArgumentsSynchronizedArgumentParserRuleCall_0_0() { return cArgumentsSynchronizedArgumentParserRuleCall_0_0; }
		
		//(ARG_SEP arguments+=SynchronizedArgument)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_1_0() { return cARG_SEPTerminalRuleCall_1_0; }
		
		//arguments+=SynchronizedArgument
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }
		
		//SynchronizedArgument
		public RuleCall getArgumentsSynchronizedArgumentParserRuleCall_1_1_0() { return cArgumentsSynchronizedArgumentParserRuleCall_1_1_0; }
	}
	public class SynchronizedArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SynchronizedArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSynchronizedArgumentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cSContextParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cSKeyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTimeoutParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSBreakOnNoLockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SynchronizedArgument:
		//	{SynchronizedArgument} SContext | SKey | STimeout | SBreakOnNoLock;
		@Override public ParserRule getRule() { return rule; }
		
		//{SynchronizedArgument} SContext | SKey | STimeout | SBreakOnNoLock
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SynchronizedArgument} SContext
		public Group getGroup_0() { return cGroup_0; }
		
		//{SynchronizedArgument}
		public Action getSynchronizedArgumentAction_0_0() { return cSynchronizedArgumentAction_0_0; }
		
		//SContext
		public RuleCall getSContextParserRuleCall_0_1() { return cSContextParserRuleCall_0_1; }
		
		//SKey
		public RuleCall getSKeyParserRuleCall_1() { return cSKeyParserRuleCall_1; }
		
		//STimeout
		public RuleCall getSTimeoutParserRuleCall_2() { return cSTimeoutParserRuleCall_2; }
		
		//SBreakOnNoLock
		public RuleCall getSBreakOnNoLockParserRuleCall_3() { return cSBreakOnNoLockParserRuleCall_3; }
	}
	public class SContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCONTEXT_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cSContextTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SContext:
		//	CONTEXT_DEF ('=' | ':') SContextType;
		@Override public ParserRule getRule() { return rule; }
		
		//CONTEXT_DEF ('=' | ':') SContextType
		public Group getGroup() { return cGroup; }
		
		//CONTEXT_DEF
		public RuleCall getCONTEXT_DEFTerminalRuleCall_0() { return cCONTEXT_DEFTerminalRuleCall_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//SContextType
		public RuleCall getSContextTypeParserRuleCall_2() { return cSContextTypeParserRuleCall_2; }
	}
	public class SKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKEY_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLiteralOrExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SKey:
		//	KEY_DEF LiteralOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//KEY_DEF LiteralOrExpression
		public Group getGroup() { return cGroup; }
		
		//KEY_DEF
		public RuleCall getKEY_DEFTerminalRuleCall_0() { return cKEY_DEFTerminalRuleCall_0; }
		
		//LiteralOrExpression
		public RuleCall getLiteralOrExpressionParserRuleCall_1() { return cLiteralOrExpressionParserRuleCall_1; }
	}
	public class STimeoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.STimeout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTIMEOUT_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//STimeout:
		//	TIMEOUT_DEF ('=' | ':') Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//TIMEOUT_DEF ('=' | ':') Expression
		public Group getGroup() { return cGroup; }
		
		//TIMEOUT_DEF
		public RuleCall getTIMEOUT_DEFTerminalRuleCall_0() { return cTIMEOUT_DEFTerminalRuleCall_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
	}
	public class SBreakOnNoLockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SBreakOnNoLock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBREAKONNOLOCK_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SBreakOnNoLock:
		//	BREAKONNOLOCK_DEF ('=' | ':') Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//BREAKONNOLOCK_DEF ('=' | ':') Expression
		public Group getGroup() { return cGroup; }
		
		//BREAKONNOLOCK_DEF
		public RuleCall getBREAKONNOLOCK_DEFTerminalRuleCall_0() { return cBREAKONNOLOCK_DEFTerminalRuleCall_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
	}
	public class SContextTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SContextType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUserKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cServiceKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SContextType:
		//	"user" | "service";
		@Override public ParserRule getRule() { return rule; }
		
		//"user" | "service"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"user"
		public Keyword getUserKeyword_0() { return cUserKeyword_0; }
		
		//"service"
		public Keyword getServiceKeyword_1() { return cServiceKeyword_1; }
	}
	public class BreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Break");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBREAK_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cARGS_STARTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersBreakParametersParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///*
		// * break([code=VALUE,description=VALUE,error=VALUE])
		// */
		//Break:
		//	{Break} BREAK_DEF (ARGS_START parameters=BreakParameters? ARGS_END)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Break} BREAK_DEF (ARGS_START parameters=BreakParameters? ARGS_END)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Break}
		public Action getBreakAction_0() { return cBreakAction_0; }
		
		//BREAK_DEF
		public RuleCall getBREAK_DEFTerminalRuleCall_1() { return cBREAK_DEFTerminalRuleCall_1; }
		
		//(ARGS_START parameters=BreakParameters? ARGS_END)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_2_0() { return cARGS_STARTTerminalRuleCall_2_0; }
		
		//parameters=BreakParameters?
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//BreakParameters
		public RuleCall getParametersBreakParametersParserRuleCall_2_1_0() { return cParametersBreakParametersParserRuleCall_2_1_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_2_2() { return cARGS_ENDTerminalRuleCall_2_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class BreakParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.BreakParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCODE_DEFTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Assignment cCodeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCodeLiteralOrExpressionParserRuleCall_0_2_0 = (RuleCall)cCodeAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDESCRIPTION_DEFTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cDescriptionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDescriptionLiteralOrExpressionParserRuleCall_1_2_0 = (RuleCall)cDescriptionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cERROR_DEFTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cLiteralOrExpressionParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//BreakParameter:
		//	CODE_DEF ('=' | ':') code=LiteralOrExpression | DESCRIPTION_DEF ('=' | ':') description=LiteralOrExpression |
		//	ERROR_DEF ('=' | ':') LiteralOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//CODE_DEF ('=' | ':') code=LiteralOrExpression | DESCRIPTION_DEF ('=' | ':') description=LiteralOrExpression | ERROR_DEF
		//('=' | ':') LiteralOrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CODE_DEF ('=' | ':') code=LiteralOrExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//CODE_DEF
		public RuleCall getCODE_DEFTerminalRuleCall_0_0() { return cCODE_DEFTerminalRuleCall_0_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_0() { return cEqualsSignKeyword_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_1_1() { return cColonKeyword_0_1_1; }
		
		//code=LiteralOrExpression
		public Assignment getCodeAssignment_0_2() { return cCodeAssignment_0_2; }
		
		//LiteralOrExpression
		public RuleCall getCodeLiteralOrExpressionParserRuleCall_0_2_0() { return cCodeLiteralOrExpressionParserRuleCall_0_2_0; }
		
		//DESCRIPTION_DEF ('=' | ':') description=LiteralOrExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//DESCRIPTION_DEF
		public RuleCall getDESCRIPTION_DEFTerminalRuleCall_1_0() { return cDESCRIPTION_DEFTerminalRuleCall_1_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }
		
		//description=LiteralOrExpression
		public Assignment getDescriptionAssignment_1_2() { return cDescriptionAssignment_1_2; }
		
		//LiteralOrExpression
		public RuleCall getDescriptionLiteralOrExpressionParserRuleCall_1_2_0() { return cDescriptionLiteralOrExpressionParserRuleCall_1_2_0; }
		
		//ERROR_DEF ('=' | ':') LiteralOrExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//ERROR_DEF
		public RuleCall getERROR_DEFTerminalRuleCall_2_0() { return cERROR_DEFTerminalRuleCall_2_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1_0() { return cEqualsSignKeyword_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_1_1() { return cColonKeyword_2_1_1; }
		
		//LiteralOrExpression
		public RuleCall getLiteralOrExpressionParserRuleCall_2_2() { return cLiteralOrExpressionParserRuleCall_2_2; }
	}
	public class BreakParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.BreakParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersBreakParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cARG_SEPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersBreakParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//BreakParameters:
		//	parameters+=BreakParameter (ARG_SEP parameters+=BreakParameter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=BreakParameter (ARG_SEP parameters+=BreakParameter)*
		public Group getGroup() { return cGroup; }
		
		//parameters+=BreakParameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//BreakParameter
		public RuleCall getParametersBreakParameterParserRuleCall_0_0() { return cParametersBreakParameterParserRuleCall_0_0; }
		
		//(ARG_SEP parameters+=BreakParameter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_1_0() { return cARG_SEPTerminalRuleCall_1_0; }
		
		//parameters+=BreakParameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//BreakParameter
		public RuleCall getParametersBreakParameterParserRuleCall_1_1_0() { return cParametersBreakParameterParserRuleCall_1_1_0; }
	}
	public class ValidationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Validations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValidationsAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cVALIDATIONS_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChecksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChecksCheckParserRuleCall_3_0 = (RuleCall)cChecksAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Validations:
		//	{Validations} VALIDATIONS_DEF '{' checks+=Check* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Validations} VALIDATIONS_DEF '{' checks+=Check* '}'
		public Group getGroup() { return cGroup; }
		
		//{Validations}
		public Action getValidationsAction_0() { return cValidationsAction_0; }
		
		//VALIDATIONS_DEF
		public RuleCall getVALIDATIONS_DEFTerminalRuleCall_1() { return cVALIDATIONS_DEFTerminalRuleCall_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//checks+=Check*
		public Assignment getChecksAssignment_3() { return cChecksAssignment_3; }
		
		//Check
		public RuleCall getChecksCheckParserRuleCall_3_0() { return cChecksCheckParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefineAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cDEFINE_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cDefineKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefineKeyQUOTED_IDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cDefineKeyAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Define:
		//	{Define} DEFINE_DEF defineKey=QUOTED_IDENTIFIER ('=' | ':') expression=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Define} DEFINE_DEF defineKey=QUOTED_IDENTIFIER ('=' | ':') expression=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//{Define}
		public Action getDefineAction_0() { return cDefineAction_0; }
		
		//DEFINE_DEF
		public RuleCall getDEFINE_DEFTerminalRuleCall_1() { return cDEFINE_DEFTerminalRuleCall_1; }
		
		//defineKey=QUOTED_IDENTIFIER
		public Assignment getDefineKeyAssignment_2() { return cDefineKeyAssignment_2; }
		
		//QUOTED_IDENTIFIER
		public RuleCall getDefineKeyQUOTED_IDENTIFIERTerminalRuleCall_2_0() { return cDefineKeyQUOTED_IDENTIFIERTerminalRuleCall_2_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCheckAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cThenKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cCHECK_DEFTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cARGS_STARTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cCheckAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCheckAttributesCheckAttributeParserRuleCall_4_0 = (RuleCall)cCheckAttributesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cARG_SEPTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cCheckAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCheckAttributesCheckAttributeParserRuleCall_5_1_0 = (RuleCall)cCheckAttributesAssignment_5_1.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Assignment cExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExpressionExpressionParserRuleCall_8_0 = (RuleCall)cExpressionAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Check:
		//	{Check} ('if' condition=Expression 'then')? CHECK_DEF ARGS_START checkAttributes+=CheckAttribute (ARG_SEP
		//	checkAttributes+=CheckAttribute)? ARGS_END ('=' | ':') expression=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Check} ('if' condition=Expression 'then')? CHECK_DEF ARGS_START checkAttributes+=CheckAttribute (ARG_SEP
		//checkAttributes+=CheckAttribute)? ARGS_END ('=' | ':') expression=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//{Check}
		public Action getCheckAction_0() { return cCheckAction_0; }
		
		//('if' condition=Expression 'then')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'if'
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_1_0() { return cConditionExpressionParserRuleCall_1_1_0; }
		
		//'then'
		public Keyword getThenKeyword_1_2() { return cThenKeyword_1_2; }
		
		//CHECK_DEF
		public RuleCall getCHECK_DEFTerminalRuleCall_2() { return cCHECK_DEFTerminalRuleCall_2; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_3() { return cARGS_STARTTerminalRuleCall_3; }
		
		//checkAttributes+=CheckAttribute
		public Assignment getCheckAttributesAssignment_4() { return cCheckAttributesAssignment_4; }
		
		//CheckAttribute
		public RuleCall getCheckAttributesCheckAttributeParserRuleCall_4_0() { return cCheckAttributesCheckAttributeParserRuleCall_4_0; }
		
		//(ARG_SEP checkAttributes+=CheckAttribute)?
		public Group getGroup_5() { return cGroup_5; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_5_0() { return cARG_SEPTerminalRuleCall_5_0; }
		
		//checkAttributes+=CheckAttribute
		public Assignment getCheckAttributesAssignment_5_1() { return cCheckAttributesAssignment_5_1; }
		
		//CheckAttribute
		public RuleCall getCheckAttributesCheckAttributeParserRuleCall_5_1_0() { return cCheckAttributesCheckAttributeParserRuleCall_5_1_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_6() { return cARGS_ENDTerminalRuleCall_6; }
		
		//('=' | ':')
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_7_0() { return cEqualsSignKeyword_7_0; }
		
		//':'
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_8() { return cExpressionAssignment_8; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_8_0() { return cExpressionExpressionParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class CheckAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.CheckAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCheckAttributeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cCODE_DEFTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1_1_0 = (Keyword)cAlternatives_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_1_1 = (Keyword)cAlternatives_0_1_1.eContents().get(1);
		private final Assignment cValueAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cValueLiteralOrExpressionParserRuleCall_0_1_2_0 = (RuleCall)cValueAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDESCRIPTION_DEFTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueLiteralOrExpressionParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		//CheckAttribute:
		//	{CheckAttribute} (CODE_DEF ('=' | ':') value=LiteralOrExpression) | DESCRIPTION_DEF ('=' | ':')
		//	value=LiteralOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{CheckAttribute} (CODE_DEF ('=' | ':') value=LiteralOrExpression) | DESCRIPTION_DEF ('=' | ':') value=LiteralOrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CheckAttribute} (CODE_DEF ('=' | ':') value=LiteralOrExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//{CheckAttribute}
		public Action getCheckAttributeAction_0_0() { return cCheckAttributeAction_0_0; }
		
		//(CODE_DEF ('=' | ':') value=LiteralOrExpression)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//CODE_DEF
		public RuleCall getCODE_DEFTerminalRuleCall_0_1_0() { return cCODE_DEFTerminalRuleCall_0_1_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_1_0() { return cEqualsSignKeyword_0_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_1_1_1() { return cColonKeyword_0_1_1_1; }
		
		//value=LiteralOrExpression
		public Assignment getValueAssignment_0_1_2() { return cValueAssignment_0_1_2; }
		
		//LiteralOrExpression
		public RuleCall getValueLiteralOrExpressionParserRuleCall_0_1_2_0() { return cValueLiteralOrExpressionParserRuleCall_0_1_2_0; }
		
		//DESCRIPTION_DEF ('=' | ':') value=LiteralOrExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//DESCRIPTION_DEF
		public RuleCall getDESCRIPTION_DEFTerminalRuleCall_1_0() { return cDESCRIPTION_DEFTerminalRuleCall_1_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }
		
		//value=LiteralOrExpression
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//LiteralOrExpression
		public RuleCall getValueLiteralOrExpressionParserRuleCall_1_2_0() { return cValueLiteralOrExpressionParserRuleCall_1_2_0; }
	}
	public class LiteralOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.LiteralOrExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralOrExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLiteralAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cLiteralAlternatives_0_1_0 = (Alternatives)cLiteralAssignment_0_1.eContents().get(0);
		private final RuleCall cLiteralQUOTED_IDENTIFIERTerminalRuleCall_0_1_0_0 = (RuleCall)cLiteralAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cLiteralSTRING_CONSTANTTerminalRuleCall_0_1_0_1 = (RuleCall)cLiteralAlternatives_0_1_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//LiteralOrExpression:
		//	{LiteralOrExpression} literal=(QUOTED_IDENTIFIER | STRING_CONSTANT) | expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{LiteralOrExpression} literal=(QUOTED_IDENTIFIER | STRING_CONSTANT) | expression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{LiteralOrExpression} literal=(QUOTED_IDENTIFIER | STRING_CONSTANT)
		public Group getGroup_0() { return cGroup_0; }
		
		//{LiteralOrExpression}
		public Action getLiteralOrExpressionAction_0_0() { return cLiteralOrExpressionAction_0_0; }
		
		//literal=(QUOTED_IDENTIFIER | STRING_CONSTANT)
		public Assignment getLiteralAssignment_0_1() { return cLiteralAssignment_0_1; }
		
		//(QUOTED_IDENTIFIER | STRING_CONSTANT)
		public Alternatives getLiteralAlternatives_0_1_0() { return cLiteralAlternatives_0_1_0; }
		
		//QUOTED_IDENTIFIER
		public RuleCall getLiteralQUOTED_IDENTIFIERTerminalRuleCall_0_1_0_0() { return cLiteralQUOTED_IDENTIFIERTerminalRuleCall_0_1_0_0; }
		
		//STRING_CONSTANT
		public RuleCall getLiteralSTRING_CONSTANTTerminalRuleCall_0_1_0_1() { return cLiteralSTRING_CONSTANTTerminalRuleCall_0_1_0_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPRINT_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cARGS_STARTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Print:
		//	{Print} PRINT_DEF ARGS_START expression=Expression ARGS_END ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Print} PRINT_DEF ARGS_START expression=Expression ARGS_END ';'
		public Group getGroup() { return cGroup; }
		
		//{Print}
		public Action getPrintAction_0() { return cPrintAction_0; }
		
		//PRINT_DEF
		public RuleCall getPRINT_DEFTerminalRuleCall_1() { return cPRINT_DEFTerminalRuleCall_1; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_2() { return cARGS_STARTTerminalRuleCall_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_4() { return cARGS_ENDTerminalRuleCall_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class LogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Log");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLOG_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cARGS_STARTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Log:
		//	{Log} LOG_DEF ARGS_START expression=Expression ARGS_END ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Log} LOG_DEF ARGS_START expression=Expression ARGS_END ';'
		public Group getGroup() { return cGroup; }
		
		//{Log}
		public Action getLogAction_0() { return cLogAction_0; }
		
		//LOG_DEF
		public RuleCall getLOG_DEFTerminalRuleCall_1() { return cLOG_DEFTerminalRuleCall_1; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_2() { return cARGS_STARTTerminalRuleCall_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_4() { return cARGS_ENDTerminalRuleCall_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class FinallyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Finally");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFinallyAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cFINALLY_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFinallyStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFinallyStatementsTopLevelStatementsParserRuleCall_3_0 = (RuleCall)cFinallyStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Finally:
		//	{Finally} FINALLY_DEF '{' finallyStatements=TopLevelStatements '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Finally} FINALLY_DEF '{' finallyStatements=TopLevelStatements '}'
		public Group getGroup() { return cGroup; }
		
		//{Finally}
		public Action getFinallyAction_0() { return cFinallyAction_0; }
		
		//FINALLY_DEF
		public RuleCall getFINALLY_DEFTerminalRuleCall_1() { return cFINALLY_DEFTerminalRuleCall_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//finallyStatements=TopLevelStatements
		public Assignment getFinallyStatementsAssignment_3() { return cFinallyStatementsAssignment_3; }
		
		//TopLevelStatements
		public RuleCall getFinallyStatementsTopLevelStatementsParserRuleCall_3_0() { return cFinallyStatementsTopLevelStatementsParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MethodsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Methods");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodsAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cMETHODS_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodsMethodParserRuleCall_3_0 = (RuleCall)cMethodsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Methods:
		//	{Methods} METHODS_DEF '{' methods+=Method* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Methods} METHODS_DEF '{' methods+=Method* '}'
		public Group getGroup() { return cGroup; }
		
		//{Methods}
		public Action getMethodsAction_0() { return cMethodsAction_0; }
		
		//METHODS_DEF
		public RuleCall getMETHODS_DEFTerminalRuleCall_1() { return cMETHODS_DEFTerminalRuleCall_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//methods+=Method*
		public Assignment getMethodsAssignment_3() { return cMethodsAssignment_3; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_3_0() { return cMethodsMethodParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMethodNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodNameQUOTED_IDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cMethodNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Method:
		//	{Method} methodName=QUOTED_IDENTIFIER ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Method} methodName=QUOTED_IDENTIFIER ';'
		public Group getGroup() { return cGroup; }
		
		//{Method}
		public Action getMethodAction_0() { return cMethodAction_0; }
		
		//methodName=QUOTED_IDENTIFIER
		public Assignment getMethodNameAssignment_1() { return cMethodNameAssignment_1; }
		
		//QUOTED_IDENTIFIER
		public RuleCall getMethodNameQUOTED_IDENTIFIERTerminalRuleCall_1_0() { return cMethodNameQUOTED_IDENTIFIERTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLOOP_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cMappableAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cMappableMappableIdentifierParserRuleCall_2_0_0 = (RuleCall)cMappableAssignment_2_0.eContents().get(0);
		private final Assignment cTmlAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTmlTmlIdentifierParserRuleCall_2_1_0 = (RuleCall)cTmlAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cARGS_STARTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cFILTER_DEFTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3_2_0 = (Keyword)cAlternatives_3_2.eContents().get(0);
		private final Keyword cColonKeyword_3_2_1 = (Keyword)cAlternatives_3_2.eContents().get(1);
		private final Assignment cFilterAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cFilterExpressionParserRuleCall_3_3_0 = (RuleCall)cFilterAssignment_3_3.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_3_4 = (RuleCall)cGroup_3.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsInnerBodyParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Loop:
		//	{Loop} LOOP_DEF (mappable=MappableIdentifier | tml=TmlIdentifier) (ARGS_START FILTER_DEF ('=' | ':')
		//	filter=Expression ARGS_END)? '{' statements+=InnerBody* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Loop} LOOP_DEF (mappable=MappableIdentifier | tml=TmlIdentifier) (ARGS_START FILTER_DEF ('=' | ':') filter=Expression
		//ARGS_END)? '{' statements+=InnerBody* '}'
		public Group getGroup() { return cGroup; }
		
		//{Loop}
		public Action getLoopAction_0() { return cLoopAction_0; }
		
		//LOOP_DEF
		public RuleCall getLOOP_DEFTerminalRuleCall_1() { return cLOOP_DEFTerminalRuleCall_1; }
		
		//(mappable=MappableIdentifier | tml=TmlIdentifier)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//mappable=MappableIdentifier
		public Assignment getMappableAssignment_2_0() { return cMappableAssignment_2_0; }
		
		//MappableIdentifier
		public RuleCall getMappableMappableIdentifierParserRuleCall_2_0_0() { return cMappableMappableIdentifierParserRuleCall_2_0_0; }
		
		//tml=TmlIdentifier
		public Assignment getTmlAssignment_2_1() { return cTmlAssignment_2_1; }
		
		//TmlIdentifier
		public RuleCall getTmlTmlIdentifierParserRuleCall_2_1_0() { return cTmlTmlIdentifierParserRuleCall_2_1_0; }
		
		//(ARGS_START FILTER_DEF ('=' | ':') filter=Expression ARGS_END)?
		public Group getGroup_3() { return cGroup_3; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_3_0() { return cARGS_STARTTerminalRuleCall_3_0; }
		
		//FILTER_DEF
		public RuleCall getFILTER_DEFTerminalRuleCall_3_1() { return cFILTER_DEFTerminalRuleCall_3_1; }
		
		//('=' | ':')
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_2_0() { return cEqualsSignKeyword_3_2_0; }
		
		//':'
		public Keyword getColonKeyword_3_2_1() { return cColonKeyword_3_2_1; }
		
		//filter=Expression
		public Assignment getFilterAssignment_3_3() { return cFilterAssignment_3_3; }
		
		//Expression
		public RuleCall getFilterExpressionParserRuleCall_3_3_0() { return cFilterExpressionParserRuleCall_3_3_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_3_4() { return cARGS_ENDTerminalRuleCall_3_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//statements+=InnerBody*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//InnerBody
		public RuleCall getStatementsInnerBodyParserRuleCall_5_0() { return cStatementsInnerBodyParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIncludeAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cINCLUDE_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cScriptNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScriptNameQUOTED_IDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cScriptNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Include:
		//	{Include} INCLUDE_DEF scriptName=QUOTED_IDENTIFIER ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Include} INCLUDE_DEF scriptName=QUOTED_IDENTIFIER ';'
		public Group getGroup() { return cGroup; }
		
		//{Include}
		public Action getIncludeAction_0() { return cIncludeAction_0; }
		
		//INCLUDE_DEF
		public RuleCall getINCLUDE_DEFTerminalRuleCall_1() { return cINCLUDE_DEFTerminalRuleCall_1; }
		
		//scriptName=QUOTED_IDENTIFIER
		public Assignment getScriptNameAssignment_2() { return cScriptNameAssignment_2; }
		
		//QUOTED_IDENTIFIER
		public RuleCall getScriptNameQUOTED_IDENTIFIERTerminalRuleCall_2_0() { return cScriptNameQUOTED_IDENTIFIERTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AntiMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.AntiMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAntiMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cANTIMESSAGE_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMessageNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageNameQUOTED_IDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cMessageNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AntiMessage:
		//	{AntiMessage} ANTIMESSAGE_DEF messageName=QUOTED_IDENTIFIER ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{AntiMessage} ANTIMESSAGE_DEF messageName=QUOTED_IDENTIFIER ';'
		public Group getGroup() { return cGroup; }
		
		//{AntiMessage}
		public Action getAntiMessageAction_0() { return cAntiMessageAction_0; }
		
		//ANTIMESSAGE_DEF
		public RuleCall getANTIMESSAGE_DEFTerminalRuleCall_1() { return cANTIMESSAGE_DEFTerminalRuleCall_1; }
		
		//messageName=QUOTED_IDENTIFIER
		public Assignment getMessageNameAssignment_2() { return cMessageNameAssignment_2; }
		
		//QUOTED_IDENTIFIER
		public RuleCall getMessageNameQUOTED_IDENTIFIERTerminalRuleCall_2_0() { return cMessageNameQUOTED_IDENTIFIERTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cMESSAGE_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMessageNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageNameQUOTED_IDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cMessageNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cARGS_STARTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsMessageArgumentsParserRuleCall_3_1_0 = (RuleCall)cArgumentsAssignment_3_1.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Assignment cStatementsAssignment_4_0_1_0 = (Assignment)cAlternatives_4_0_1.eContents().get(0);
		private final RuleCall cStatementsInnerBodyParserRuleCall_4_0_1_0_0 = (RuleCall)cStatementsAssignment_4_0_1_0.eContents().get(0);
		private final Assignment cArrayFieldAssignment_4_0_1_1 = (Assignment)cAlternatives_4_0_1.eContents().get(1);
		private final RuleCall cArrayFieldMappedArrayFieldParserRuleCall_4_0_1_1_0 = (RuleCall)cArrayFieldAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cArrayMessageAssignment_4_0_1_2 = (Assignment)cAlternatives_4_0_1.eContents().get(2);
		private final RuleCall cArrayMessageMappedArrayMessageParserRuleCall_4_0_1_2_0 = (RuleCall)cArrayMessageAssignment_4_0_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cMessageArrayAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cMessageArrayMessageArrayParserRuleCall_4_2_1_0 = (RuleCall)cMessageArrayAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2_2 = (Keyword)cGroup_4_2.eContents().get(2);
		
		//Message:
		//	{Message} MESSAGE_DEF messageName=QUOTED_IDENTIFIER (ARGS_START arguments=MessageArguments ARGS_END)? ('{'
		//	(statements+=InnerBody* | arrayField=MappedArrayField | arrayMessage=MappedArrayMessage) '}' | ';'
		//	| '[' messageArray=MessageArray ']');
		@Override public ParserRule getRule() { return rule; }
		
		//{Message} MESSAGE_DEF messageName=QUOTED_IDENTIFIER (ARGS_START arguments=MessageArguments ARGS_END)? ('{'
		//(statements+=InnerBody* | arrayField=MappedArrayField | arrayMessage=MappedArrayMessage) '}' | ';'
		//| '[' messageArray=MessageArray ']')
		public Group getGroup() { return cGroup; }
		
		//{Message}
		public Action getMessageAction_0() { return cMessageAction_0; }
		
		//MESSAGE_DEF
		public RuleCall getMESSAGE_DEFTerminalRuleCall_1() { return cMESSAGE_DEFTerminalRuleCall_1; }
		
		//messageName=QUOTED_IDENTIFIER
		public Assignment getMessageNameAssignment_2() { return cMessageNameAssignment_2; }
		
		//QUOTED_IDENTIFIER
		public RuleCall getMessageNameQUOTED_IDENTIFIERTerminalRuleCall_2_0() { return cMessageNameQUOTED_IDENTIFIERTerminalRuleCall_2_0; }
		
		//(ARGS_START arguments=MessageArguments ARGS_END)?
		public Group getGroup_3() { return cGroup_3; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_3_0() { return cARGS_STARTTerminalRuleCall_3_0; }
		
		//arguments=MessageArguments
		public Assignment getArgumentsAssignment_3_1() { return cArgumentsAssignment_3_1; }
		
		//MessageArguments
		public RuleCall getArgumentsMessageArgumentsParserRuleCall_3_1_0() { return cArgumentsMessageArgumentsParserRuleCall_3_1_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_3_2() { return cARGS_ENDTerminalRuleCall_3_2; }
		
		//('{' (statements+=InnerBody* | arrayField=MappedArrayField | arrayMessage=MappedArrayMessage) '}' | ';'
		//| '[' messageArray=MessageArray ']')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'{' (statements+=InnerBody* | arrayField=MappedArrayField | arrayMessage=MappedArrayMessage) '}'
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0_0() { return cLeftCurlyBracketKeyword_4_0_0; }
		
		//(statements+=InnerBody* | arrayField=MappedArrayField | arrayMessage=MappedArrayMessage)
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }
		
		//statements+=InnerBody*
		public Assignment getStatementsAssignment_4_0_1_0() { return cStatementsAssignment_4_0_1_0; }
		
		//InnerBody
		public RuleCall getStatementsInnerBodyParserRuleCall_4_0_1_0_0() { return cStatementsInnerBodyParserRuleCall_4_0_1_0_0; }
		
		//arrayField=MappedArrayField
		public Assignment getArrayFieldAssignment_4_0_1_1() { return cArrayFieldAssignment_4_0_1_1; }
		
		//MappedArrayField
		public RuleCall getArrayFieldMappedArrayFieldParserRuleCall_4_0_1_1_0() { return cArrayFieldMappedArrayFieldParserRuleCall_4_0_1_1_0; }
		
		//arrayMessage=MappedArrayMessage
		public Assignment getArrayMessageAssignment_4_0_1_2() { return cArrayMessageAssignment_4_0_1_2; }
		
		//MappedArrayMessage
		public RuleCall getArrayMessageMappedArrayMessageParserRuleCall_4_0_1_2_0() { return cArrayMessageMappedArrayMessageParserRuleCall_4_0_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_0_2() { return cRightCurlyBracketKeyword_4_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'[' messageArray=MessageArray ']'
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_2_0() { return cLeftSquareBracketKeyword_4_2_0; }
		
		//messageArray=MessageArray
		public Assignment getMessageArrayAssignment_4_2_1() { return cMessageArrayAssignment_4_2_1; }
		
		//MessageArray
		public RuleCall getMessageArrayMessageArrayParserRuleCall_4_2_1_0() { return cMessageArrayMessageArrayParserRuleCall_4_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2_2() { return cRightSquareBracketKeyword_4_2_2; }
	}
	public class MessageArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MessageArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArrayMessageElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArrayMessageElementsMessageArrayElementParserRuleCall_0_0 = (RuleCall)cArrayMessageElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cARG_SEPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cArrayMessageElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArrayMessageElementsMessageArrayElementParserRuleCall_1_1_0 = (RuleCall)cArrayMessageElementsAssignment_1_1.eContents().get(0);
		
		//MessageArray:
		//	arrayMessageElements+=MessageArrayElement (ARG_SEP arrayMessageElements+=MessageArrayElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//arrayMessageElements+=MessageArrayElement (ARG_SEP arrayMessageElements+=MessageArrayElement)*
		public Group getGroup() { return cGroup; }
		
		//arrayMessageElements+=MessageArrayElement
		public Assignment getArrayMessageElementsAssignment_0() { return cArrayMessageElementsAssignment_0; }
		
		//MessageArrayElement
		public RuleCall getArrayMessageElementsMessageArrayElementParserRuleCall_0_0() { return cArrayMessageElementsMessageArrayElementParserRuleCall_0_0; }
		
		//(ARG_SEP arrayMessageElements+=MessageArrayElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_1_0() { return cARG_SEPTerminalRuleCall_1_0; }
		
		//arrayMessageElements+=MessageArrayElement
		public Assignment getArrayMessageElementsAssignment_1_1() { return cArrayMessageElementsAssignment_1_1; }
		
		//MessageArrayElement
		public RuleCall getArrayMessageElementsMessageArrayElementParserRuleCall_1_1_0() { return cArrayMessageElementsMessageArrayElementParserRuleCall_1_1_0; }
	}
	public class MessageArrayElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MessageArrayElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMessageArrayElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsInnerBodyParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MessageArrayElement:
		//	{MessageArrayElement} '{' statements+=InnerBody* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{MessageArrayElement} '{' statements+=InnerBody* '}'
		public Group getGroup() { return cGroup; }
		
		//{MessageArrayElement}
		public Action getMessageArrayElementAction_0() { return cMessageArrayElementAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=InnerBody*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//InnerBody
		public RuleCall getStatementsInnerBodyParserRuleCall_2_0() { return cStatementsInnerBodyParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MessageArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MessageArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cTYPE_DEFTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cMessageTypeParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMODE_DEFTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cMessageModeParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//MessageArgument:
		//	TYPE_DEF ('=' | ':') MessageType | MODE_DEF ('=' | ':') MessageMode;
		@Override public ParserRule getRule() { return rule; }
		
		//TYPE_DEF ('=' | ':') MessageType | MODE_DEF ('=' | ':') MessageMode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TYPE_DEF ('=' | ':') MessageType
		public Group getGroup_0() { return cGroup_0; }
		
		//TYPE_DEF
		public RuleCall getTYPE_DEFTerminalRuleCall_0_0() { return cTYPE_DEFTerminalRuleCall_0_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_0() { return cEqualsSignKeyword_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_1_1() { return cColonKeyword_0_1_1; }
		
		//MessageType
		public RuleCall getMessageTypeParserRuleCall_0_2() { return cMessageTypeParserRuleCall_0_2; }
		
		//MODE_DEF ('=' | ':') MessageMode
		public Group getGroup_1() { return cGroup_1; }
		
		//MODE_DEF
		public RuleCall getMODE_DEFTerminalRuleCall_1_0() { return cMODE_DEFTerminalRuleCall_1_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }
		
		//MessageMode
		public RuleCall getMessageModeParserRuleCall_1_2() { return cMessageModeParserRuleCall_1_2; }
	}
	public class MessageArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MessageArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsMessageArgumentParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cARG_SEPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsMessageArgumentParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		
		//MessageArguments:
		//	arguments+=MessageArgument (ARG_SEP arguments+=MessageArgument)*;
		@Override public ParserRule getRule() { return rule; }
		
		//arguments+=MessageArgument (ARG_SEP arguments+=MessageArgument)*
		public Group getGroup() { return cGroup; }
		
		//arguments+=MessageArgument
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }
		
		//MessageArgument
		public RuleCall getArgumentsMessageArgumentParserRuleCall_0_0() { return cArgumentsMessageArgumentParserRuleCall_0_0; }
		
		//(ARG_SEP arguments+=MessageArgument)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_1_0() { return cARG_SEPTerminalRuleCall_1_0; }
		
		//arguments+=MessageArgument
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }
		
		//MessageArgument
		public RuleCall getArgumentsMessageArgumentParserRuleCall_1_1_0() { return cArgumentsMessageArgumentParserRuleCall_1_1_0; }
	}
	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cMAP_DEFTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cAdapterNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAdapterNameIDENTIFIERTerminalRuleCall_1_0_1_0 = (RuleCall)cAdapterNameAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final RuleCall cARGS_STARTTerminalRuleCall_1_0_2_0 = (RuleCall)cGroup_1_0_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cArgumentsKeyValueArgumentsParserRuleCall_1_0_2_1_0 = (RuleCall)cArgumentsAssignment_1_0_2_1.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_1_0_2_2 = (RuleCall)cGroup_1_0_2.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cMAP_OLDSKOOL_DEFTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cARGS_STARTTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cOBJECT_OLDSKOOL_DEFTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Alternatives cAlternatives_1_1_3 = (Alternatives)cGroup_1_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1_1_3_0 = (Keyword)cAlternatives_1_1_3.eContents().get(0);
		private final Keyword cColonKeyword_1_1_3_1 = (Keyword)cAlternatives_1_1_3.eContents().get(1);
		private final Assignment cObjectNameAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cObjectNameOBJECT_IDENTIFIERTerminalRuleCall_1_1_4_0 = (RuleCall)cObjectNameAssignment_1_1_4.eContents().get(0);
		private final Group cGroup_1_1_5 = (Group)cGroup_1_1.eContents().get(5);
		private final RuleCall cARG_SEPTerminalRuleCall_1_1_5_0 = (RuleCall)cGroup_1_1_5.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_5_1 = (Assignment)cGroup_1_1_5.eContents().get(1);
		private final RuleCall cArgumentsKeyValueArgumentsParserRuleCall_1_1_5_1_0 = (RuleCall)cArgumentsAssignment_1_1_5_1.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_1_1_6 = (RuleCall)cGroup_1_1.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsInnerBodyParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Map:
		//	{Map} (MAP_DEF adapterName=IDENTIFIER (ARGS_START arguments=KeyValueArguments? ARGS_END)? | MAP_OLDSKOOL_DEF
		//	ARGS_START OBJECT_OLDSKOOL_DEF ('=' | ':') objectName=OBJECT_IDENTIFIER (ARG_SEP arguments=KeyValueArguments)?
		//	ARGS_END) '{' statements+=InnerBody* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Map} (MAP_DEF adapterName=IDENTIFIER (ARGS_START arguments=KeyValueArguments? ARGS_END)? | MAP_OLDSKOOL_DEF ARGS_START
		//OBJECT_OLDSKOOL_DEF ('=' | ':') objectName=OBJECT_IDENTIFIER (ARG_SEP arguments=KeyValueArguments)? ARGS_END) '{'
		//statements+=InnerBody* '}'
		public Group getGroup() { return cGroup; }
		
		//{Map}
		public Action getMapAction_0() { return cMapAction_0; }
		
		//(MAP_DEF adapterName=IDENTIFIER (ARGS_START arguments=KeyValueArguments? ARGS_END)? | MAP_OLDSKOOL_DEF ARGS_START
		//OBJECT_OLDSKOOL_DEF ('=' | ':') objectName=OBJECT_IDENTIFIER (ARG_SEP arguments=KeyValueArguments)? ARGS_END)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//MAP_DEF adapterName=IDENTIFIER (ARGS_START arguments=KeyValueArguments? ARGS_END)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//MAP_DEF
		public RuleCall getMAP_DEFTerminalRuleCall_1_0_0() { return cMAP_DEFTerminalRuleCall_1_0_0; }
		
		//adapterName=IDENTIFIER
		public Assignment getAdapterNameAssignment_1_0_1() { return cAdapterNameAssignment_1_0_1; }
		
		//IDENTIFIER
		public RuleCall getAdapterNameIDENTIFIERTerminalRuleCall_1_0_1_0() { return cAdapterNameIDENTIFIERTerminalRuleCall_1_0_1_0; }
		
		//(ARGS_START arguments=KeyValueArguments? ARGS_END)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_1_0_2_0() { return cARGS_STARTTerminalRuleCall_1_0_2_0; }
		
		//arguments=KeyValueArguments?
		public Assignment getArgumentsAssignment_1_0_2_1() { return cArgumentsAssignment_1_0_2_1; }
		
		//KeyValueArguments
		public RuleCall getArgumentsKeyValueArgumentsParserRuleCall_1_0_2_1_0() { return cArgumentsKeyValueArgumentsParserRuleCall_1_0_2_1_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_1_0_2_2() { return cARGS_ENDTerminalRuleCall_1_0_2_2; }
		
		//MAP_OLDSKOOL_DEF ARGS_START OBJECT_OLDSKOOL_DEF ('=' | ':') objectName=OBJECT_IDENTIFIER (ARG_SEP
		//arguments=KeyValueArguments)? ARGS_END
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//MAP_OLDSKOOL_DEF
		public RuleCall getMAP_OLDSKOOL_DEFTerminalRuleCall_1_1_0() { return cMAP_OLDSKOOL_DEFTerminalRuleCall_1_1_0; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_1_1_1() { return cARGS_STARTTerminalRuleCall_1_1_1; }
		
		//OBJECT_OLDSKOOL_DEF
		public RuleCall getOBJECT_OLDSKOOL_DEFTerminalRuleCall_1_1_2() { return cOBJECT_OLDSKOOL_DEFTerminalRuleCall_1_1_2; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1_1_3() { return cAlternatives_1_1_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_3_0() { return cEqualsSignKeyword_1_1_3_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_3_1() { return cColonKeyword_1_1_3_1; }
		
		//objectName=OBJECT_IDENTIFIER
		public Assignment getObjectNameAssignment_1_1_4() { return cObjectNameAssignment_1_1_4; }
		
		//OBJECT_IDENTIFIER
		public RuleCall getObjectNameOBJECT_IDENTIFIERTerminalRuleCall_1_1_4_0() { return cObjectNameOBJECT_IDENTIFIERTerminalRuleCall_1_1_4_0; }
		
		//(ARG_SEP arguments=KeyValueArguments)?
		public Group getGroup_1_1_5() { return cGroup_1_1_5; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_1_1_5_0() { return cARG_SEPTerminalRuleCall_1_1_5_0; }
		
		//arguments=KeyValueArguments
		public Assignment getArgumentsAssignment_1_1_5_1() { return cArgumentsAssignment_1_1_5_1; }
		
		//KeyValueArguments
		public RuleCall getArgumentsKeyValueArgumentsParserRuleCall_1_1_5_1_0() { return cArgumentsKeyValueArgumentsParserRuleCall_1_1_5_1_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_1_1_6() { return cARGS_ENDTerminalRuleCall_1_1_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements+=InnerBody*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//InnerBody
		public RuleCall getStatementsInnerBodyParserRuleCall_3_0() { return cStatementsInnerBodyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MethodOrSetterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MethodOrSetter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAdapterMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetterFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MethodOrSetter:
		//	AdapterMethod | SetterField;
		@Override public ParserRule getRule() { return rule; }
		
		//AdapterMethod | SetterField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AdapterMethod
		public RuleCall getAdapterMethodParserRuleCall_0() { return cAdapterMethodParserRuleCall_0; }
		
		//SetterField
		public RuleCall getSetterFieldParserRuleCall_1() { return cSetterFieldParserRuleCall_1; }
	}
	public class AdapterMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.AdapterMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAdapterMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodMETHOD_IDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cMethodAssignment_1.eContents().get(0);
		private final RuleCall cARGS_STARTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsKeyValueArgumentsParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AdapterMethod:
		//	{AdapterMethod} method=METHOD_IDENTIFIER ARGS_START arguments=KeyValueArguments? ARGS_END ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{AdapterMethod} method=METHOD_IDENTIFIER ARGS_START arguments=KeyValueArguments? ARGS_END ';'
		public Group getGroup() { return cGroup; }
		
		//{AdapterMethod}
		public Action getAdapterMethodAction_0() { return cAdapterMethodAction_0; }
		
		//method=METHOD_IDENTIFIER
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//METHOD_IDENTIFIER
		public RuleCall getMethodMETHOD_IDENTIFIERTerminalRuleCall_1_0() { return cMethodMETHOD_IDENTIFIERTerminalRuleCall_1_0; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_2() { return cARGS_STARTTerminalRuleCall_2; }
		
		//arguments=KeyValueArguments?
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }
		
		//KeyValueArguments
		public RuleCall getArgumentsKeyValueArgumentsParserRuleCall_3_0() { return cArgumentsKeyValueArgumentsParserRuleCall_3_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_4() { return cARGS_ENDTerminalRuleCall_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SetterFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SetterField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetterFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldMAPPABLE_IDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0_0 = (Keyword)cAlternatives_2_0_0.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0_1 = (Keyword)cAlternatives_2_0_0.eContents().get(1);
		private final Assignment cExpressionListAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExpressionListConditionalExpressionsParserRuleCall_2_0_1_0 = (RuleCall)cExpressionListAssignment_2_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final RuleCall cARGS_STARTTerminalRuleCall_2_1_0_0 = (RuleCall)cGroup_2_1_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cArgumentsKeyValueArgumentsParserRuleCall_2_1_0_1_0 = (RuleCall)cArgumentsAssignment_2_1_0_1.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_2_1_0_2 = (RuleCall)cGroup_2_1_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cMappedArrayAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cMappedArrayMappedArrayMessageParserRuleCall_2_1_2_0 = (RuleCall)cMappedArrayAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Assignment cMappedFieldAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cMappedFieldMappedArrayFieldParserRuleCall_2_2_0 = (RuleCall)cMappedFieldAssignment_2_2.eContents().get(0);
		
		//SetterField:
		//	{SetterField} field=MAPPABLE_IDENTIFIER (('=' | ':') expressionList=ConditionalExpressions ';'
		//	| (ARGS_START arguments=KeyValueArguments ARGS_END)? '{' mappedArray=MappedArrayMessage '}' |
		//	mappedField=MappedArrayField);
		@Override public ParserRule getRule() { return rule; }
		
		//{SetterField} field=MAPPABLE_IDENTIFIER (('=' | ':') expressionList=ConditionalExpressions ';'
		//| (ARGS_START arguments=KeyValueArguments ARGS_END)? '{' mappedArray=MappedArrayMessage '}' |
		//mappedField=MappedArrayField)
		public Group getGroup() { return cGroup; }
		
		//{SetterField}
		public Action getSetterFieldAction_0() { return cSetterFieldAction_0; }
		
		//field=MAPPABLE_IDENTIFIER
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//MAPPABLE_IDENTIFIER
		public RuleCall getFieldMAPPABLE_IDENTIFIERTerminalRuleCall_1_0() { return cFieldMAPPABLE_IDENTIFIERTerminalRuleCall_1_0; }
		
		//(('=' | ':') expressionList=ConditionalExpressions ';'
		//| (ARGS_START arguments=KeyValueArguments ARGS_END)? '{' mappedArray=MappedArrayMessage '}' |
		//mappedField=MappedArrayField)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('=' | ':') expressionList=ConditionalExpressions ';'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0_0_0() { return cEqualsSignKeyword_2_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_0_0_1() { return cColonKeyword_2_0_0_1; }
		
		//expressionList=ConditionalExpressions
		public Assignment getExpressionListAssignment_2_0_1() { return cExpressionListAssignment_2_0_1; }
		
		//ConditionalExpressions
		public RuleCall getExpressionListConditionalExpressionsParserRuleCall_2_0_1_0() { return cExpressionListConditionalExpressionsParserRuleCall_2_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0_2() { return cSemicolonKeyword_2_0_2; }
		
		//(ARGS_START arguments=KeyValueArguments ARGS_END)? '{' mappedArray=MappedArrayMessage '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//(ARGS_START arguments=KeyValueArguments ARGS_END)?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_2_1_0_0() { return cARGS_STARTTerminalRuleCall_2_1_0_0; }
		
		//arguments=KeyValueArguments
		public Assignment getArgumentsAssignment_2_1_0_1() { return cArgumentsAssignment_2_1_0_1; }
		
		//KeyValueArguments
		public RuleCall getArgumentsKeyValueArgumentsParserRuleCall_2_1_0_1_0() { return cArgumentsKeyValueArgumentsParserRuleCall_2_1_0_1_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_2_1_0_2() { return cARGS_ENDTerminalRuleCall_2_1_0_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_1() { return cLeftCurlyBracketKeyword_2_1_1; }
		
		//mappedArray=MappedArrayMessage
		public Assignment getMappedArrayAssignment_2_1_2() { return cMappedArrayAssignment_2_1_2; }
		
		//MappedArrayMessage
		public RuleCall getMappedArrayMappedArrayMessageParserRuleCall_2_1_2_0() { return cMappedArrayMappedArrayMessageParserRuleCall_2_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_3() { return cRightCurlyBracketKeyword_2_1_3; }
		
		//mappedField=MappedArrayField
		public Assignment getMappedFieldAssignment_2_2() { return cMappedFieldAssignment_2_2; }
		
		//MappedArrayField
		public RuleCall getMappedFieldMappedArrayFieldParserRuleCall_2_2_0() { return cMappedFieldMappedArrayFieldParserRuleCall_2_2_0; }
	}
	public class MappedArrayFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MappedArrayField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappedArrayFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldMAPPABLE_IDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cARGS_STARTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cFILTER_DEFTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_2_0 = (Keyword)cAlternatives_2_2.eContents().get(0);
		private final Keyword cColonKeyword_2_2_1 = (Keyword)cAlternatives_2_2.eContents().get(1);
		private final Assignment cFilterAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cFilterExpressionParserRuleCall_2_3_0 = (RuleCall)cFilterAssignment_2_3.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsInnerBodyParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MappedArrayField:
		//	{MappedArrayField} field=MAPPABLE_IDENTIFIER (ARGS_START FILTER_DEF ('=' | ':') filter=Expression ARGS_END)? '{'
		//	statements+=InnerBody* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{MappedArrayField} field=MAPPABLE_IDENTIFIER (ARGS_START FILTER_DEF ('=' | ':') filter=Expression ARGS_END)? '{'
		//statements+=InnerBody* '}'
		public Group getGroup() { return cGroup; }
		
		//{MappedArrayField}
		public Action getMappedArrayFieldAction_0() { return cMappedArrayFieldAction_0; }
		
		//field=MAPPABLE_IDENTIFIER
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//MAPPABLE_IDENTIFIER
		public RuleCall getFieldMAPPABLE_IDENTIFIERTerminalRuleCall_1_0() { return cFieldMAPPABLE_IDENTIFIERTerminalRuleCall_1_0; }
		
		//(ARGS_START FILTER_DEF ('=' | ':') filter=Expression ARGS_END)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_2_0() { return cARGS_STARTTerminalRuleCall_2_0; }
		
		//FILTER_DEF
		public RuleCall getFILTER_DEFTerminalRuleCall_2_1() { return cFILTER_DEFTerminalRuleCall_2_1; }
		
		//('=' | ':')
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_2_0() { return cEqualsSignKeyword_2_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_2_1() { return cColonKeyword_2_2_1; }
		
		//filter=Expression
		public Assignment getFilterAssignment_2_3() { return cFilterAssignment_2_3; }
		
		//Expression
		public RuleCall getFilterExpressionParserRuleCall_2_3_0() { return cFilterExpressionParserRuleCall_2_3_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_2_4() { return cARGS_ENDTerminalRuleCall_2_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//statements+=InnerBody*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//InnerBody
		public RuleCall getStatementsInnerBodyParserRuleCall_4_0() { return cStatementsInnerBodyParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MappedArrayMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MappedArrayMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappedArrayMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageTML_LITERALTerminalRuleCall_1_0 = (RuleCall)cMessageAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cARGS_STARTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cFILTER_DEFTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_2_0 = (Keyword)cAlternatives_2_2.eContents().get(0);
		private final Keyword cColonKeyword_2_2_1 = (Keyword)cAlternatives_2_2.eContents().get(1);
		private final Assignment cFilterAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cFilterExpressionParserRuleCall_2_3_0 = (RuleCall)cFilterAssignment_2_3.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsInnerBodyParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MappedArrayMessage:
		//	{MappedArrayMessage} message=TML_LITERAL (ARGS_START FILTER_DEF ('=' | ':') filter=Expression ARGS_END)? '{'
		//	statements+=InnerBody* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{MappedArrayMessage} message=TML_LITERAL (ARGS_START FILTER_DEF ('=' | ':') filter=Expression ARGS_END)? '{'
		//statements+=InnerBody* '}'
		public Group getGroup() { return cGroup; }
		
		//{MappedArrayMessage}
		public Action getMappedArrayMessageAction_0() { return cMappedArrayMessageAction_0; }
		
		//message=TML_LITERAL
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }
		
		//TML_LITERAL
		public RuleCall getMessageTML_LITERALTerminalRuleCall_1_0() { return cMessageTML_LITERALTerminalRuleCall_1_0; }
		
		//(ARGS_START FILTER_DEF ('=' | ':') filter=Expression ARGS_END)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_2_0() { return cARGS_STARTTerminalRuleCall_2_0; }
		
		//FILTER_DEF
		public RuleCall getFILTER_DEFTerminalRuleCall_2_1() { return cFILTER_DEFTerminalRuleCall_2_1; }
		
		//('=' | ':')
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_2_0() { return cEqualsSignKeyword_2_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_2_1() { return cColonKeyword_2_2_1; }
		
		//filter=Expression
		public Assignment getFilterAssignment_2_3() { return cFilterAssignment_2_3; }
		
		//Expression
		public RuleCall getFilterExpressionParserRuleCall_2_3_0() { return cFilterExpressionParserRuleCall_2_3_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_2_4() { return cARGS_ENDTerminalRuleCall_2_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//statements+=InnerBody*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//InnerBody
		public RuleCall getStatementsInnerBodyParserRuleCall_4_0() { return cStatementsInnerBodyParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class KeyValueArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.KeyValueArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKeyValueArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyValueArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyValueArgumentsKeyValueArgumentParserRuleCall_1_0 = (RuleCall)cKeyValueArgumentsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cARG_SEPTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cKeyValueArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKeyValueArgumentsKeyValueArgumentParserRuleCall_2_1_0 = (RuleCall)cKeyValueArgumentsAssignment_2_1.eContents().get(0);
		
		//KeyValueArguments:
		//	{KeyValueArguments} keyValueArguments+=KeyValueArgument (ARG_SEP keyValueArguments+=KeyValueArgument)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{KeyValueArguments} keyValueArguments+=KeyValueArgument (ARG_SEP keyValueArguments+=KeyValueArgument)*
		public Group getGroup() { return cGroup; }
		
		//{KeyValueArguments}
		public Action getKeyValueArgumentsAction_0() { return cKeyValueArgumentsAction_0; }
		
		//keyValueArguments+=KeyValueArgument
		public Assignment getKeyValueArgumentsAssignment_1() { return cKeyValueArgumentsAssignment_1; }
		
		//KeyValueArgument
		public RuleCall getKeyValueArgumentsKeyValueArgumentParserRuleCall_1_0() { return cKeyValueArgumentsKeyValueArgumentParserRuleCall_1_0; }
		
		//(ARG_SEP keyValueArguments+=KeyValueArgument)*
		public Group getGroup_2() { return cGroup_2; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_2_0() { return cARG_SEPTerminalRuleCall_2_0; }
		
		//keyValueArguments+=KeyValueArgument
		public Assignment getKeyValueArgumentsAssignment_2_1() { return cKeyValueArgumentsAssignment_2_1; }
		
		//KeyValueArgument
		public RuleCall getKeyValueArgumentsKeyValueArgumentParserRuleCall_2_1_0() { return cKeyValueArgumentsKeyValueArgumentParserRuleCall_2_1_0; }
	}
	public class KeyValueArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.KeyValueArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKeyValueArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cKeyAlternatives_1_0 = (Alternatives)cKeyAssignment_1.eContents().get(0);
		private final RuleCall cKeyIDENTIFIERTerminalRuleCall_1_0_0 = (RuleCall)cKeyAlternatives_1_0.eContents().get(0);
		private final RuleCall cKeyOPTION_TYPEParserRuleCall_1_0_1 = (RuleCall)cKeyAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueLiteralOrExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//KeyValueArgument:
		//	{KeyValueArgument} key=(IDENTIFIER | OPTION_TYPE) ('=' | ':') value=LiteralOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{KeyValueArgument} key=(IDENTIFIER | OPTION_TYPE) ('=' | ':') value=LiteralOrExpression
		public Group getGroup() { return cGroup; }
		
		//{KeyValueArgument}
		public Action getKeyValueArgumentAction_0() { return cKeyValueArgumentAction_0; }
		
		//key=(IDENTIFIER | OPTION_TYPE)
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//(IDENTIFIER | OPTION_TYPE)
		public Alternatives getKeyAlternatives_1_0() { return cKeyAlternatives_1_0; }
		
		//IDENTIFIER
		public RuleCall getKeyIDENTIFIERTerminalRuleCall_1_0_0() { return cKeyIDENTIFIERTerminalRuleCall_1_0_0; }
		
		//OPTION_TYPE
		public RuleCall getKeyOPTION_TYPEParserRuleCall_1_0_1() { return cKeyOPTION_TYPEParserRuleCall_1_0_1; }
		
		//('=' | ':')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//value=LiteralOrExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//LiteralOrExpression
		public RuleCall getValueLiteralOrExpressionParserRuleCall_3_0() { return cValueLiteralOrExpressionParserRuleCall_3_0; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cVAR_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarNameIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cVarNameAssignment_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsVarArgumentsParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Alternatives cAlternatives_4_0_0 = (Alternatives)cGroup_4_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_0_0_0 = (Keyword)cAlternatives_4_0_0.eContents().get(0);
		private final Keyword cColonKeyword_4_0_0_1 = (Keyword)cAlternatives_4_0_0.eContents().get(1);
		private final Assignment cExpressionListAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cExpressionListConditionalExpressionsParserRuleCall_4_0_1_0 = (RuleCall)cExpressionListAssignment_4_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cVarArrayAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cVarArrayVarArrayParserRuleCall_4_1_1_0 = (RuleCall)cVarArrayAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cVarElementsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cVarElementsVarElementParserRuleCall_4_2_1_0 = (RuleCall)cVarElementsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2_2 = (Keyword)cGroup_4_2.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cAlternatives_4.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cMappedArrayFieldAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cMappedArrayFieldMappedArrayFieldParserRuleCall_4_3_1_0 = (RuleCall)cMappedArrayFieldAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3_2 = (Keyword)cGroup_4_3.eContents().get(2);
		private final Group cGroup_4_4 = (Group)cAlternatives_4.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cMappedArrayMessageAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final RuleCall cMappedArrayMessageMappedArrayMessageParserRuleCall_4_4_1_0 = (RuleCall)cMappedArrayMessageAssignment_4_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4_2 = (Keyword)cGroup_4_4.eContents().get(2);
		
		//Var:
		//	{Var} VAR_DEF varName=IDENTIFIER arguments=VarArguments? (('=' | ':') expressionList=ConditionalExpressions ';' |
		//	'[' varArray=VarArray? ']' |
		//	'{' varElements+=VarElement* '}'
		//	| '{' mappedArrayField=MappedArrayField '}' | '{' mappedArrayMessage=MappedArrayMessage '}');
		@Override public ParserRule getRule() { return rule; }
		
		//{Var} VAR_DEF varName=IDENTIFIER arguments=VarArguments? (('=' | ':') expressionList=ConditionalExpressions ';' | '['
		//varArray=VarArray? ']' |
		//'{' varElements+=VarElement* '}'
		//| '{' mappedArrayField=MappedArrayField '}' | '{' mappedArrayMessage=MappedArrayMessage '}')
		public Group getGroup() { return cGroup; }
		
		//{Var}
		public Action getVarAction_0() { return cVarAction_0; }
		
		//VAR_DEF
		public RuleCall getVAR_DEFTerminalRuleCall_1() { return cVAR_DEFTerminalRuleCall_1; }
		
		//varName=IDENTIFIER
		public Assignment getVarNameAssignment_2() { return cVarNameAssignment_2; }
		
		//IDENTIFIER
		public RuleCall getVarNameIDENTIFIERTerminalRuleCall_2_0() { return cVarNameIDENTIFIERTerminalRuleCall_2_0; }
		
		//arguments=VarArguments?
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }
		
		//VarArguments
		public RuleCall getArgumentsVarArgumentsParserRuleCall_3_0() { return cArgumentsVarArgumentsParserRuleCall_3_0; }
		
		//(('=' | ':') expressionList=ConditionalExpressions ';' | '[' varArray=VarArray? ']' |
		//'{' varElements+=VarElement* '}'
		//| '{' mappedArrayField=MappedArrayField '}' | '{' mappedArrayMessage=MappedArrayMessage '}')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//('=' | ':') expressionList=ConditionalExpressions ';'
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_4_0_0() { return cAlternatives_4_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0_0_0() { return cEqualsSignKeyword_4_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_4_0_0_1() { return cColonKeyword_4_0_0_1; }
		
		//expressionList=ConditionalExpressions
		public Assignment getExpressionListAssignment_4_0_1() { return cExpressionListAssignment_4_0_1; }
		
		//ConditionalExpressions
		public RuleCall getExpressionListConditionalExpressionsParserRuleCall_4_0_1_0() { return cExpressionListConditionalExpressionsParserRuleCall_4_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0_2() { return cSemicolonKeyword_4_0_2; }
		
		//'[' varArray=VarArray? ']'
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_1_0() { return cLeftSquareBracketKeyword_4_1_0; }
		
		//varArray=VarArray?
		public Assignment getVarArrayAssignment_4_1_1() { return cVarArrayAssignment_4_1_1; }
		
		//VarArray
		public RuleCall getVarArrayVarArrayParserRuleCall_4_1_1_0() { return cVarArrayVarArrayParserRuleCall_4_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_1_2() { return cRightSquareBracketKeyword_4_1_2; }
		
		//'{' varElements+=VarElement* '}'
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_2_0() { return cLeftCurlyBracketKeyword_4_2_0; }
		
		//varElements+=VarElement*
		public Assignment getVarElementsAssignment_4_2_1() { return cVarElementsAssignment_4_2_1; }
		
		//VarElement
		public RuleCall getVarElementsVarElementParserRuleCall_4_2_1_0() { return cVarElementsVarElementParserRuleCall_4_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2_2() { return cRightCurlyBracketKeyword_4_2_2; }
		
		//'{' mappedArrayField=MappedArrayField '}'
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_3_0() { return cLeftCurlyBracketKeyword_4_3_0; }
		
		//mappedArrayField=MappedArrayField
		public Assignment getMappedArrayFieldAssignment_4_3_1() { return cMappedArrayFieldAssignment_4_3_1; }
		
		//MappedArrayField
		public RuleCall getMappedArrayFieldMappedArrayFieldParserRuleCall_4_3_1_0() { return cMappedArrayFieldMappedArrayFieldParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3_2() { return cRightCurlyBracketKeyword_4_3_2; }
		
		//'{' mappedArrayMessage=MappedArrayMessage '}'
		public Group getGroup_4_4() { return cGroup_4_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_4_0() { return cLeftCurlyBracketKeyword_4_4_0; }
		
		//mappedArrayMessage=MappedArrayMessage
		public Assignment getMappedArrayMessageAssignment_4_4_1() { return cMappedArrayMessageAssignment_4_4_1; }
		
		//MappedArrayMessage
		public RuleCall getMappedArrayMessageMappedArrayMessageParserRuleCall_4_4_1_0() { return cMappedArrayMessageMappedArrayMessageParserRuleCall_4_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4_2() { return cRightCurlyBracketKeyword_4_4_2; }
	}
	public class VarArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.VarArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVararrayelementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVararrayelementVarArrayElementParserRuleCall_1_0 = (RuleCall)cVararrayelementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cARG_SEPTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cVararrayelementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVararrayelementVarArrayElementParserRuleCall_2_1_0 = (RuleCall)cVararrayelementAssignment_2_1.eContents().get(0);
		
		//VarArray:
		//	{VarArray} vararrayelement+=VarArrayElement (ARG_SEP vararrayelement+=VarArrayElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{VarArray} vararrayelement+=VarArrayElement (ARG_SEP vararrayelement+=VarArrayElement)*
		public Group getGroup() { return cGroup; }
		
		//{VarArray}
		public Action getVarArrayAction_0() { return cVarArrayAction_0; }
		
		//vararrayelement+=VarArrayElement
		public Assignment getVararrayelementAssignment_1() { return cVararrayelementAssignment_1; }
		
		//VarArrayElement
		public RuleCall getVararrayelementVarArrayElementParserRuleCall_1_0() { return cVararrayelementVarArrayElementParserRuleCall_1_0; }
		
		//(ARG_SEP vararrayelement+=VarArrayElement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_2_0() { return cARG_SEPTerminalRuleCall_2_0; }
		
		//vararrayelement+=VarArrayElement
		public Assignment getVararrayelementAssignment_2_1() { return cVararrayelementAssignment_2_1; }
		
		//VarArrayElement
		public RuleCall getVararrayelementVarArrayElementParserRuleCall_2_1_0() { return cVararrayelementVarArrayElementParserRuleCall_2_1_0; }
	}
	public class VarArrayElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.VarArrayElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarArrayElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarElementsVarElementParserRuleCall_2_0 = (RuleCall)cVarElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VarArrayElement:
		//	{VarArrayElement} '{' varElements+=VarElement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{VarArrayElement} '{' varElements+=VarElement* '}'
		public Group getGroup() { return cGroup; }
		
		//{VarArrayElement}
		public Action getVarArrayElementAction_0() { return cVarArrayElementAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//varElements+=VarElement*
		public Assignment getVarElementsAssignment_2() { return cVarElementsAssignment_2; }
		
		//VarElement
		public RuleCall getVarElementsVarElementParserRuleCall_2_0() { return cVarElementsVarElementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class VarElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.VarElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cThenKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVarParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		
		//VarElement:
		//	{VarElement} ('if' condition=Expression 'then')? var=Var;
		@Override public ParserRule getRule() { return rule; }
		
		//{VarElement} ('if' condition=Expression 'then')? var=Var
		public Group getGroup() { return cGroup; }
		
		//{VarElement}
		public Action getVarElementAction_0() { return cVarElementAction_0; }
		
		//('if' condition=Expression 'then')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'if'
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_1_0() { return cConditionExpressionParserRuleCall_1_1_0; }
		
		//'then'
		public Keyword getThenKeyword_1_2() { return cThenKeyword_1_2; }
		
		//var=Var
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//Var
		public RuleCall getVarVarParserRuleCall_2_0() { return cVarVarParserRuleCall_2_0; }
	}
	public class VarArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.VarArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cARGS_STARTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarArgumentsVarArgumentParserRuleCall_2_0 = (RuleCall)cVarArgumentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cARG_SEPTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cVarArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVarArgumentsVarArgumentParserRuleCall_3_1_0 = (RuleCall)cVarArgumentsAssignment_3_1.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//VarArguments:
		//	{VarArguments} ARGS_START varArguments+=VarArgument (ARG_SEP varArguments+=VarArgument)* ARGS_END;
		@Override public ParserRule getRule() { return rule; }
		
		//{VarArguments} ARGS_START varArguments+=VarArgument (ARG_SEP varArguments+=VarArgument)* ARGS_END
		public Group getGroup() { return cGroup; }
		
		//{VarArguments}
		public Action getVarArgumentsAction_0() { return cVarArgumentsAction_0; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_1() { return cARGS_STARTTerminalRuleCall_1; }
		
		//varArguments+=VarArgument
		public Assignment getVarArgumentsAssignment_2() { return cVarArgumentsAssignment_2; }
		
		//VarArgument
		public RuleCall getVarArgumentsVarArgumentParserRuleCall_2_0() { return cVarArgumentsVarArgumentParserRuleCall_2_0; }
		
		//(ARG_SEP varArguments+=VarArgument)*
		public Group getGroup_3() { return cGroup_3; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_3_0() { return cARG_SEPTerminalRuleCall_3_0; }
		
		//varArguments+=VarArgument
		public Assignment getVarArgumentsAssignment_3_1() { return cVarArgumentsAssignment_3_1; }
		
		//VarArgument
		public RuleCall getVarArgumentsVarArgumentParserRuleCall_3_1_0() { return cVarArgumentsVarArgumentParserRuleCall_3_1_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_4() { return cARGS_ENDTerminalRuleCall_4; }
	}
	public class VarArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.VarArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cArgumentAlternatives_1_0 = (Alternatives)cArgumentAssignment_1.eContents().get(0);
		private final RuleCall cArgumentVarTypeParserRuleCall_1_0_0 = (RuleCall)cArgumentAlternatives_1_0.eContents().get(0);
		private final RuleCall cArgumentVarModeParserRuleCall_1_0_1 = (RuleCall)cArgumentAlternatives_1_0.eContents().get(1);
		
		//VarArgument:
		//	{VarArgument} argument=(VarType | VarMode);
		@Override public ParserRule getRule() { return rule; }
		
		//{VarArgument} argument=(VarType | VarMode)
		public Group getGroup() { return cGroup; }
		
		//{VarArgument}
		public Action getVarArgumentAction_0() { return cVarArgumentAction_0; }
		
		//argument=(VarType | VarMode)
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//(VarType | VarMode)
		public Alternatives getArgumentAlternatives_1_0() { return cArgumentAlternatives_1_0; }
		
		//VarType
		public RuleCall getArgumentVarTypeParserRuleCall_1_0_0() { return cArgumentVarTypeParserRuleCall_1_0_0; }
		
		//VarMode
		public RuleCall getArgumentVarModeParserRuleCall_1_0_1() { return cArgumentVarModeParserRuleCall_1_0_1; }
	}
	public class VarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.VarType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cTYPE_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeMessageTypeParserRuleCall_3_0_0 = (RuleCall)cTypeAlternatives_3_0.eContents().get(0);
		private final RuleCall cTypePropertyTypeParserRuleCall_3_0_1 = (RuleCall)cTypeAlternatives_3_0.eContents().get(1);
		
		//VarType:
		//	{VarType} TYPE_DEF ('=' | ':') type=(MessageType | PropertyType);
		@Override public ParserRule getRule() { return rule; }
		
		//{VarType} TYPE_DEF ('=' | ':') type=(MessageType | PropertyType)
		public Group getGroup() { return cGroup; }
		
		//{VarType}
		public Action getVarTypeAction_0() { return cVarTypeAction_0; }
		
		//TYPE_DEF
		public RuleCall getTYPE_DEFTerminalRuleCall_1() { return cTYPE_DEFTerminalRuleCall_1; }
		
		//('=' | ':')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//type=(MessageType | PropertyType)
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//(MessageType | PropertyType)
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }
		
		//MessageType
		public RuleCall getTypeMessageTypeParserRuleCall_3_0_0() { return cTypeMessageTypeParserRuleCall_3_0_0; }
		
		//PropertyType
		public RuleCall getTypePropertyTypeParserRuleCall_3_0_1() { return cTypePropertyTypeParserRuleCall_3_0_1; }
	}
	public class VarModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.VarMode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarModeAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cMODE_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cModeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModeMessageModeParserRuleCall_3_0 = (RuleCall)cModeAssignment_3.eContents().get(0);
		
		//VarMode:
		//	{VarMode} MODE_DEF ('=' | ':') mode=MessageMode;
		@Override public ParserRule getRule() { return rule; }
		
		//{VarMode} MODE_DEF ('=' | ':') mode=MessageMode
		public Group getGroup() { return cGroup; }
		
		//{VarMode}
		public Action getVarModeAction_0() { return cVarModeAction_0; }
		
		//MODE_DEF
		public RuleCall getMODE_DEFTerminalRuleCall_1() { return cMODE_DEFTerminalRuleCall_1; }
		
		//('=' | ':')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//mode=MessageMode
		public Assignment getModeAssignment_3() { return cModeAssignment_3; }
		
		//MessageMode
		public RuleCall getModeMessageModeParserRuleCall_3_0() { return cModeMessageModeParserRuleCall_3_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPROPERTY_DEFTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cPropertyNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyNameQUOTED_IDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cPropertyNameAssignment_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsPropertyArgumentsParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_0_0 = (Group)cGroup_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_0_0_0 = (Alternatives)cGroup_4_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_0_0_0_0 = (Keyword)cAlternatives_4_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_4_0_0_0_1 = (Keyword)cAlternatives_4_0_0_0.eContents().get(1);
		private final Assignment cExpressionListAssignment_4_0_0_1 = (Assignment)cGroup_4_0_0.eContents().get(1);
		private final RuleCall cExpressionListConditionalExpressionsParserRuleCall_4_0_0_1_0 = (RuleCall)cExpressionListAssignment_4_0_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSelectionArrayAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cSelectionArraySelectionArrayParserRuleCall_4_1_1_0 = (RuleCall)cSelectionArrayAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cArrayFieldAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cArrayFieldMappedArrayFieldParserRuleCall_4_2_1_0 = (RuleCall)cArrayFieldAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2_2 = (Keyword)cGroup_4_2.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cAlternatives_4.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cArrayMessageAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cArrayMessageMappedArrayMessageParserRuleCall_4_3_1_0 = (RuleCall)cArrayMessageAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3_2 = (Keyword)cGroup_4_3.eContents().get(2);
		
		//Property:
		//	{Property} PROPERTY_DEF propertyName=QUOTED_IDENTIFIER arguments=PropertyArguments? ((('=' | ':')
		//	expressionList=ConditionalExpressions)? ';'
		//	| '[' selectionArray=SelectionArray ']'
		//	| '{' arrayField=MappedArrayField '}'
		//	| '{' arrayMessage=MappedArrayMessage '}');
		@Override public ParserRule getRule() { return rule; }
		
		//{Property} PROPERTY_DEF propertyName=QUOTED_IDENTIFIER arguments=PropertyArguments? ((('=' | ':')
		//expressionList=ConditionalExpressions)? ';'
		//| '[' selectionArray=SelectionArray ']'
		//| '{' arrayField=MappedArrayField '}'
		//| '{' arrayMessage=MappedArrayMessage '}')
		public Group getGroup() { return cGroup; }
		
		//{Property}
		public Action getPropertyAction_0() { return cPropertyAction_0; }
		
		//PROPERTY_DEF
		public RuleCall getPROPERTY_DEFTerminalRuleCall_1() { return cPROPERTY_DEFTerminalRuleCall_1; }
		
		//propertyName=QUOTED_IDENTIFIER
		public Assignment getPropertyNameAssignment_2() { return cPropertyNameAssignment_2; }
		
		//QUOTED_IDENTIFIER
		public RuleCall getPropertyNameQUOTED_IDENTIFIERTerminalRuleCall_2_0() { return cPropertyNameQUOTED_IDENTIFIERTerminalRuleCall_2_0; }
		
		//arguments=PropertyArguments?
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }
		
		//PropertyArguments
		public RuleCall getArgumentsPropertyArgumentsParserRuleCall_3_0() { return cArgumentsPropertyArgumentsParserRuleCall_3_0; }
		
		//((('=' | ':') expressionList=ConditionalExpressions)? ';'
		//| '[' selectionArray=SelectionArray ']'
		//| '{' arrayField=MappedArrayField '}'
		//| '{' arrayMessage=MappedArrayMessage '}')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//(('=' | ':') expressionList=ConditionalExpressions)? ';'
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//(('=' | ':') expressionList=ConditionalExpressions)?
		public Group getGroup_4_0_0() { return cGroup_4_0_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_4_0_0_0() { return cAlternatives_4_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0_0_0_0() { return cEqualsSignKeyword_4_0_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_4_0_0_0_1() { return cColonKeyword_4_0_0_0_1; }
		
		//expressionList=ConditionalExpressions
		public Assignment getExpressionListAssignment_4_0_0_1() { return cExpressionListAssignment_4_0_0_1; }
		
		//ConditionalExpressions
		public RuleCall getExpressionListConditionalExpressionsParserRuleCall_4_0_0_1_0() { return cExpressionListConditionalExpressionsParserRuleCall_4_0_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0_1() { return cSemicolonKeyword_4_0_1; }
		
		//'[' selectionArray=SelectionArray ']'
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_1_0() { return cLeftSquareBracketKeyword_4_1_0; }
		
		//selectionArray=SelectionArray
		public Assignment getSelectionArrayAssignment_4_1_1() { return cSelectionArrayAssignment_4_1_1; }
		
		//SelectionArray
		public RuleCall getSelectionArraySelectionArrayParserRuleCall_4_1_1_0() { return cSelectionArraySelectionArrayParserRuleCall_4_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_1_2() { return cRightSquareBracketKeyword_4_1_2; }
		
		//'{' arrayField=MappedArrayField '}'
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_2_0() { return cLeftCurlyBracketKeyword_4_2_0; }
		
		//arrayField=MappedArrayField
		public Assignment getArrayFieldAssignment_4_2_1() { return cArrayFieldAssignment_4_2_1; }
		
		//MappedArrayField
		public RuleCall getArrayFieldMappedArrayFieldParserRuleCall_4_2_1_0() { return cArrayFieldMappedArrayFieldParserRuleCall_4_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2_2() { return cRightCurlyBracketKeyword_4_2_2; }
		
		//'{' arrayMessage=MappedArrayMessage '}'
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_3_0() { return cLeftCurlyBracketKeyword_4_3_0; }
		
		//arrayMessage=MappedArrayMessage
		public Assignment getArrayMessageAssignment_4_3_1() { return cArrayMessageAssignment_4_3_1; }
		
		//MappedArrayMessage
		public RuleCall getArrayMessageMappedArrayMessageParserRuleCall_4_3_1_0() { return cArrayMessageMappedArrayMessageParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3_2() { return cRightCurlyBracketKeyword_4_3_2; }
	}
	public class SelectionArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SelectionArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArrayElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArrayElementsSelectionArrayElementParserRuleCall_0_0 = (RuleCall)cArrayElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cARG_SEPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cArrayElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArrayElementsSelectionArrayElementParserRuleCall_1_1_0 = (RuleCall)cArrayElementsAssignment_1_1.eContents().get(0);
		
		//SelectionArray:
		//	arrayElements+=SelectionArrayElement (ARG_SEP arrayElements+=SelectionArrayElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//arrayElements+=SelectionArrayElement (ARG_SEP arrayElements+=SelectionArrayElement)*
		public Group getGroup() { return cGroup; }
		
		//arrayElements+=SelectionArrayElement
		public Assignment getArrayElementsAssignment_0() { return cArrayElementsAssignment_0; }
		
		//SelectionArrayElement
		public RuleCall getArrayElementsSelectionArrayElementParserRuleCall_0_0() { return cArrayElementsSelectionArrayElementParserRuleCall_0_0; }
		
		//(ARG_SEP arrayElements+=SelectionArrayElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_1_0() { return cARG_SEPTerminalRuleCall_1_0; }
		
		//arrayElements+=SelectionArrayElement
		public Assignment getArrayElementsAssignment_1_1() { return cArrayElementsAssignment_1_1; }
		
		//SelectionArrayElement
		public RuleCall getArrayElementsSelectionArrayElementParserRuleCall_1_1_0() { return cArrayElementsSelectionArrayElementParserRuleCall_1_1_0; }
	}
	public class SelectionArrayElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SelectionArrayElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectionArrayElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInnerBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInnerBodyInnerBodyParserRuleCall_2_0 = (RuleCall)cInnerBodyAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SelectionArrayElement:
		//	{SelectionArrayElement} '{' innerBody+=InnerBody* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SelectionArrayElement} '{' innerBody+=InnerBody* '}'
		public Group getGroup() { return cGroup; }
		
		//{SelectionArrayElement}
		public Action getSelectionArrayElementAction_0() { return cSelectionArrayElementAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//innerBody+=InnerBody*
		public Assignment getInnerBodyAssignment_2() { return cInnerBodyAssignment_2; }
		
		//InnerBody
		public RuleCall getInnerBodyInnerBodyParserRuleCall_2_0() { return cInnerBodyInnerBodyParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOPTION_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionOPTION_TYPEParserRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cExpressionListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionListConditionalExpressionsParserRuleCall_3_0 = (RuleCall)cExpressionListAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Option:
		//	OPTION_DEF option=OPTION_TYPE ('=' | ':') expressionList=ConditionalExpressions ';';
		@Override public ParserRule getRule() { return rule; }
		
		//OPTION_DEF option=OPTION_TYPE ('=' | ':') expressionList=ConditionalExpressions ';'
		public Group getGroup() { return cGroup; }
		
		//OPTION_DEF
		public RuleCall getOPTION_DEFTerminalRuleCall_0() { return cOPTION_DEFTerminalRuleCall_0; }
		
		//option=OPTION_TYPE
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }
		
		//OPTION_TYPE
		public RuleCall getOptionOPTION_TYPEParserRuleCall_1_0() { return cOptionOPTION_TYPEParserRuleCall_1_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//expressionList=ConditionalExpressions
		public Assignment getExpressionListAssignment_3() { return cExpressionListAssignment_3; }
		
		//ConditionalExpressions
		public RuleCall getExpressionListConditionalExpressionsParserRuleCall_3_0() { return cExpressionListConditionalExpressionsParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PropertyArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.PropertyArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cARGS_STARTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsPropertyArgumentParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cARG_SEPTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsPropertyArgumentParserRuleCall_3_1_0 = (RuleCall)cArgumentsAssignment_3_1.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//PropertyArguments:
		//	{PropertyArguments} ARGS_START arguments+=PropertyArgument (ARG_SEP arguments+=PropertyArgument)* ARGS_END;
		@Override public ParserRule getRule() { return rule; }
		
		//{PropertyArguments} ARGS_START arguments+=PropertyArgument (ARG_SEP arguments+=PropertyArgument)* ARGS_END
		public Group getGroup() { return cGroup; }
		
		//{PropertyArguments}
		public Action getPropertyArgumentsAction_0() { return cPropertyArgumentsAction_0; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_1() { return cARGS_STARTTerminalRuleCall_1; }
		
		//arguments+=PropertyArgument
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//PropertyArgument
		public RuleCall getArgumentsPropertyArgumentParserRuleCall_2_0() { return cArgumentsPropertyArgumentParserRuleCall_2_0; }
		
		//(ARG_SEP arguments+=PropertyArgument)*
		public Group getGroup_3() { return cGroup_3; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_3_0() { return cARG_SEPTerminalRuleCall_3_0; }
		
		//arguments+=PropertyArgument
		public Assignment getArgumentsAssignment_3_1() { return cArgumentsAssignment_3_1; }
		
		//PropertyArgument
		public RuleCall getArgumentsPropertyArgumentParserRuleCall_3_1_0() { return cArgumentsPropertyArgumentParserRuleCall_3_1_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_4() { return cARGS_ENDTerminalRuleCall_4; }
	}
	public class PropertyArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.PropertyArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDirectionArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubTypeArgumentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDescriptionArgumentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCardinalityArgumentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLengthArgumentParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PropertyArgument:
		//	DirectionArgument | TypeArgument | SubTypeArgument | DescriptionArgument | CardinalityArgument | LengthArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//DirectionArgument | TypeArgument | SubTypeArgument | DescriptionArgument | CardinalityArgument | LengthArgument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DirectionArgument
		public RuleCall getDirectionArgumentParserRuleCall_0() { return cDirectionArgumentParserRuleCall_0; }
		
		//TypeArgument
		public RuleCall getTypeArgumentParserRuleCall_1() { return cTypeArgumentParserRuleCall_1; }
		
		//SubTypeArgument
		public RuleCall getSubTypeArgumentParserRuleCall_2() { return cSubTypeArgumentParserRuleCall_2; }
		
		//DescriptionArgument
		public RuleCall getDescriptionArgumentParserRuleCall_3() { return cDescriptionArgumentParserRuleCall_3; }
		
		//CardinalityArgument
		public RuleCall getCardinalityArgumentParserRuleCall_4() { return cCardinalityArgumentParserRuleCall_4; }
		
		//LengthArgument
		public RuleCall getLengthArgumentParserRuleCall_5() { return cLengthArgumentParserRuleCall_5; }
	}
	public class LengthArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.LengthArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLENGTH_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTEGERTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//LengthArgument:
		//	LENGTH_DEF ('=' | ':') value=INTEGER;
		@Override public ParserRule getRule() { return rule; }
		
		//LENGTH_DEF ('=' | ':') value=INTEGER
		public Group getGroup() { return cGroup; }
		
		//LENGTH_DEF
		public RuleCall getLENGTH_DEFTerminalRuleCall_0() { return cLENGTH_DEFTerminalRuleCall_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//value=INTEGER
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_2_0() { return cValueINTEGERTerminalRuleCall_2_0; }
	}
	public class DirectionArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.DirectionArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDIRECTION_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueIN_DEFTerminalRuleCall_2_0_0 = (RuleCall)cValueAlternatives_2_0.eContents().get(0);
		private final RuleCall cValueOUT_DEFTerminalRuleCall_2_0_1 = (RuleCall)cValueAlternatives_2_0.eContents().get(1);
		private final RuleCall cValueINOUT_DEFTerminalRuleCall_2_0_2 = (RuleCall)cValueAlternatives_2_0.eContents().get(2);
		
		//DirectionArgument:
		//	DIRECTION_DEF ('=' | ':') value=(IN_DEF | OUT_DEF | INOUT_DEF);
		@Override public ParserRule getRule() { return rule; }
		
		//DIRECTION_DEF ('=' | ':') value=(IN_DEF | OUT_DEF | INOUT_DEF)
		public Group getGroup() { return cGroup; }
		
		//DIRECTION_DEF
		public RuleCall getDIRECTION_DEFTerminalRuleCall_0() { return cDIRECTION_DEFTerminalRuleCall_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//value=(IN_DEF | OUT_DEF | INOUT_DEF)
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//(IN_DEF | OUT_DEF | INOUT_DEF)
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//IN_DEF
		public RuleCall getValueIN_DEFTerminalRuleCall_2_0_0() { return cValueIN_DEFTerminalRuleCall_2_0_0; }
		
		//OUT_DEF
		public RuleCall getValueOUT_DEFTerminalRuleCall_2_0_1() { return cValueOUT_DEFTerminalRuleCall_2_0_1; }
		
		//INOUT_DEF
		public RuleCall getValueINOUT_DEFTerminalRuleCall_2_0_2() { return cValueINOUT_DEFTerminalRuleCall_2_0_2; }
	}
	public class DescriptionArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.DescriptionArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDESCRIPTION_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLiteralOrExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DescriptionArgument:
		//	DESCRIPTION_DEF ('=' | ':') value=LiteralOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//DESCRIPTION_DEF ('=' | ':') value=LiteralOrExpression
		public Group getGroup() { return cGroup; }
		
		//DESCRIPTION_DEF
		public RuleCall getDESCRIPTION_DEFTerminalRuleCall_0() { return cDESCRIPTION_DEFTerminalRuleCall_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//value=LiteralOrExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//LiteralOrExpression
		public RuleCall getValueLiteralOrExpressionParserRuleCall_2_0() { return cValueLiteralOrExpressionParserRuleCall_2_0; }
	}
	public class CardinalityArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.CardinalityArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCARDINALITY_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValuePlusSignKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValue1Keyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		
		//CardinalityArgument:
		//	CARDINALITY_DEF ('=' | ':') value=('+' | '1');
		@Override public ParserRule getRule() { return rule; }
		
		//CARDINALITY_DEF ('=' | ':') value=('+' | '1')
		public Group getGroup() { return cGroup; }
		
		//CARDINALITY_DEF
		public RuleCall getCARDINALITY_DEFTerminalRuleCall_0() { return cCARDINALITY_DEFTerminalRuleCall_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//value=('+' | '1')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('+' | '1')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'+'
		public Keyword getValuePlusSignKeyword_2_0_0() { return cValuePlusSignKeyword_2_0_0; }
		
		//'1'
		public Keyword getValue1Keyword_2_0_1() { return cValue1Keyword_2_0_1; }
	}
	public class TypeArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.TypeArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTYPE_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePropertyTypeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//TypeArgument:
		//	TYPE_DEF ('=' | ':') value=PropertyType;
		@Override public ParserRule getRule() { return rule; }
		
		//TYPE_DEF ('=' | ':') value=PropertyType
		public Group getGroup() { return cGroup; }
		
		//TYPE_DEF
		public RuleCall getTYPE_DEFTerminalRuleCall_0() { return cTYPE_DEFTerminalRuleCall_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//value=PropertyType
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//PropertyType
		public RuleCall getValuePropertyTypeParserRuleCall_2_0() { return cValuePropertyTypeParserRuleCall_2_0; }
	}
	public class SubTypeArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SubTypeArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSUBTYPE_DEFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SubTypeArgument:
		//	SUBTYPE_DEF ('=' | ':') value=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//SUBTYPE_DEF ('=' | ':') value=IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//SUBTYPE_DEF
		public RuleCall getSUBTYPE_DEFTerminalRuleCall_0() { return cSUBTYPE_DEFTerminalRuleCall_0; }
		
		//('=' | ':')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//value=IDENTIFIER
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//IDENTIFIER
		public RuleCall getValueIDENTIFIERTerminalRuleCall_2_0() { return cValueIDENTIFIERTerminalRuleCall_2_0; }
	}
	public class ConditionalExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.ConditionalExpressions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConditionalExpressionsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cConditionalExpressionsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConditionalExpressionsConditionalExpressionParserRuleCall_0_1_0 = (RuleCall)cConditionalExpressionsAssignment_0_1.eContents().get(0);
		private final Keyword cElseKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cElseExpresssionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cElseExpresssionLiteralOrExpressionParserRuleCall_0_3_0 = (RuleCall)cElseExpresssionAssignment_0_3.eContents().get(0);
		private final Assignment cSingleExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSingleExpressionLiteralOrExpressionParserRuleCall_1_0 = (RuleCall)cSingleExpressionAssignment_1.eContents().get(0);
		
		//ConditionalExpressions:
		//	{ConditionalExpressions} conditionalExpressions+=ConditionalExpression+ 'else' elseExpresssion=LiteralOrExpression |
		//	singleExpression=LiteralOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionalExpressions} conditionalExpressions+=ConditionalExpression+ 'else' elseExpresssion=LiteralOrExpression |
		//singleExpression=LiteralOrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ConditionalExpressions} conditionalExpressions+=ConditionalExpression+ 'else' elseExpresssion=LiteralOrExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{ConditionalExpressions}
		public Action getConditionalExpressionsAction_0_0() { return cConditionalExpressionsAction_0_0; }
		
		//conditionalExpressions+=ConditionalExpression+
		public Assignment getConditionalExpressionsAssignment_0_1() { return cConditionalExpressionsAssignment_0_1; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionsConditionalExpressionParserRuleCall_0_1_0() { return cConditionalExpressionsConditionalExpressionParserRuleCall_0_1_0; }
		
		//'else'
		public Keyword getElseKeyword_0_2() { return cElseKeyword_0_2; }
		
		//elseExpresssion=LiteralOrExpression
		public Assignment getElseExpresssionAssignment_0_3() { return cElseExpresssionAssignment_0_3; }
		
		//LiteralOrExpression
		public RuleCall getElseExpresssionLiteralOrExpressionParserRuleCall_0_3_0() { return cElseExpresssionLiteralOrExpressionParserRuleCall_0_3_0; }
		
		//singleExpression=LiteralOrExpression
		public Assignment getSingleExpressionAssignment_1() { return cSingleExpressionAssignment_1; }
		
		//LiteralOrExpression
		public RuleCall getSingleExpressionLiteralOrExpressionParserRuleCall_1_0() { return cSingleExpressionLiteralOrExpressionParserRuleCall_1_0; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionLiteralOrExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//ConditionalExpression:
		//	'if' condition=Expression 'then' expression=LiteralOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=Expression 'then' expression=LiteralOrExpression
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//expression=LiteralOrExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//LiteralOrExpression
		public RuleCall getExpressionLiteralOrExpressionParserRuleCall_3_0() { return cExpressionLiteralOrExpressionParserRuleCall_3_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Expression");
		private final RuleCall cBooleanExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	BooleanExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall() { return cBooleanExpressionParserRuleCall; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAndOrExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpORKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpANDKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparisonParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BooleanExpression Expression:
		//	Comparison (({AndOrExpression.left=current} op=("OR" | "AND")) right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison (({AndOrExpression.left=current} op=("OR" | "AND")) right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//(({AndOrExpression.left=current} op=("OR" | "AND")) right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({AndOrExpression.left=current} op=("OR" | "AND"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{AndOrExpression.left=current}
		public Action getAndOrExpressionLeftAction_1_0_0() { return cAndOrExpressionLeftAction_1_0_0; }
		
		//op=("OR" | "AND")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("OR" | "AND")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"OR"
		public Keyword getOpORKeyword_1_0_1_0_0() { return cOpORKeyword_1_0_1_0_0; }
		
		//"AND"
		public Keyword getOpANDKeyword_1_0_1_0_1() { return cOpANDKeyword_1_0_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_1_0() { return cRightComparisonParserRuleCall_1_1_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cComparisonLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualsParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison Expression:
		//	Equals (({Comparison.left=current} op=("<" | ">" | "<=" | ">=")) right=Equals)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equals (({Comparison.left=current} op=("<" | ">" | "<=" | ">=")) right=Equals)*
		public Group getGroup() { return cGroup; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_0() { return cEqualsParserRuleCall_0; }
		
		//(({Comparison.left=current} op=("<" | ">" | "<=" | ">=")) right=Equals)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Comparison.left=current} op=("<" | ">" | "<=" | ">="))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_0() { return cComparisonLeftAction_1_0_0; }
		
		//op=("<" | ">" | "<=" | ">=")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("<" | ">" | "<=" | ">=")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_0_1_0_0() { return cOpLessThanSignKeyword_1_0_1_0_0; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_0_1_0_1() { return cOpGreaterThanSignKeyword_1_0_1_0_1; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_1_0_2() { return cOpLessThanSignEqualsSignKeyword_1_0_1_0_2; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3; }
		
		//right=Equals
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Equals
		public RuleCall getRightEqualsParserRuleCall_1_1_0() { return cRightEqualsParserRuleCall_1_1_0; }
	}
	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Equals Expression:
		//	Addition (({Equals.left=current} op=("==" | '!=')) right=Addition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition (({Equals.left=current} op=("==" | '!=')) right=Addition)*
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//(({Equals.left=current} op=("==" | '!=')) right=Addition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Equals.left=current} op=("==" | '!='))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0() { return cEqualsLeftAction_1_0_0; }
		
		//op=("==" | '!=')
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("==" | '!=')
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_0_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_0_1_0_1; }
		
		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition Expression:
		//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixedParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMultiOrDivLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixedParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication Expression:
		//	Prefixed (({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Prefixed (({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*
		public Group getGroup() { return cGroup; }
		
		//Prefixed
		public RuleCall getPrefixedParserRuleCall_0() { return cPrefixedParserRuleCall_0; }
		
		//(({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({MultiOrDiv.left=current} op=("*" | "/"))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MultiOrDiv.left=current}
		public Action getMultiOrDivLeftAction_1_0_0() { return cMultiOrDivLeftAction_1_0_0; }
		
		//op=("*" | "/")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//("*" | "/")
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }
		
		//"*"
		public Keyword getOpAsteriskKeyword_1_0_1_0_0() { return cOpAsteriskKeyword_1_0_1_0_0; }
		
		//"/"
		public Keyword getOpSolidusKeyword_1_0_1_0_1() { return cOpSolidusKeyword_1_0_1_0_1; }
		
		//right=Prefixed
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Prefixed
		public RuleCall getRightPrefixedParserRuleCall_1_1_0() { return cRightPrefixedParserRuleCall_1_1_0; }
	}
	public class PrefixedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Prefixed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanNegationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cArithmeticSignedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Prefixed Expression:
		//	{BooleanNegation} =>"!" expression=Atomic | {ArithmeticSigned} =>"-" expression=Atomic | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanNegation} =>"!" expression=Atomic | {ArithmeticSigned} =>"-" expression=Atomic | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanNegation} =>"!" expression=Atomic
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanNegation}
		public Action getBooleanNegationAction_0_0() { return cBooleanNegationAction_0_0; }
		
		//=>"!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }
		
		//expression=Atomic
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_0_2_0() { return cExpressionAtomicParserRuleCall_0_2_0; }
		
		//{ArithmeticSigned} =>"-" expression=Atomic
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticSigned}
		public Action getArithmeticSignedAction_1_0() { return cArithmeticSignedAction_1_0; }
		
		//=>"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//expression=Atomic
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_1_2_0() { return cExpressionAtomicParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cARGS_STARTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRING_LITERALTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final RuleCall cValueTRUETerminalRuleCall_3_1_0_0 = (RuleCall)cValueAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cValueFALSETerminalRuleCall_3_1_0_1 = (RuleCall)cValueAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cFunctionCallLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueFunctionIdentifierParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cMappableIdentifierLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueMappableIdentifierParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cTmlIdentifierLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cHasExistsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cHasExistsQuestionMarkKeyword_6_1_0 = (Keyword)cHasExistsAssignment_6_1.eContents().get(0);
		private final Assignment cValueAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cValueTmlIdentifierParserRuleCall_6_2_0 = (RuleCall)cValueAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cForAllLiteralAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValueForAllIdentifierParserRuleCall_7_1_0 = (RuleCall)cValueAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cNullLiteralAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cValueAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cValueNULL_DEFTerminalRuleCall_8_1_0 = (RuleCall)cValueAssignment_8_1.eContents().get(0);
		
		//Atomic Expression:
		//	{ExpressionLiteral} ARGS_START value=Expression ARGS_END | {NumberLiteral} value=INTEGER | {StringLiteral}
		//	value=STRING_LITERAL | {BooleanLiteral} value=(TRUE | FALSE) | {FunctionCallLiteral} value=FunctionIdentifier |
		//	{MappableIdentifierLiteral} value=MappableIdentifier | {TmlIdentifierLiteral} hasExists?='?'? value=TmlIdentifier |
		//	{ForAllLiteral} value=ForAllIdentifier | {NullLiteral} value=NULL_DEF;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExpressionLiteral} ARGS_START value=Expression ARGS_END | {NumberLiteral} value=INTEGER | {StringLiteral}
		//value=STRING_LITERAL | {BooleanLiteral} value=(TRUE | FALSE) | {FunctionCallLiteral} value=FunctionIdentifier |
		//{MappableIdentifierLiteral} value=MappableIdentifier | {TmlIdentifierLiteral} hasExists?='?'? value=TmlIdentifier |
		//{ForAllLiteral} value=ForAllIdentifier | {NullLiteral} value=NULL_DEF
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExpressionLiteral} ARGS_START value=Expression ARGS_END
		public Group getGroup_0() { return cGroup_0; }
		
		//{ExpressionLiteral}
		public Action getExpressionLiteralAction_0_0() { return cExpressionLiteralAction_0_0; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_0_1() { return cARGS_STARTTerminalRuleCall_0_1; }
		
		//value=Expression
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_2_0() { return cValueExpressionParserRuleCall_0_2_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_0_3() { return cARGS_ENDTerminalRuleCall_0_3; }
		
		//{NumberLiteral} value=INTEGER
		public Group getGroup_1() { return cGroup_1; }
		
		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }
		
		//value=INTEGER
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_1_1_0() { return cValueINTEGERTerminalRuleCall_1_1_0; }
		
		//{StringLiteral} value=STRING_LITERAL
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_2_0() { return cStringLiteralAction_2_0; }
		
		//value=STRING_LITERAL
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING_LITERAL
		public RuleCall getValueSTRING_LITERALTerminalRuleCall_2_1_0() { return cValueSTRING_LITERALTerminalRuleCall_2_1_0; }
		
		//{BooleanLiteral} value=(TRUE | FALSE)
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_3_0() { return cBooleanLiteralAction_3_0; }
		
		//value=(TRUE | FALSE)
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//(TRUE | FALSE)
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//TRUE
		public RuleCall getValueTRUETerminalRuleCall_3_1_0_0() { return cValueTRUETerminalRuleCall_3_1_0_0; }
		
		//FALSE
		public RuleCall getValueFALSETerminalRuleCall_3_1_0_1() { return cValueFALSETerminalRuleCall_3_1_0_1; }
		
		//{FunctionCallLiteral} value=FunctionIdentifier
		public Group getGroup_4() { return cGroup_4; }
		
		//{FunctionCallLiteral}
		public Action getFunctionCallLiteralAction_4_0() { return cFunctionCallLiteralAction_4_0; }
		
		//value=FunctionIdentifier
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//FunctionIdentifier
		public RuleCall getValueFunctionIdentifierParserRuleCall_4_1_0() { return cValueFunctionIdentifierParserRuleCall_4_1_0; }
		
		//{MappableIdentifierLiteral} value=MappableIdentifier
		public Group getGroup_5() { return cGroup_5; }
		
		//{MappableIdentifierLiteral}
		public Action getMappableIdentifierLiteralAction_5_0() { return cMappableIdentifierLiteralAction_5_0; }
		
		//value=MappableIdentifier
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//MappableIdentifier
		public RuleCall getValueMappableIdentifierParserRuleCall_5_1_0() { return cValueMappableIdentifierParserRuleCall_5_1_0; }
		
		//{TmlIdentifierLiteral} hasExists?='?'? value=TmlIdentifier
		public Group getGroup_6() { return cGroup_6; }
		
		//{TmlIdentifierLiteral}
		public Action getTmlIdentifierLiteralAction_6_0() { return cTmlIdentifierLiteralAction_6_0; }
		
		//hasExists?='?'?
		public Assignment getHasExistsAssignment_6_1() { return cHasExistsAssignment_6_1; }
		
		//'?'
		public Keyword getHasExistsQuestionMarkKeyword_6_1_0() { return cHasExistsQuestionMarkKeyword_6_1_0; }
		
		//value=TmlIdentifier
		public Assignment getValueAssignment_6_2() { return cValueAssignment_6_2; }
		
		//TmlIdentifier
		public RuleCall getValueTmlIdentifierParserRuleCall_6_2_0() { return cValueTmlIdentifierParserRuleCall_6_2_0; }
		
		//{ForAllLiteral} value=ForAllIdentifier
		public Group getGroup_7() { return cGroup_7; }
		
		//{ForAllLiteral}
		public Action getForAllLiteralAction_7_0() { return cForAllLiteralAction_7_0; }
		
		//value=ForAllIdentifier
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }
		
		//ForAllIdentifier
		public RuleCall getValueForAllIdentifierParserRuleCall_7_1_0() { return cValueForAllIdentifierParserRuleCall_7_1_0; }
		
		//{NullLiteral} value=NULL_DEF
		public Group getGroup_8() { return cGroup_8; }
		
		//{NullLiteral}
		public Action getNullLiteralAction_8_0() { return cNullLiteralAction_8_0; }
		
		//value=NULL_DEF
		public Assignment getValueAssignment_8_1() { return cValueAssignment_8_1; }
		
		//NULL_DEF
		public RuleCall getValueNULL_DEFTerminalRuleCall_8_1_0() { return cValueNULL_DEFTerminalRuleCall_8_1_0; }
	}
	public class ForAllIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.ForAllIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForAllIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final RuleCall cOpFORALLTerminalRuleCall_1_0_0 = (RuleCall)cOpAlternatives_1_0.eContents().get(0);
		private final RuleCall cOpEXISTSTerminalRuleCall_1_0_1 = (RuleCall)cOpAlternatives_1_0.eContents().get(1);
		private final RuleCall cARGS_STARTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cGraveAccentKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cGraveAccentKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cARG_SEPTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cMessagedefinitionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMessagedefinitionSTRING_LITERALTerminalRuleCall_7_0 = (RuleCall)cMessagedefinitionAssignment_7.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//ForAllIdentifier:
		//	{ForAllIdentifier} op=(FORALL | EXISTS) ARGS_START "`" expression=Expression "`" ARG_SEP
		//	messagedefinition=STRING_LITERAL ARGS_END;
		@Override public ParserRule getRule() { return rule; }
		
		//{ForAllIdentifier} op=(FORALL | EXISTS) ARGS_START "`" expression=Expression "`" ARG_SEP
		//messagedefinition=STRING_LITERAL ARGS_END
		public Group getGroup() { return cGroup; }
		
		//{ForAllIdentifier}
		public Action getForAllIdentifierAction_0() { return cForAllIdentifierAction_0; }
		
		//op=(FORALL | EXISTS)
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//(FORALL | EXISTS)
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//FORALL
		public RuleCall getOpFORALLTerminalRuleCall_1_0_0() { return cOpFORALLTerminalRuleCall_1_0_0; }
		
		//EXISTS
		public RuleCall getOpEXISTSTerminalRuleCall_1_0_1() { return cOpEXISTSTerminalRuleCall_1_0_1; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_2() { return cARGS_STARTTerminalRuleCall_2; }
		
		//"`"
		public Keyword getGraveAccentKeyword_3() { return cGraveAccentKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//"`"
		public Keyword getGraveAccentKeyword_5() { return cGraveAccentKeyword_5; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_6() { return cARG_SEPTerminalRuleCall_6; }
		
		//messagedefinition=STRING_LITERAL
		public Assignment getMessagedefinitionAssignment_7() { return cMessagedefinitionAssignment_7; }
		
		//STRING_LITERAL
		public RuleCall getMessagedefinitionSTRING_LITERALTerminalRuleCall_7_0() { return cMessagedefinitionSTRING_LITERALTerminalRuleCall_7_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_8() { return cARGS_ENDTerminalRuleCall_8; }
	}
	public class FunctionIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.FunctionIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFuncIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cFuncAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cARGS_STARTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cArgsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_0_0 = (RuleCall)cArgsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final RuleCall cARG_SEPTerminalRuleCall_2_1_1_0 = (RuleCall)cGroup_2_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cArgsAssignment_2_1_1_1.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//FunctionIdentifier:
		//	{FunctionIdentifier} func=IDENTIFIER (ARGS_START (args+=Expression (ARG_SEP args+=Expression)*)? ARGS_END);
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionIdentifier} func=IDENTIFIER (ARGS_START (args+=Expression (ARG_SEP args+=Expression)*)? ARGS_END)
		public Group getGroup() { return cGroup; }
		
		//{FunctionIdentifier}
		public Action getFunctionIdentifierAction_0() { return cFunctionIdentifierAction_0; }
		
		//func=IDENTIFIER
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }
		
		//IDENTIFIER
		public RuleCall getFuncIDENTIFIERTerminalRuleCall_1_0() { return cFuncIDENTIFIERTerminalRuleCall_1_0; }
		
		//(ARGS_START (args+=Expression (ARG_SEP args+=Expression)*)? ARGS_END)
		public Group getGroup_2() { return cGroup_2; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_2_0() { return cARGS_STARTTerminalRuleCall_2_0; }
		
		//(args+=Expression (ARG_SEP args+=Expression)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_1_0() { return cArgsAssignment_2_1_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_0_0() { return cArgsExpressionParserRuleCall_2_1_0_0; }
		
		//(ARG_SEP args+=Expression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_2_1_1_0() { return cARG_SEPTerminalRuleCall_2_1_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_1_1_1() { return cArgsAssignment_2_1_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_1_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_2_2() { return cARGS_ENDTerminalRuleCall_2_2; }
	}
	public class MappableIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MappableIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappableIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldMAPPABLE_IDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cARGS_STARTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cArgsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_0_0 = (RuleCall)cArgsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final RuleCall cARG_SEPTerminalRuleCall_2_1_1_0 = (RuleCall)cGroup_2_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cArgsAssignment_2_1_1_1.eContents().get(0);
		private final RuleCall cARGS_ENDTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//MappableIdentifier:
		//	{MappableIdentifier} field=MAPPABLE_IDENTIFIER (ARGS_START (args+=Expression (ARG_SEP args+=Expression)*)? ARGS_END)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{MappableIdentifier} field=MAPPABLE_IDENTIFIER (ARGS_START (args+=Expression (ARG_SEP args+=Expression)*)? ARGS_END)?
		public Group getGroup() { return cGroup; }
		
		//{MappableIdentifier}
		public Action getMappableIdentifierAction_0() { return cMappableIdentifierAction_0; }
		
		//field=MAPPABLE_IDENTIFIER
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//MAPPABLE_IDENTIFIER
		public RuleCall getFieldMAPPABLE_IDENTIFIERTerminalRuleCall_1_0() { return cFieldMAPPABLE_IDENTIFIERTerminalRuleCall_1_0; }
		
		//(ARGS_START (args+=Expression (ARG_SEP args+=Expression)*)? ARGS_END)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ARGS_START
		public RuleCall getARGS_STARTTerminalRuleCall_2_0() { return cARGS_STARTTerminalRuleCall_2_0; }
		
		//(args+=Expression (ARG_SEP args+=Expression)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_1_0() { return cArgsAssignment_2_1_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_0_0() { return cArgsExpressionParserRuleCall_2_1_0_0; }
		
		//(ARG_SEP args+=Expression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//ARG_SEP
		public RuleCall getARG_SEPTerminalRuleCall_2_1_1_0() { return cARG_SEPTerminalRuleCall_2_1_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_1_1_1() { return cArgsAssignment_2_1_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_1_0; }
		
		//ARGS_END
		public RuleCall getARGS_ENDTerminalRuleCall_2_2() { return cARGS_ENDTerminalRuleCall_2_2; }
	}
	public class TmlIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.TmlIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTmlIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTmlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTmlTML_LITERALTerminalRuleCall_1_0 = (RuleCall)cTmlAssignment_1.eContents().get(0);
		
		//TmlIdentifier:
		//	{TmlIdentifier} tml=TML_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//{TmlIdentifier} tml=TML_LITERAL
		public Group getGroup() { return cGroup; }
		
		//{TmlIdentifier}
		public Action getTmlIdentifierAction_0() { return cTmlIdentifierAction_0; }
		
		//tml=TML_LITERAL
		public Assignment getTmlAssignment_1() { return cTmlAssignment_1; }
		
		//TML_LITERAL
		public RuleCall getTmlTML_LITERALTerminalRuleCall_1_0() { return cTmlTML_LITERALTerminalRuleCall_1_0; }
	}
	public class PropertyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.PropertyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIntegerKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cStringKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBooleanKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDateTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cDateKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cFloatTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cFloatKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cBinaryTypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cBinaryKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cClockTimeTypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cClocktimeKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cMemoTypeAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cMemoKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cTimestampTypeAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cTimestampKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cPercentageTypeAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cPercentageKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cSelectionTypeAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cSelectionKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		
		//PropertyType:
		//	{IntType} 'integer' | {StringType} 'string' | {BooleanType} 'boolean' | {DateType} 'date' | {FloatType} 'float' |
		//	{BinaryType} 'binary' | {ClockTimeType} 'clocktime' | {MemoType} 'memo' | {TimestampType} 'timestamp' |
		//	{PercentageType} 'percentage' | {SelectionType} 'selection';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntType} 'integer' | {StringType} 'string' | {BooleanType} 'boolean' | {DateType} 'date' | {FloatType} 'float' |
		//{BinaryType} 'binary' | {ClockTimeType} 'clocktime' | {MemoType} 'memo' | {TimestampType} 'timestamp' | {PercentageType}
		//'percentage' | {SelectionType} 'selection'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntType} 'integer'
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }
		
		//'integer'
		public Keyword getIntegerKeyword_0_1() { return cIntegerKeyword_0_1; }
		
		//{StringType} 'string'
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringType}
		public Action getStringTypeAction_1_0() { return cStringTypeAction_1_0; }
		
		//'string'
		public Keyword getStringKeyword_1_1() { return cStringKeyword_1_1; }
		
		//{BooleanType} 'boolean'
		public Group getGroup_2() { return cGroup_2; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_2_0() { return cBooleanTypeAction_2_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_2_1() { return cBooleanKeyword_2_1; }
		
		//{DateType} 'date'
		public Group getGroup_3() { return cGroup_3; }
		
		//{DateType}
		public Action getDateTypeAction_3_0() { return cDateTypeAction_3_0; }
		
		//'date'
		public Keyword getDateKeyword_3_1() { return cDateKeyword_3_1; }
		
		//{FloatType} 'float'
		public Group getGroup_4() { return cGroup_4; }
		
		//{FloatType}
		public Action getFloatTypeAction_4_0() { return cFloatTypeAction_4_0; }
		
		//'float'
		public Keyword getFloatKeyword_4_1() { return cFloatKeyword_4_1; }
		
		//{BinaryType} 'binary'
		public Group getGroup_5() { return cGroup_5; }
		
		//{BinaryType}
		public Action getBinaryTypeAction_5_0() { return cBinaryTypeAction_5_0; }
		
		//'binary'
		public Keyword getBinaryKeyword_5_1() { return cBinaryKeyword_5_1; }
		
		//{ClockTimeType} 'clocktime'
		public Group getGroup_6() { return cGroup_6; }
		
		//{ClockTimeType}
		public Action getClockTimeTypeAction_6_0() { return cClockTimeTypeAction_6_0; }
		
		//'clocktime'
		public Keyword getClocktimeKeyword_6_1() { return cClocktimeKeyword_6_1; }
		
		//{MemoType} 'memo'
		public Group getGroup_7() { return cGroup_7; }
		
		//{MemoType}
		public Action getMemoTypeAction_7_0() { return cMemoTypeAction_7_0; }
		
		//'memo'
		public Keyword getMemoKeyword_7_1() { return cMemoKeyword_7_1; }
		
		//{TimestampType} 'timestamp'
		public Group getGroup_8() { return cGroup_8; }
		
		//{TimestampType}
		public Action getTimestampTypeAction_8_0() { return cTimestampTypeAction_8_0; }
		
		//'timestamp'
		public Keyword getTimestampKeyword_8_1() { return cTimestampKeyword_8_1; }
		
		//{PercentageType} 'percentage'
		public Group getGroup_9() { return cGroup_9; }
		
		//{PercentageType}
		public Action getPercentageTypeAction_9_0() { return cPercentageTypeAction_9_0; }
		
		//'percentage'
		public Keyword getPercentageKeyword_9_1() { return cPercentageKeyword_9_1; }
		
		//{SelectionType} 'selection'
		public Group getGroup_10() { return cGroup_10; }
		
		//{SelectionType}
		public Action getSelectionTypeAction_10_0() { return cSelectionTypeAction_10_0; }
		
		//'selection'
		public Keyword getSelectionKeyword_10_1() { return cSelectionKeyword_10_1; }
	}
	public class OPTION_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.OPTION_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSelectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OPTION_TYPE:
		//	'name' | 'value' | 'selected';
		@Override public ParserRule getRule() { return rule; }
		
		//'name' | 'value' | 'selected'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//'value'
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }
		
		//'selected'
		public Keyword getSelectedKeyword_2() { return cSelectedKeyword_2; }
	}
	public class MessageTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MessageType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cArrayTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cArrayKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSimpleTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSimpleKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cArrayElementTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cArrayelementKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//MessageType:
		//	{ArrayType} "array" | {SimpleType} "simple" | {ArrayElementType} "arrayelement";
		@Override public ParserRule getRule() { return rule; }
		
		//{ArrayType} "array" | {SimpleType} "simple" | {ArrayElementType} "arrayelement"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ArrayType} "array"
		public Group getGroup_0() { return cGroup_0; }
		
		//{ArrayType}
		public Action getArrayTypeAction_0_0() { return cArrayTypeAction_0_0; }
		
		//"array"
		public Keyword getArrayKeyword_0_1() { return cArrayKeyword_0_1; }
		
		//{SimpleType} "simple"
		public Group getGroup_1() { return cGroup_1; }
		
		//{SimpleType}
		public Action getSimpleTypeAction_1_0() { return cSimpleTypeAction_1_0; }
		
		//"simple"
		public Keyword getSimpleKeyword_1_1() { return cSimpleKeyword_1_1; }
		
		//{ArrayElementType} "arrayelement"
		public Group getGroup_2() { return cGroup_2; }
		
		//{ArrayElementType}
		public Action getArrayElementTypeAction_2_0() { return cArrayElementTypeAction_2_0; }
		
		//"arrayelement"
		public Keyword getArrayelementKeyword_2_1() { return cArrayelementKeyword_2_1; }
	}
	public class MessageModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MessageMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIgnoreAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIgnoreKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOverwriteAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOverwriteKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//MessageMode:
		//	{Ignore} "ignore" | {Overwrite} "overwrite";
		@Override public ParserRule getRule() { return rule; }
		
		//{Ignore} "ignore" | {Overwrite} "overwrite"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Ignore} "ignore"
		public Group getGroup_0() { return cGroup_0; }
		
		//{Ignore}
		public Action getIgnoreAction_0_0() { return cIgnoreAction_0_0; }
		
		//"ignore"
		public Keyword getIgnoreKeyword_0_1() { return cIgnoreKeyword_0_1; }
		
		//{Overwrite} "overwrite"
		public Group getGroup_1() { return cGroup_1; }
		
		//{Overwrite}
		public Action getOverwriteAction_1_0() { return cOverwriteAction_1_0; }
		
		//"overwrite"
		public Keyword getOverwriteKeyword_1_1() { return cOverwriteKeyword_1_1; }
	}
	
	
	private final NavascriptElements pNavascript;
	private final TopLevelStatementsElements pTopLevelStatements;
	private final TopLevelStatementElements pTopLevelStatement;
	private final InnerBodyElements pInnerBody;
	private final BlockStatementsElements pBlockStatements;
	private final SynchronizedElements pSynchronized;
	private final SynchronizedArgumentsElements pSynchronizedArguments;
	private final SynchronizedArgumentElements pSynchronizedArgument;
	private final SContextElements pSContext;
	private final SKeyElements pSKey;
	private final STimeoutElements pSTimeout;
	private final SBreakOnNoLockElements pSBreakOnNoLock;
	private final SContextTypeElements pSContextType;
	private final BreakElements pBreak;
	private final BreakParameterElements pBreakParameter;
	private final BreakParametersElements pBreakParameters;
	private final ValidationsElements pValidations;
	private final DefineElements pDefine;
	private final CheckElements pCheck;
	private final CheckAttributeElements pCheckAttribute;
	private final LiteralOrExpressionElements pLiteralOrExpression;
	private final PrintElements pPrint;
	private final LogElements pLog;
	private final FinallyElements pFinally;
	private final MethodsElements pMethods;
	private final MethodElements pMethod;
	private final LoopElements pLoop;
	private final IncludeElements pInclude;
	private final AntiMessageElements pAntiMessage;
	private final MessageElements pMessage;
	private final MessageArrayElements pMessageArray;
	private final MessageArrayElementElements pMessageArrayElement;
	private final MessageArgumentElements pMessageArgument;
	private final MessageArgumentsElements pMessageArguments;
	private final MapElements pMap;
	private final MethodOrSetterElements pMethodOrSetter;
	private final AdapterMethodElements pAdapterMethod;
	private final SetterFieldElements pSetterField;
	private final MappedArrayFieldElements pMappedArrayField;
	private final MappedArrayMessageElements pMappedArrayMessage;
	private final KeyValueArgumentsElements pKeyValueArguments;
	private final KeyValueArgumentElements pKeyValueArgument;
	private final VarElements pVar;
	private final VarArrayElements pVarArray;
	private final VarArrayElementElements pVarArrayElement;
	private final VarElementElements pVarElement;
	private final VarArgumentsElements pVarArguments;
	private final VarArgumentElements pVarArgument;
	private final VarTypeElements pVarType;
	private final VarModeElements pVarMode;
	private final PropertyElements pProperty;
	private final SelectionArrayElements pSelectionArray;
	private final SelectionArrayElementElements pSelectionArrayElement;
	private final OptionElements pOption;
	private final PropertyArgumentsElements pPropertyArguments;
	private final PropertyArgumentElements pPropertyArgument;
	private final LengthArgumentElements pLengthArgument;
	private final DirectionArgumentElements pDirectionArgument;
	private final DescriptionArgumentElements pDescriptionArgument;
	private final CardinalityArgumentElements pCardinalityArgument;
	private final TypeArgumentElements pTypeArgument;
	private final SubTypeArgumentElements pSubTypeArgument;
	private final ConditionalExpressionsElements pConditionalExpressions;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ExpressionElements pExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final ComparisonElements pComparison;
	private final EqualsElements pEquals;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrefixedElements pPrefixed;
	private final AtomicElements pAtomic;
	private final ForAllIdentifierElements pForAllIdentifier;
	private final FunctionIdentifierElements pFunctionIdentifier;
	private final MappableIdentifierElements pMappableIdentifier;
	private final TmlIdentifierElements pTmlIdentifier;
	private final PropertyTypeElements pPropertyType;
	private final OPTION_TYPEElements pOPTION_TYPE;
	private final MessageTypeElements pMessageType;
	private final MessageModeElements pMessageMode;
	private final TerminalRule tMETHOD_IDENTIFIER;
	private final TerminalRule tMAPPABLE_IDENTIFIER;
	private final TerminalRule tSTRING_LITERAL;
	private final TerminalRule tARG_SEP;
	private final TerminalRule tFORALL;
	private final TerminalRule tEXISTS;
	private final TerminalRule tTRUE;
	private final TerminalRule tFALSE;
	private final TerminalRule tMAPPABLE_ID;
	private final TerminalRule tARGS_START;
	private final TerminalRule tARGS_END;
	private final TerminalRule tNULL_DEF;
	private final TerminalRule tPRINT_DEF;
	private final TerminalRule tLOG_DEF;
	private final TerminalRule tFINALLY_DEF;
	private final TerminalRule tDEFINE_DEF;
	private final TerminalRule tFILTER_DEF;
	private final TerminalRule tSYNCHRONIZED_DEF;
	private final TerminalRule tLOOP_DEF;
	private final TerminalRule tMETHODS_DEF;
	private final TerminalRule tCODE_DEF;
	private final TerminalRule tVALIDATIONS_DEF;
	private final TerminalRule tCHECK_DEF;
	private final TerminalRule tINCLUDE_DEF;
	private final TerminalRule tINOUT_DEF;
	private final TerminalRule tIN_DEF;
	private final TerminalRule tOUT_DEF;
	private final TerminalRule tDESCRIPTION_DEF;
	private final TerminalRule tTYPE_DEF;
	private final TerminalRule tSUBTYPE_DEF;
	private final TerminalRule tMODE_DEF;
	private final TerminalRule tDIRECTION_DEF;
	private final TerminalRule tLENGTH_DEF;
	private final TerminalRule tCARDINALITY_DEF;
	private final TerminalRule tMESSAGE_DEF;
	private final TerminalRule tPROPERTY_DEF;
	private final TerminalRule tVAR_DEF;
	private final TerminalRule tOPTION_DEF;
	private final TerminalRule tMAP_DEF;
	private final TerminalRule tMAP_OLDSKOOL_DEF;
	private final TerminalRule tOBJECT_OLDSKOOL_DEF;
	private final TerminalRule tBREAK_DEF;
	private final TerminalRule tERROR_DEF;
	private final TerminalRule tANTIMESSAGE_DEF;
	private final TerminalRule tCONTEXT_DEF;
	private final TerminalRule tKEY_DEF;
	private final TerminalRule tTIMEOUT_DEF;
	private final TerminalRule tBREAKONNOLOCK_DEF;
	private final TerminalRule tOBJECT_IDENTIFIER;
	private final TerminalRule tQUOTED_IDENTIFIER;
	private final TerminalRule tSTRING_CONSTANT;
	private final TerminalRule tTML_LITERAL;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tINTEGER;
	private final TerminalRule tLETTER;
	private final TerminalRule tDIGIT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tCHARACTER;
	
	private final Grammar grammar;

	@Inject
	public NavascriptGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pNavascript = new NavascriptElements();
		this.pTopLevelStatements = new TopLevelStatementsElements();
		this.pTopLevelStatement = new TopLevelStatementElements();
		this.pInnerBody = new InnerBodyElements();
		this.pBlockStatements = new BlockStatementsElements();
		this.pSynchronized = new SynchronizedElements();
		this.pSynchronizedArguments = new SynchronizedArgumentsElements();
		this.pSynchronizedArgument = new SynchronizedArgumentElements();
		this.pSContext = new SContextElements();
		this.pSKey = new SKeyElements();
		this.pSTimeout = new STimeoutElements();
		this.pSBreakOnNoLock = new SBreakOnNoLockElements();
		this.pSContextType = new SContextTypeElements();
		this.pBreak = new BreakElements();
		this.pBreakParameter = new BreakParameterElements();
		this.pBreakParameters = new BreakParametersElements();
		this.pValidations = new ValidationsElements();
		this.pDefine = new DefineElements();
		this.pCheck = new CheckElements();
		this.pCheckAttribute = new CheckAttributeElements();
		this.pLiteralOrExpression = new LiteralOrExpressionElements();
		this.pPrint = new PrintElements();
		this.pLog = new LogElements();
		this.pFinally = new FinallyElements();
		this.pMethods = new MethodsElements();
		this.pMethod = new MethodElements();
		this.pLoop = new LoopElements();
		this.pInclude = new IncludeElements();
		this.pAntiMessage = new AntiMessageElements();
		this.pMessage = new MessageElements();
		this.pMessageArray = new MessageArrayElements();
		this.pMessageArrayElement = new MessageArrayElementElements();
		this.pMessageArgument = new MessageArgumentElements();
		this.pMessageArguments = new MessageArgumentsElements();
		this.pMap = new MapElements();
		this.pMethodOrSetter = new MethodOrSetterElements();
		this.pAdapterMethod = new AdapterMethodElements();
		this.pSetterField = new SetterFieldElements();
		this.pMappedArrayField = new MappedArrayFieldElements();
		this.pMappedArrayMessage = new MappedArrayMessageElements();
		this.pKeyValueArguments = new KeyValueArgumentsElements();
		this.pKeyValueArgument = new KeyValueArgumentElements();
		this.pVar = new VarElements();
		this.pVarArray = new VarArrayElements();
		this.pVarArrayElement = new VarArrayElementElements();
		this.pVarElement = new VarElementElements();
		this.pVarArguments = new VarArgumentsElements();
		this.pVarArgument = new VarArgumentElements();
		this.pVarType = new VarTypeElements();
		this.pVarMode = new VarModeElements();
		this.pProperty = new PropertyElements();
		this.pSelectionArray = new SelectionArrayElements();
		this.pSelectionArrayElement = new SelectionArrayElementElements();
		this.pOption = new OptionElements();
		this.pPropertyArguments = new PropertyArgumentsElements();
		this.pPropertyArgument = new PropertyArgumentElements();
		this.pLengthArgument = new LengthArgumentElements();
		this.pDirectionArgument = new DirectionArgumentElements();
		this.pDescriptionArgument = new DescriptionArgumentElements();
		this.pCardinalityArgument = new CardinalityArgumentElements();
		this.pTypeArgument = new TypeArgumentElements();
		this.pSubTypeArgument = new SubTypeArgumentElements();
		this.pConditionalExpressions = new ConditionalExpressionsElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pComparison = new ComparisonElements();
		this.pEquals = new EqualsElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrefixed = new PrefixedElements();
		this.pAtomic = new AtomicElements();
		this.pForAllIdentifier = new ForAllIdentifierElements();
		this.pFunctionIdentifier = new FunctionIdentifierElements();
		this.pMappableIdentifier = new MappableIdentifierElements();
		this.pTmlIdentifier = new TmlIdentifierElements();
		this.pPropertyType = new PropertyTypeElements();
		this.pOPTION_TYPE = new OPTION_TYPEElements();
		this.pMessageType = new MessageTypeElements();
		this.pMessageMode = new MessageModeElements();
		this.tMETHOD_IDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.METHOD_IDENTIFIER");
		this.tMAPPABLE_IDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MAPPABLE_IDENTIFIER");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.STRING_LITERAL");
		this.tARG_SEP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.ARG_SEP");
		this.tFORALL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.FORALL");
		this.tEXISTS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.EXISTS");
		this.tTRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.TRUE");
		this.tFALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.FALSE");
		this.tMAPPABLE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MAPPABLE_ID");
		this.tARGS_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.ARGS_START");
		this.tARGS_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.ARGS_END");
		this.tNULL_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.NULL_DEF");
		this.tPRINT_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.PRINT_DEF");
		this.tLOG_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.LOG_DEF");
		this.tFINALLY_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.FINALLY_DEF");
		this.tDEFINE_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.DEFINE_DEF");
		this.tFILTER_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.FILTER_DEF");
		this.tSYNCHRONIZED_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SYNCHRONIZED_DEF");
		this.tLOOP_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.LOOP_DEF");
		this.tMETHODS_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.METHODS_DEF");
		this.tCODE_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.CODE_DEF");
		this.tVALIDATIONS_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.VALIDATIONS_DEF");
		this.tCHECK_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.CHECK_DEF");
		this.tINCLUDE_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.INCLUDE_DEF");
		this.tINOUT_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.INOUT_DEF");
		this.tIN_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.IN_DEF");
		this.tOUT_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.OUT_DEF");
		this.tDESCRIPTION_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.DESCRIPTION_DEF");
		this.tTYPE_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.TYPE_DEF");
		this.tSUBTYPE_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SUBTYPE_DEF");
		this.tMODE_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MODE_DEF");
		this.tDIRECTION_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.DIRECTION_DEF");
		this.tLENGTH_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.LENGTH_DEF");
		this.tCARDINALITY_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.CARDINALITY_DEF");
		this.tMESSAGE_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MESSAGE_DEF");
		this.tPROPERTY_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.PROPERTY_DEF");
		this.tVAR_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.VAR_DEF");
		this.tOPTION_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.OPTION_DEF");
		this.tMAP_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MAP_DEF");
		this.tMAP_OLDSKOOL_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.MAP_OLDSKOOL_DEF");
		this.tOBJECT_OLDSKOOL_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.OBJECT_OLDSKOOL_DEF");
		this.tBREAK_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.BREAK_DEF");
		this.tERROR_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.ERROR_DEF");
		this.tANTIMESSAGE_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.ANTIMESSAGE_DEF");
		this.tCONTEXT_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.CONTEXT_DEF");
		this.tKEY_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.KEY_DEF");
		this.tTIMEOUT_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.TIMEOUT_DEF");
		this.tBREAKONNOLOCK_DEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.BREAKONNOLOCK_DEF");
		this.tOBJECT_IDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.OBJECT_IDENTIFIER");
		this.tQUOTED_IDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.QUOTED_IDENTIFIER");
		this.tSTRING_CONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.STRING_CONSTANT");
		this.tTML_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.TML_LITERAL");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.IDENTIFIER");
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.INTEGER");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.LETTER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.DIGIT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.WS");
		this.tCHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dexels.navajo.Navascript.CHARACTER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.dexels.navajo.Navascript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Navascript:
	//	{Navascript} validations=Validations? toplevelStatements=TopLevelStatements finally=Finally?;
	public NavascriptElements getNavascriptAccess() {
		return pNavascript;
	}
	
	public ParserRule getNavascriptRule() {
		return getNavascriptAccess().getRule();
	}
	
	//// TopLevelStatement ::= Include | Message | Var | Break | Map | AntiMessage | Define | ConditionalEmptyMessage | Synchronized | Print | Log | Loop | Methods
	//TopLevelStatements:
	//	{TopLevelStatements} statements+=TopLevelStatement*;
	public TopLevelStatementsElements getTopLevelStatementsAccess() {
		return pTopLevelStatements;
	}
	
	public ParserRule getTopLevelStatementsRule() {
		return getTopLevelStatementsAccess().getRule();
	}
	
	//TopLevelStatement:
	//	{TopLevelStatement} ('if' condition=Expression 'then')?
	//	statement=(Message | Var | Map | AntiMessage | Define | Print | Log | Loop | Methods | Include | Break |
	//	Synchronized | BlockStatements);
	public TopLevelStatementElements getTopLevelStatementAccess() {
		return pTopLevelStatement;
	}
	
	public ParserRule getTopLevelStatementRule() {
		return getTopLevelStatementAccess().getRule();
	}
	
	//InnerBody:
	//	{InnerBody} ('if' condition=Expression 'then')?
	//	statement=(Property | Option | MethodOrSetter | Message | AntiMessage | Include | Methods | Var | Print | Log |
	//	Define | Loop | Map | Break | BlockStatements);
	public InnerBodyElements getInnerBodyAccess() {
		return pInnerBody;
	}
	
	public ParserRule getInnerBodyRule() {
		return getInnerBodyAccess().getRule();
	}
	
	///*
	// * if EXPRESSION THEN { [STATEMENTS }
	// */
	//BlockStatements:
	//	{BlockStatements} '{' statements+=InnerBody* '}';
	public BlockStatementsElements getBlockStatementsAccess() {
		return pBlockStatements;
	}
	
	public ParserRule getBlockStatementsRule() {
		return getBlockStatementsAccess().getRule();
	}
	
	///*
	// * synchronized() {
	// * 
	// * }
	// */
	//Synchronized:
	//	SYNCHRONIZED_DEF ARGS_START arguments=SynchronizedArguments ARGS_END '{' statements+=TopLevelStatement* '}';
	public SynchronizedElements getSynchronizedAccess() {
		return pSynchronized;
	}
	
	public ParserRule getSynchronizedRule() {
		return getSynchronizedAccess().getRule();
	}
	
	//SynchronizedArguments:
	//	arguments+=SynchronizedArgument (ARG_SEP arguments+=SynchronizedArgument)*;
	public SynchronizedArgumentsElements getSynchronizedArgumentsAccess() {
		return pSynchronizedArguments;
	}
	
	public ParserRule getSynchronizedArgumentsRule() {
		return getSynchronizedArgumentsAccess().getRule();
	}
	
	//SynchronizedArgument:
	//	{SynchronizedArgument} SContext | SKey | STimeout | SBreakOnNoLock;
	public SynchronizedArgumentElements getSynchronizedArgumentAccess() {
		return pSynchronizedArgument;
	}
	
	public ParserRule getSynchronizedArgumentRule() {
		return getSynchronizedArgumentAccess().getRule();
	}
	
	//SContext:
	//	CONTEXT_DEF ('=' | ':') SContextType;
	public SContextElements getSContextAccess() {
		return pSContext;
	}
	
	public ParserRule getSContextRule() {
		return getSContextAccess().getRule();
	}
	
	//SKey:
	//	KEY_DEF LiteralOrExpression;
	public SKeyElements getSKeyAccess() {
		return pSKey;
	}
	
	public ParserRule getSKeyRule() {
		return getSKeyAccess().getRule();
	}
	
	//STimeout:
	//	TIMEOUT_DEF ('=' | ':') Expression;
	public STimeoutElements getSTimeoutAccess() {
		return pSTimeout;
	}
	
	public ParserRule getSTimeoutRule() {
		return getSTimeoutAccess().getRule();
	}
	
	//SBreakOnNoLock:
	//	BREAKONNOLOCK_DEF ('=' | ':') Expression;
	public SBreakOnNoLockElements getSBreakOnNoLockAccess() {
		return pSBreakOnNoLock;
	}
	
	public ParserRule getSBreakOnNoLockRule() {
		return getSBreakOnNoLockAccess().getRule();
	}
	
	//SContextType:
	//	"user" | "service";
	public SContextTypeElements getSContextTypeAccess() {
		return pSContextType;
	}
	
	public ParserRule getSContextTypeRule() {
		return getSContextTypeAccess().getRule();
	}
	
	///*
	// * break([code=VALUE,description=VALUE,error=VALUE])
	// */
	//Break:
	//	{Break} BREAK_DEF (ARGS_START parameters=BreakParameters? ARGS_END)? ';';
	public BreakElements getBreakAccess() {
		return pBreak;
	}
	
	public ParserRule getBreakRule() {
		return getBreakAccess().getRule();
	}
	
	//BreakParameter:
	//	CODE_DEF ('=' | ':') code=LiteralOrExpression | DESCRIPTION_DEF ('=' | ':') description=LiteralOrExpression |
	//	ERROR_DEF ('=' | ':') LiteralOrExpression;
	public BreakParameterElements getBreakParameterAccess() {
		return pBreakParameter;
	}
	
	public ParserRule getBreakParameterRule() {
		return getBreakParameterAccess().getRule();
	}
	
	//BreakParameters:
	//	parameters+=BreakParameter (ARG_SEP parameters+=BreakParameter)*;
	public BreakParametersElements getBreakParametersAccess() {
		return pBreakParameters;
	}
	
	public ParserRule getBreakParametersRule() {
		return getBreakParametersAccess().getRule();
	}
	
	//Validations:
	//	{Validations} VALIDATIONS_DEF '{' checks+=Check* '}';
	public ValidationsElements getValidationsAccess() {
		return pValidations;
	}
	
	public ParserRule getValidationsRule() {
		return getValidationsAccess().getRule();
	}
	
	//Define:
	//	{Define} DEFINE_DEF defineKey=QUOTED_IDENTIFIER ('=' | ':') expression=Expression ';';
	public DefineElements getDefineAccess() {
		return pDefine;
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}
	
	//Check:
	//	{Check} ('if' condition=Expression 'then')? CHECK_DEF ARGS_START checkAttributes+=CheckAttribute (ARG_SEP
	//	checkAttributes+=CheckAttribute)? ARGS_END ('=' | ':') expression=Expression ';';
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}
	
	//CheckAttribute:
	//	{CheckAttribute} (CODE_DEF ('=' | ':') value=LiteralOrExpression) | DESCRIPTION_DEF ('=' | ':')
	//	value=LiteralOrExpression;
	public CheckAttributeElements getCheckAttributeAccess() {
		return pCheckAttribute;
	}
	
	public ParserRule getCheckAttributeRule() {
		return getCheckAttributeAccess().getRule();
	}
	
	//LiteralOrExpression:
	//	{LiteralOrExpression} literal=(QUOTED_IDENTIFIER | STRING_CONSTANT) | expression=Expression;
	public LiteralOrExpressionElements getLiteralOrExpressionAccess() {
		return pLiteralOrExpression;
	}
	
	public ParserRule getLiteralOrExpressionRule() {
		return getLiteralOrExpressionAccess().getRule();
	}
	
	//Print:
	//	{Print} PRINT_DEF ARGS_START expression=Expression ARGS_END ';';
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//Log:
	//	{Log} LOG_DEF ARGS_START expression=Expression ARGS_END ';';
	public LogElements getLogAccess() {
		return pLog;
	}
	
	public ParserRule getLogRule() {
		return getLogAccess().getRule();
	}
	
	//Finally:
	//	{Finally} FINALLY_DEF '{' finallyStatements=TopLevelStatements '}';
	public FinallyElements getFinallyAccess() {
		return pFinally;
	}
	
	public ParserRule getFinallyRule() {
		return getFinallyAccess().getRule();
	}
	
	//Methods:
	//	{Methods} METHODS_DEF '{' methods+=Method* '}';
	public MethodsElements getMethodsAccess() {
		return pMethods;
	}
	
	public ParserRule getMethodsRule() {
		return getMethodsAccess().getRule();
	}
	
	//Method:
	//	{Method} methodName=QUOTED_IDENTIFIER ';';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Loop:
	//	{Loop} LOOP_DEF (mappable=MappableIdentifier | tml=TmlIdentifier) (ARGS_START FILTER_DEF ('=' | ':')
	//	filter=Expression ARGS_END)? '{' statements+=InnerBody* '}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Include:
	//	{Include} INCLUDE_DEF scriptName=QUOTED_IDENTIFIER ';';
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//AntiMessage:
	//	{AntiMessage} ANTIMESSAGE_DEF messageName=QUOTED_IDENTIFIER ';';
	public AntiMessageElements getAntiMessageAccess() {
		return pAntiMessage;
	}
	
	public ParserRule getAntiMessageRule() {
		return getAntiMessageAccess().getRule();
	}
	
	//Message:
	//	{Message} MESSAGE_DEF messageName=QUOTED_IDENTIFIER (ARGS_START arguments=MessageArguments ARGS_END)? ('{'
	//	(statements+=InnerBody* | arrayField=MappedArrayField | arrayMessage=MappedArrayMessage) '}' | ';'
	//	| '[' messageArray=MessageArray ']');
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//MessageArray:
	//	arrayMessageElements+=MessageArrayElement (ARG_SEP arrayMessageElements+=MessageArrayElement)*;
	public MessageArrayElements getMessageArrayAccess() {
		return pMessageArray;
	}
	
	public ParserRule getMessageArrayRule() {
		return getMessageArrayAccess().getRule();
	}
	
	//MessageArrayElement:
	//	{MessageArrayElement} '{' statements+=InnerBody* '}';
	public MessageArrayElementElements getMessageArrayElementAccess() {
		return pMessageArrayElement;
	}
	
	public ParserRule getMessageArrayElementRule() {
		return getMessageArrayElementAccess().getRule();
	}
	
	//MessageArgument:
	//	TYPE_DEF ('=' | ':') MessageType | MODE_DEF ('=' | ':') MessageMode;
	public MessageArgumentElements getMessageArgumentAccess() {
		return pMessageArgument;
	}
	
	public ParserRule getMessageArgumentRule() {
		return getMessageArgumentAccess().getRule();
	}
	
	//MessageArguments:
	//	arguments+=MessageArgument (ARG_SEP arguments+=MessageArgument)*;
	public MessageArgumentsElements getMessageArgumentsAccess() {
		return pMessageArguments;
	}
	
	public ParserRule getMessageArgumentsRule() {
		return getMessageArgumentsAccess().getRule();
	}
	
	//Map:
	//	{Map} (MAP_DEF adapterName=IDENTIFIER (ARGS_START arguments=KeyValueArguments? ARGS_END)? | MAP_OLDSKOOL_DEF
	//	ARGS_START OBJECT_OLDSKOOL_DEF ('=' | ':') objectName=OBJECT_IDENTIFIER (ARG_SEP arguments=KeyValueArguments)?
	//	ARGS_END) '{' statements+=InnerBody* '}';
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}
	
	//MethodOrSetter:
	//	AdapterMethod | SetterField;
	public MethodOrSetterElements getMethodOrSetterAccess() {
		return pMethodOrSetter;
	}
	
	public ParserRule getMethodOrSetterRule() {
		return getMethodOrSetterAccess().getRule();
	}
	
	//AdapterMethod:
	//	{AdapterMethod} method=METHOD_IDENTIFIER ARGS_START arguments=KeyValueArguments? ARGS_END ';';
	public AdapterMethodElements getAdapterMethodAccess() {
		return pAdapterMethod;
	}
	
	public ParserRule getAdapterMethodRule() {
		return getAdapterMethodAccess().getRule();
	}
	
	//SetterField:
	//	{SetterField} field=MAPPABLE_IDENTIFIER (('=' | ':') expressionList=ConditionalExpressions ';'
	//	| (ARGS_START arguments=KeyValueArguments ARGS_END)? '{' mappedArray=MappedArrayMessage '}' |
	//	mappedField=MappedArrayField);
	public SetterFieldElements getSetterFieldAccess() {
		return pSetterField;
	}
	
	public ParserRule getSetterFieldRule() {
		return getSetterFieldAccess().getRule();
	}
	
	//MappedArrayField:
	//	{MappedArrayField} field=MAPPABLE_IDENTIFIER (ARGS_START FILTER_DEF ('=' | ':') filter=Expression ARGS_END)? '{'
	//	statements+=InnerBody* '}';
	public MappedArrayFieldElements getMappedArrayFieldAccess() {
		return pMappedArrayField;
	}
	
	public ParserRule getMappedArrayFieldRule() {
		return getMappedArrayFieldAccess().getRule();
	}
	
	//MappedArrayMessage:
	//	{MappedArrayMessage} message=TML_LITERAL (ARGS_START FILTER_DEF ('=' | ':') filter=Expression ARGS_END)? '{'
	//	statements+=InnerBody* '}';
	public MappedArrayMessageElements getMappedArrayMessageAccess() {
		return pMappedArrayMessage;
	}
	
	public ParserRule getMappedArrayMessageRule() {
		return getMappedArrayMessageAccess().getRule();
	}
	
	//KeyValueArguments:
	//	{KeyValueArguments} keyValueArguments+=KeyValueArgument (ARG_SEP keyValueArguments+=KeyValueArgument)*;
	public KeyValueArgumentsElements getKeyValueArgumentsAccess() {
		return pKeyValueArguments;
	}
	
	public ParserRule getKeyValueArgumentsRule() {
		return getKeyValueArgumentsAccess().getRule();
	}
	
	//KeyValueArgument:
	//	{KeyValueArgument} key=(IDENTIFIER | OPTION_TYPE) ('=' | ':') value=LiteralOrExpression;
	public KeyValueArgumentElements getKeyValueArgumentAccess() {
		return pKeyValueArgument;
	}
	
	public ParserRule getKeyValueArgumentRule() {
		return getKeyValueArgumentAccess().getRule();
	}
	
	//Var:
	//	{Var} VAR_DEF varName=IDENTIFIER arguments=VarArguments? (('=' | ':') expressionList=ConditionalExpressions ';' |
	//	'[' varArray=VarArray? ']' |
	//	'{' varElements+=VarElement* '}'
	//	| '{' mappedArrayField=MappedArrayField '}' | '{' mappedArrayMessage=MappedArrayMessage '}');
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//VarArray:
	//	{VarArray} vararrayelement+=VarArrayElement (ARG_SEP vararrayelement+=VarArrayElement)*;
	public VarArrayElements getVarArrayAccess() {
		return pVarArray;
	}
	
	public ParserRule getVarArrayRule() {
		return getVarArrayAccess().getRule();
	}
	
	//VarArrayElement:
	//	{VarArrayElement} '{' varElements+=VarElement* '}';
	public VarArrayElementElements getVarArrayElementAccess() {
		return pVarArrayElement;
	}
	
	public ParserRule getVarArrayElementRule() {
		return getVarArrayElementAccess().getRule();
	}
	
	//VarElement:
	//	{VarElement} ('if' condition=Expression 'then')? var=Var;
	public VarElementElements getVarElementAccess() {
		return pVarElement;
	}
	
	public ParserRule getVarElementRule() {
		return getVarElementAccess().getRule();
	}
	
	//VarArguments:
	//	{VarArguments} ARGS_START varArguments+=VarArgument (ARG_SEP varArguments+=VarArgument)* ARGS_END;
	public VarArgumentsElements getVarArgumentsAccess() {
		return pVarArguments;
	}
	
	public ParserRule getVarArgumentsRule() {
		return getVarArgumentsAccess().getRule();
	}
	
	//VarArgument:
	//	{VarArgument} argument=(VarType | VarMode);
	public VarArgumentElements getVarArgumentAccess() {
		return pVarArgument;
	}
	
	public ParserRule getVarArgumentRule() {
		return getVarArgumentAccess().getRule();
	}
	
	//VarType:
	//	{VarType} TYPE_DEF ('=' | ':') type=(MessageType | PropertyType);
	public VarTypeElements getVarTypeAccess() {
		return pVarType;
	}
	
	public ParserRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}
	
	//VarMode:
	//	{VarMode} MODE_DEF ('=' | ':') mode=MessageMode;
	public VarModeElements getVarModeAccess() {
		return pVarMode;
	}
	
	public ParserRule getVarModeRule() {
		return getVarModeAccess().getRule();
	}
	
	//Property:
	//	{Property} PROPERTY_DEF propertyName=QUOTED_IDENTIFIER arguments=PropertyArguments? ((('=' | ':')
	//	expressionList=ConditionalExpressions)? ';'
	//	| '[' selectionArray=SelectionArray ']'
	//	| '{' arrayField=MappedArrayField '}'
	//	| '{' arrayMessage=MappedArrayMessage '}');
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//SelectionArray:
	//	arrayElements+=SelectionArrayElement (ARG_SEP arrayElements+=SelectionArrayElement)*;
	public SelectionArrayElements getSelectionArrayAccess() {
		return pSelectionArray;
	}
	
	public ParserRule getSelectionArrayRule() {
		return getSelectionArrayAccess().getRule();
	}
	
	//SelectionArrayElement:
	//	{SelectionArrayElement} '{' innerBody+=InnerBody* '}';
	public SelectionArrayElementElements getSelectionArrayElementAccess() {
		return pSelectionArrayElement;
	}
	
	public ParserRule getSelectionArrayElementRule() {
		return getSelectionArrayElementAccess().getRule();
	}
	
	//Option:
	//	OPTION_DEF option=OPTION_TYPE ('=' | ':') expressionList=ConditionalExpressions ';';
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//PropertyArguments:
	//	{PropertyArguments} ARGS_START arguments+=PropertyArgument (ARG_SEP arguments+=PropertyArgument)* ARGS_END;
	public PropertyArgumentsElements getPropertyArgumentsAccess() {
		return pPropertyArguments;
	}
	
	public ParserRule getPropertyArgumentsRule() {
		return getPropertyArgumentsAccess().getRule();
	}
	
	//PropertyArgument:
	//	DirectionArgument | TypeArgument | SubTypeArgument | DescriptionArgument | CardinalityArgument | LengthArgument;
	public PropertyArgumentElements getPropertyArgumentAccess() {
		return pPropertyArgument;
	}
	
	public ParserRule getPropertyArgumentRule() {
		return getPropertyArgumentAccess().getRule();
	}
	
	//LengthArgument:
	//	LENGTH_DEF ('=' | ':') value=INTEGER;
	public LengthArgumentElements getLengthArgumentAccess() {
		return pLengthArgument;
	}
	
	public ParserRule getLengthArgumentRule() {
		return getLengthArgumentAccess().getRule();
	}
	
	//DirectionArgument:
	//	DIRECTION_DEF ('=' | ':') value=(IN_DEF | OUT_DEF | INOUT_DEF);
	public DirectionArgumentElements getDirectionArgumentAccess() {
		return pDirectionArgument;
	}
	
	public ParserRule getDirectionArgumentRule() {
		return getDirectionArgumentAccess().getRule();
	}
	
	//DescriptionArgument:
	//	DESCRIPTION_DEF ('=' | ':') value=LiteralOrExpression;
	public DescriptionArgumentElements getDescriptionArgumentAccess() {
		return pDescriptionArgument;
	}
	
	public ParserRule getDescriptionArgumentRule() {
		return getDescriptionArgumentAccess().getRule();
	}
	
	//CardinalityArgument:
	//	CARDINALITY_DEF ('=' | ':') value=('+' | '1');
	public CardinalityArgumentElements getCardinalityArgumentAccess() {
		return pCardinalityArgument;
	}
	
	public ParserRule getCardinalityArgumentRule() {
		return getCardinalityArgumentAccess().getRule();
	}
	
	//TypeArgument:
	//	TYPE_DEF ('=' | ':') value=PropertyType;
	public TypeArgumentElements getTypeArgumentAccess() {
		return pTypeArgument;
	}
	
	public ParserRule getTypeArgumentRule() {
		return getTypeArgumentAccess().getRule();
	}
	
	//SubTypeArgument:
	//	SUBTYPE_DEF ('=' | ':') value=IDENTIFIER;
	public SubTypeArgumentElements getSubTypeArgumentAccess() {
		return pSubTypeArgument;
	}
	
	public ParserRule getSubTypeArgumentRule() {
		return getSubTypeArgumentAccess().getRule();
	}
	
	//ConditionalExpressions:
	//	{ConditionalExpressions} conditionalExpressions+=ConditionalExpression+ 'else' elseExpresssion=LiteralOrExpression |
	//	singleExpression=LiteralOrExpression;
	public ConditionalExpressionsElements getConditionalExpressionsAccess() {
		return pConditionalExpressions;
	}
	
	public ParserRule getConditionalExpressionsRule() {
		return getConditionalExpressionsAccess().getRule();
	}
	
	//ConditionalExpression:
	//	'if' condition=Expression 'then' expression=LiteralOrExpression;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//Expression:
	//	BooleanExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BooleanExpression Expression:
	//	Comparison (({AndOrExpression.left=current} op=("OR" | "AND")) right=Comparison)*;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//Comparison Expression:
	//	Equals (({Comparison.left=current} op=("<" | ">" | "<=" | ">=")) right=Equals)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Equals Expression:
	//	Addition (({Equals.left=current} op=("==" | '!=')) right=Addition)*;
	public EqualsElements getEqualsAccess() {
		return pEquals;
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}
	
	//Addition Expression:
	//	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication Expression:
	//	Prefixed (({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Prefixed Expression:
	//	{BooleanNegation} =>"!" expression=Atomic | {ArithmeticSigned} =>"-" expression=Atomic | Atomic;
	public PrefixedElements getPrefixedAccess() {
		return pPrefixed;
	}
	
	public ParserRule getPrefixedRule() {
		return getPrefixedAccess().getRule();
	}
	
	//Atomic Expression:
	//	{ExpressionLiteral} ARGS_START value=Expression ARGS_END | {NumberLiteral} value=INTEGER | {StringLiteral}
	//	value=STRING_LITERAL | {BooleanLiteral} value=(TRUE | FALSE) | {FunctionCallLiteral} value=FunctionIdentifier |
	//	{MappableIdentifierLiteral} value=MappableIdentifier | {TmlIdentifierLiteral} hasExists?='?'? value=TmlIdentifier |
	//	{ForAllLiteral} value=ForAllIdentifier | {NullLiteral} value=NULL_DEF;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//ForAllIdentifier:
	//	{ForAllIdentifier} op=(FORALL | EXISTS) ARGS_START "`" expression=Expression "`" ARG_SEP
	//	messagedefinition=STRING_LITERAL ARGS_END;
	public ForAllIdentifierElements getForAllIdentifierAccess() {
		return pForAllIdentifier;
	}
	
	public ParserRule getForAllIdentifierRule() {
		return getForAllIdentifierAccess().getRule();
	}
	
	//FunctionIdentifier:
	//	{FunctionIdentifier} func=IDENTIFIER (ARGS_START (args+=Expression (ARG_SEP args+=Expression)*)? ARGS_END);
	public FunctionIdentifierElements getFunctionIdentifierAccess() {
		return pFunctionIdentifier;
	}
	
	public ParserRule getFunctionIdentifierRule() {
		return getFunctionIdentifierAccess().getRule();
	}
	
	//MappableIdentifier:
	//	{MappableIdentifier} field=MAPPABLE_IDENTIFIER (ARGS_START (args+=Expression (ARG_SEP args+=Expression)*)? ARGS_END)?;
	public MappableIdentifierElements getMappableIdentifierAccess() {
		return pMappableIdentifier;
	}
	
	public ParserRule getMappableIdentifierRule() {
		return getMappableIdentifierAccess().getRule();
	}
	
	//TmlIdentifier:
	//	{TmlIdentifier} tml=TML_LITERAL;
	public TmlIdentifierElements getTmlIdentifierAccess() {
		return pTmlIdentifier;
	}
	
	public ParserRule getTmlIdentifierRule() {
		return getTmlIdentifierAccess().getRule();
	}
	
	//PropertyType:
	//	{IntType} 'integer' | {StringType} 'string' | {BooleanType} 'boolean' | {DateType} 'date' | {FloatType} 'float' |
	//	{BinaryType} 'binary' | {ClockTimeType} 'clocktime' | {MemoType} 'memo' | {TimestampType} 'timestamp' |
	//	{PercentageType} 'percentage' | {SelectionType} 'selection';
	public PropertyTypeElements getPropertyTypeAccess() {
		return pPropertyType;
	}
	
	public ParserRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}
	
	//OPTION_TYPE:
	//	'name' | 'value' | 'selected';
	public OPTION_TYPEElements getOPTION_TYPEAccess() {
		return pOPTION_TYPE;
	}
	
	public ParserRule getOPTION_TYPERule() {
		return getOPTION_TYPEAccess().getRule();
	}
	
	//MessageType:
	//	{ArrayType} "array" | {SimpleType} "simple" | {ArrayElementType} "arrayelement";
	public MessageTypeElements getMessageTypeAccess() {
		return pMessageType;
	}
	
	public ParserRule getMessageTypeRule() {
		return getMessageTypeAccess().getRule();
	}
	
	//MessageMode:
	//	{Ignore} "ignore" | {Overwrite} "overwrite";
	public MessageModeElements getMessageModeAccess() {
		return pMessageMode;
	}
	
	public ParserRule getMessageModeRule() {
		return getMessageModeAccess().getRule();
	}
	
	//terminal METHOD_IDENTIFIER:
	//	'.' IDENTIFIER;
	public TerminalRule getMETHOD_IDENTIFIERRule() {
		return tMETHOD_IDENTIFIER;
	}
	
	//terminal MAPPABLE_IDENTIFIER:
	//	MAPPABLE_ID '../'* IDENTIFIER;
	public TerminalRule getMAPPABLE_IDENTIFIERRule() {
		return tMAPPABLE_IDENTIFIER;
	}
	
	//terminal STRING_LITERAL:
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	}
	
	//terminal ARG_SEP:
	//	',';
	public TerminalRule getARG_SEPRule() {
		return tARG_SEP;
	}
	
	//terminal FORALL:
	//	'FORALL';
	public TerminalRule getFORALLRule() {
		return tFORALL;
	}
	
	//terminal EXISTS:
	//	'EXISTS';
	public TerminalRule getEXISTSRule() {
		return tEXISTS;
	}
	
	//terminal TRUE:
	//	'true';
	public TerminalRule getTRUERule() {
		return tTRUE;
	}
	
	//terminal FALSE:
	//	'false';
	public TerminalRule getFALSERule() {
		return tFALSE;
	}
	
	//terminal MAPPABLE_ID:
	//	'$';
	public TerminalRule getMAPPABLE_IDRule() {
		return tMAPPABLE_ID;
	}
	
	//terminal ARGS_START:
	//	'(';
	public TerminalRule getARGS_STARTRule() {
		return tARGS_START;
	}
	
	//terminal ARGS_END:
	//	')';
	public TerminalRule getARGS_ENDRule() {
		return tARGS_END;
	}
	
	//terminal NULL_DEF:
	//	'null';
	public TerminalRule getNULL_DEFRule() {
		return tNULL_DEF;
	}
	
	//terminal PRINT_DEF:
	//	'print';
	public TerminalRule getPRINT_DEFRule() {
		return tPRINT_DEF;
	}
	
	//terminal LOG_DEF:
	//	'log';
	public TerminalRule getLOG_DEFRule() {
		return tLOG_DEF;
	}
	
	//terminal FINALLY_DEF:
	//	'finally';
	public TerminalRule getFINALLY_DEFRule() {
		return tFINALLY_DEF;
	}
	
	//terminal DEFINE_DEF:
	//	'define';
	public TerminalRule getDEFINE_DEFRule() {
		return tDEFINE_DEF;
	}
	
	//terminal FILTER_DEF:
	//	'filter';
	public TerminalRule getFILTER_DEFRule() {
		return tFILTER_DEF;
	}
	
	//terminal SYNCHRONIZED_DEF:
	//	'synchronized';
	public TerminalRule getSYNCHRONIZED_DEFRule() {
		return tSYNCHRONIZED_DEF;
	}
	
	//terminal LOOP_DEF:
	//	'loop';
	public TerminalRule getLOOP_DEFRule() {
		return tLOOP_DEF;
	}
	
	//terminal METHODS_DEF:
	//	'methods';
	public TerminalRule getMETHODS_DEFRule() {
		return tMETHODS_DEF;
	}
	
	//terminal CODE_DEF:
	//	'code';
	public TerminalRule getCODE_DEFRule() {
		return tCODE_DEF;
	}
	
	//terminal VALIDATIONS_DEF:
	//	'validations';
	public TerminalRule getVALIDATIONS_DEFRule() {
		return tVALIDATIONS_DEF;
	}
	
	//terminal CHECK_DEF:
	//	"check";
	public TerminalRule getCHECK_DEFRule() {
		return tCHECK_DEF;
	}
	
	//terminal INCLUDE_DEF:
	//	'include';
	public TerminalRule getINCLUDE_DEFRule() {
		return tINCLUDE_DEF;
	}
	
	//terminal INOUT_DEF:
	//	"inout";
	public TerminalRule getINOUT_DEFRule() {
		return tINOUT_DEF;
	}
	
	//terminal IN_DEF:
	//	"in";
	public TerminalRule getIN_DEFRule() {
		return tIN_DEF;
	}
	
	//terminal OUT_DEF:
	//	"out";
	public TerminalRule getOUT_DEFRule() {
		return tOUT_DEF;
	}
	
	//terminal DESCRIPTION_DEF:
	//	"description";
	public TerminalRule getDESCRIPTION_DEFRule() {
		return tDESCRIPTION_DEF;
	}
	
	//terminal TYPE_DEF:
	//	"type";
	public TerminalRule getTYPE_DEFRule() {
		return tTYPE_DEF;
	}
	
	//terminal SUBTYPE_DEF:
	//	"subtype";
	public TerminalRule getSUBTYPE_DEFRule() {
		return tSUBTYPE_DEF;
	}
	
	//terminal MODE_DEF:
	//	"mode";
	public TerminalRule getMODE_DEFRule() {
		return tMODE_DEF;
	}
	
	//terminal DIRECTION_DEF:
	//	"direction";
	public TerminalRule getDIRECTION_DEFRule() {
		return tDIRECTION_DEF;
	}
	
	//terminal LENGTH_DEF:
	//	"length";
	public TerminalRule getLENGTH_DEFRule() {
		return tLENGTH_DEF;
	}
	
	//terminal CARDINALITY_DEF:
	//	"cardinality";
	public TerminalRule getCARDINALITY_DEFRule() {
		return tCARDINALITY_DEF;
	}
	
	//terminal MESSAGE_DEF:
	//	'message';
	public TerminalRule getMESSAGE_DEFRule() {
		return tMESSAGE_DEF;
	}
	
	//terminal PROPERTY_DEF:
	//	'property';
	public TerminalRule getPROPERTY_DEFRule() {
		return tPROPERTY_DEF;
	}
	
	//terminal VAR_DEF:
	//	"var";
	public TerminalRule getVAR_DEFRule() {
		return tVAR_DEF;
	}
	
	//terminal OPTION_DEF:
	//	"option";
	public TerminalRule getOPTION_DEFRule() {
		return tOPTION_DEF;
	}
	
	//terminal MAP_DEF:
	//	"map.";
	public TerminalRule getMAP_DEFRule() {
		return tMAP_DEF;
	}
	
	//terminal MAP_OLDSKOOL_DEF:
	//	"map";
	public TerminalRule getMAP_OLDSKOOL_DEFRule() {
		return tMAP_OLDSKOOL_DEF;
	}
	
	//terminal OBJECT_OLDSKOOL_DEF:
	//	"object";
	public TerminalRule getOBJECT_OLDSKOOL_DEFRule() {
		return tOBJECT_OLDSKOOL_DEF;
	}
	
	//terminal BREAK_DEF:
	//	"break";
	public TerminalRule getBREAK_DEFRule() {
		return tBREAK_DEF;
	}
	
	//terminal ERROR_DEF:
	//	"error";
	public TerminalRule getERROR_DEFRule() {
		return tERROR_DEF;
	}
	
	//terminal ANTIMESSAGE_DEF:
	//	"antimessage";
	public TerminalRule getANTIMESSAGE_DEFRule() {
		return tANTIMESSAGE_DEF;
	}
	
	//terminal CONTEXT_DEF:
	//	"context";
	public TerminalRule getCONTEXT_DEFRule() {
		return tCONTEXT_DEF;
	}
	
	//terminal KEY_DEF:
	//	"key";
	public TerminalRule getKEY_DEFRule() {
		return tKEY_DEF;
	}
	
	//terminal TIMEOUT_DEF:
	//	"timeout";
	public TerminalRule getTIMEOUT_DEFRule() {
		return tTIMEOUT_DEF;
	}
	
	//terminal BREAKONNOLOCK_DEF:
	//	"breakOnNoLock";
	public TerminalRule getBREAKONNOLOCK_DEFRule() {
		return tBREAKONNOLOCK_DEF;
	}
	
	//terminal OBJECT_IDENTIFIER:
	//	'"' IDENTIFIER ('.' IDENTIFIER)+ '"';
	public TerminalRule getOBJECT_IDENTIFIERRule() {
		return tOBJECT_IDENTIFIER;
	}
	
	//terminal QUOTED_IDENTIFIER:
	//	'"' (IDENTIFIER | '/' | '../')+ '"';
	public TerminalRule getQUOTED_IDENTIFIERRule() {
		return tQUOTED_IDENTIFIER;
	}
	
	//terminal STRING_CONSTANT:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRING_CONSTANTRule() {
		return tSTRING_CONSTANT;
	}
	
	//terminal TML_LITERAL:
	//	'[' (IDENTIFIER | '/' | '../' | '/@' | '_')+ ']';
	public TerminalRule getTML_LITERALRule() {
		return tTML_LITERAL;
	}
	
	//terminal IDENTIFIER:
	//	LETTER (LETTER | DIGIT | "_")+;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal INTEGER:
	//	"0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9") DIGIT*;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal LETTER:
	//	"A" | "B" | "C" | "D" | "E" | "F" | "G"
	//	| "H" | "I" | "J" | "K" | "L" | "M" | "N"
	//	| "O" | "P" | "Q" | "R" | "S" | "T" | "U"
	//	| "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
	//	| "c" | "d" | "e" | "f" | "g" | "h" | "i"
	//	| "j" | "k" | "l" | "m" | "n" | "o" | "p"
	//	| "q" | "r" | "s" | "t" | "u" | "v" | "w"
	//	| "x" | "y" | "z";
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal DIGIT:
	//	"0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal CHARACTER:
	//	LETTER | DIGIT;
	public TerminalRule getCHARACTERRule() {
		return tCHARACTER;
	}
}
