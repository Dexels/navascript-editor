/**
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.navascript.util;

import com.dexels.navajo.navascript.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.dexels.navajo.navascript.NavascriptPackage
 * @generated
 */
public class NavascriptSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static NavascriptPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavascriptSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = NavascriptPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case NavascriptPackage.NAVASCRIPT:
      {
        Navascript navascript = (Navascript)theEObject;
        T result = caseNavascript(navascript);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.TOP_LEVEL_STATEMENTS:
      {
        TopLevelStatements topLevelStatements = (TopLevelStatements)theEObject;
        T result = caseTopLevelStatements(topLevelStatements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.TOP_LEVEL_STATEMENT:
      {
        TopLevelStatement topLevelStatement = (TopLevelStatement)theEObject;
        T result = caseTopLevelStatement(topLevelStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.INNER_BODY:
      {
        InnerBody innerBody = (InnerBody)theEObject;
        T result = caseInnerBody(innerBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.BLOCK_STATEMENTS:
      {
        BlockStatements blockStatements = (BlockStatements)theEObject;
        T result = caseBlockStatements(blockStatements);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.SYNCHRONIZED:
      {
        Synchronized synchronized_ = (Synchronized)theEObject;
        T result = caseSynchronized(synchronized_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.SYNCHRONIZED_ARGUMENTS:
      {
        SynchronizedArguments synchronizedArguments = (SynchronizedArguments)theEObject;
        T result = caseSynchronizedArguments(synchronizedArguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.SYNCHRONIZED_ARGUMENT:
      {
        SynchronizedArgument synchronizedArgument = (SynchronizedArgument)theEObject;
        T result = caseSynchronizedArgument(synchronizedArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.SKEY:
      {
        SKey sKey = (SKey)theEObject;
        T result = caseSKey(sKey);
        if (result == null) result = caseSynchronizedArgument(sKey);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.STIMEOUT:
      {
        STimeout sTimeout = (STimeout)theEObject;
        T result = caseSTimeout(sTimeout);
        if (result == null) result = caseSynchronizedArgument(sTimeout);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.SBREAK_ON_NO_LOCK:
      {
        SBreakOnNoLock sBreakOnNoLock = (SBreakOnNoLock)theEObject;
        T result = caseSBreakOnNoLock(sBreakOnNoLock);
        if (result == null) result = caseSynchronizedArgument(sBreakOnNoLock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.BREAK:
      {
        Break break_ = (Break)theEObject;
        T result = caseBreak(break_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.BREAK_PARAMETER:
      {
        BreakParameter breakParameter = (BreakParameter)theEObject;
        T result = caseBreakParameter(breakParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.BREAK_PARAMETERS:
      {
        BreakParameters breakParameters = (BreakParameters)theEObject;
        T result = caseBreakParameters(breakParameters);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.VALIDATIONS:
      {
        Validations validations = (Validations)theEObject;
        T result = caseValidations(validations);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.DEFINE:
      {
        Define define = (Define)theEObject;
        T result = caseDefine(define);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.CHECK:
      {
        Check check = (Check)theEObject;
        T result = caseCheck(check);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.CHECK_ATTRIBUTE:
      {
        CheckAttribute checkAttribute = (CheckAttribute)theEObject;
        T result = caseCheckAttribute(checkAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.LITERAL_OR_EXPRESSION:
      {
        LiteralOrExpression literalOrExpression = (LiteralOrExpression)theEObject;
        T result = caseLiteralOrExpression(literalOrExpression);
        if (result == null) result = caseSKey(literalOrExpression);
        if (result == null) result = caseBreakParameter(literalOrExpression);
        if (result == null) result = caseSynchronizedArgument(literalOrExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.PRINT:
      {
        Print print = (Print)theEObject;
        T result = casePrint(print);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.LOG:
      {
        Log log = (Log)theEObject;
        T result = caseLog(log);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.FINALLY:
      {
        Finally finally_ = (Finally)theEObject;
        T result = caseFinally(finally_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.METHODS:
      {
        Methods methods = (Methods)theEObject;
        T result = caseMethods(methods);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.METHOD:
      {
        Method method = (Method)theEObject;
        T result = caseMethod(method);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.LOOP:
      {
        Loop loop = (Loop)theEObject;
        T result = caseLoop(loop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.INCLUDE:
      {
        Include include = (Include)theEObject;
        T result = caseInclude(include);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.ANTI_MESSAGE:
      {
        AntiMessage antiMessage = (AntiMessage)theEObject;
        T result = caseAntiMessage(antiMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MESSAGE:
      {
        Message message = (Message)theEObject;
        T result = caseMessage(message);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MESSAGE_ARRAY:
      {
        MessageArray messageArray = (MessageArray)theEObject;
        T result = caseMessageArray(messageArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MESSAGE_ARRAY_ELEMENT:
      {
        MessageArrayElement messageArrayElement = (MessageArrayElement)theEObject;
        T result = caseMessageArrayElement(messageArrayElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MESSAGE_ARGUMENT:
      {
        MessageArgument messageArgument = (MessageArgument)theEObject;
        T result = caseMessageArgument(messageArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MESSAGE_ARGUMENTS:
      {
        MessageArguments messageArguments = (MessageArguments)theEObject;
        T result = caseMessageArguments(messageArguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MAP:
      {
        Map map = (Map)theEObject;
        T result = caseMap(map);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.METHOD_OR_SETTER:
      {
        MethodOrSetter methodOrSetter = (MethodOrSetter)theEObject;
        T result = caseMethodOrSetter(methodOrSetter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.ADAPTER_METHOD:
      {
        AdapterMethod adapterMethod = (AdapterMethod)theEObject;
        T result = caseAdapterMethod(adapterMethod);
        if (result == null) result = caseMethodOrSetter(adapterMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.SETTER_FIELD:
      {
        SetterField setterField = (SetterField)theEObject;
        T result = caseSetterField(setterField);
        if (result == null) result = caseMethodOrSetter(setterField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MAPPED_MESSAGE:
      {
        MappedMessage mappedMessage = (MappedMessage)theEObject;
        T result = caseMappedMessage(mappedMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MAPPED_ARRAY_FIELD:
      {
        MappedArrayField mappedArrayField = (MappedArrayField)theEObject;
        T result = caseMappedArrayField(mappedArrayField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MAPPED_ARRAY_MESSAGE:
      {
        MappedArrayMessage mappedArrayMessage = (MappedArrayMessage)theEObject;
        T result = caseMappedArrayMessage(mappedArrayMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.KEY_VALUE_ARGUMENTS:
      {
        KeyValueArguments keyValueArguments = (KeyValueArguments)theEObject;
        T result = caseKeyValueArguments(keyValueArguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.KEY_VALUE_ARGUMENT:
      {
        KeyValueArgument keyValueArgument = (KeyValueArgument)theEObject;
        T result = caseKeyValueArgument(keyValueArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.VAR:
      {
        Var var = (Var)theEObject;
        T result = caseVar(var);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.VAR_ARRAY:
      {
        VarArray varArray = (VarArray)theEObject;
        T result = caseVarArray(varArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.VAR_ARRAY_ELEMENT:
      {
        VarArrayElement varArrayElement = (VarArrayElement)theEObject;
        T result = caseVarArrayElement(varArrayElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.VAR_ELEMENT:
      {
        VarElement varElement = (VarElement)theEObject;
        T result = caseVarElement(varElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.VAR_ARGUMENTS:
      {
        VarArguments varArguments = (VarArguments)theEObject;
        T result = caseVarArguments(varArguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.VAR_ARGUMENT:
      {
        VarArgument varArgument = (VarArgument)theEObject;
        T result = caseVarArgument(varArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.VAR_TYPE:
      {
        VarType varType = (VarType)theEObject;
        T result = caseVarType(varType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.VAR_MODE:
      {
        VarMode varMode = (VarMode)theEObject;
        T result = caseVarMode(varMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.PROPERTY:
      {
        Property property = (Property)theEObject;
        T result = caseProperty(property);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.SELECTION_ARRAY:
      {
        SelectionArray selectionArray = (SelectionArray)theEObject;
        T result = caseSelectionArray(selectionArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.SELECTION_ARRAY_ELEMENT:
      {
        SelectionArrayElement selectionArrayElement = (SelectionArrayElement)theEObject;
        T result = caseSelectionArrayElement(selectionArrayElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.OPTION:
      {
        Option option = (Option)theEObject;
        T result = caseOption(option);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.PROPERTY_ARGUMENTS:
      {
        PropertyArguments propertyArguments = (PropertyArguments)theEObject;
        T result = casePropertyArguments(propertyArguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.PROPERTY_ARGUMENT:
      {
        PropertyArgument propertyArgument = (PropertyArgument)theEObject;
        T result = casePropertyArgument(propertyArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.LENGTH_ARGUMENT:
      {
        LengthArgument lengthArgument = (LengthArgument)theEObject;
        T result = caseLengthArgument(lengthArgument);
        if (result == null) result = casePropertyArgument(lengthArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.DIRECTION_ARGUMENT:
      {
        DirectionArgument directionArgument = (DirectionArgument)theEObject;
        T result = caseDirectionArgument(directionArgument);
        if (result == null) result = casePropertyArgument(directionArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.DESCRIPTION_ARGUMENT:
      {
        DescriptionArgument descriptionArgument = (DescriptionArgument)theEObject;
        T result = caseDescriptionArgument(descriptionArgument);
        if (result == null) result = casePropertyArgument(descriptionArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.CARDINALITY_ARGUMENT:
      {
        CardinalityArgument cardinalityArgument = (CardinalityArgument)theEObject;
        T result = caseCardinalityArgument(cardinalityArgument);
        if (result == null) result = casePropertyArgument(cardinalityArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.TYPE_ARGUMENT:
      {
        TypeArgument typeArgument = (TypeArgument)theEObject;
        T result = caseTypeArgument(typeArgument);
        if (result == null) result = casePropertyArgument(typeArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.SUB_TYPE_ARGUMENT:
      {
        SubTypeArgument subTypeArgument = (SubTypeArgument)theEObject;
        T result = caseSubTypeArgument(subTypeArgument);
        if (result == null) result = casePropertyArgument(subTypeArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS:
      {
        ConditionalExpressions conditionalExpressions = (ConditionalExpressions)theEObject;
        T result = caseConditionalExpressions(conditionalExpressions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.CONDITIONAL_EXPRESSION:
      {
        ConditionalExpression conditionalExpression = (ConditionalExpression)theEObject;
        T result = caseConditionalExpression(conditionalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseSTimeout(expression);
        if (result == null) result = caseSBreakOnNoLock(expression);
        if (result == null) result = caseSynchronizedArgument(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.FOR_ALL_IDENTIFIER:
      {
        ForAllIdentifier forAllIdentifier = (ForAllIdentifier)theEObject;
        T result = caseForAllIdentifier(forAllIdentifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.FUNCTION_IDENTIFIER:
      {
        FunctionIdentifier functionIdentifier = (FunctionIdentifier)theEObject;
        T result = caseFunctionIdentifier(functionIdentifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MAPPABLE_IDENTIFIER:
      {
        MappableIdentifier mappableIdentifier = (MappableIdentifier)theEObject;
        T result = caseMappableIdentifier(mappableIdentifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.TML_IDENTIFIER:
      {
        TmlIdentifier tmlIdentifier = (TmlIdentifier)theEObject;
        T result = caseTmlIdentifier(tmlIdentifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.PROPERTY_TYPE:
      {
        PropertyType propertyType = (PropertyType)theEObject;
        T result = casePropertyType(propertyType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MESSAGE_TYPE:
      {
        MessageType messageType = (MessageType)theEObject;
        T result = caseMessageType(messageType);
        if (result == null) result = caseMessageArgument(messageType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MESSAGE_MODE:
      {
        MessageMode messageMode = (MessageMode)theEObject;
        T result = caseMessageMode(messageMode);
        if (result == null) result = caseMessageArgument(messageMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.AND_OR_EXPRESSION:
      {
        AndOrExpression andOrExpression = (AndOrExpression)theEObject;
        T result = caseAndOrExpression(andOrExpression);
        if (result == null) result = caseExpression(andOrExpression);
        if (result == null) result = caseSTimeout(andOrExpression);
        if (result == null) result = caseSBreakOnNoLock(andOrExpression);
        if (result == null) result = caseSynchronizedArgument(andOrExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.COMPARISON:
      {
        Comparison comparison = (Comparison)theEObject;
        T result = caseComparison(comparison);
        if (result == null) result = caseExpression(comparison);
        if (result == null) result = caseSTimeout(comparison);
        if (result == null) result = caseSBreakOnNoLock(comparison);
        if (result == null) result = caseSynchronizedArgument(comparison);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.EQUALS:
      {
        Equals equals = (Equals)theEObject;
        T result = caseEquals(equals);
        if (result == null) result = caseExpression(equals);
        if (result == null) result = caseSTimeout(equals);
        if (result == null) result = caseSBreakOnNoLock(equals);
        if (result == null) result = caseSynchronizedArgument(equals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.PLUS:
      {
        Plus plus = (Plus)theEObject;
        T result = casePlus(plus);
        if (result == null) result = caseExpression(plus);
        if (result == null) result = caseSTimeout(plus);
        if (result == null) result = caseSBreakOnNoLock(plus);
        if (result == null) result = caseSynchronizedArgument(plus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MINUS:
      {
        Minus minus = (Minus)theEObject;
        T result = caseMinus(minus);
        if (result == null) result = caseExpression(minus);
        if (result == null) result = caseSTimeout(minus);
        if (result == null) result = caseSBreakOnNoLock(minus);
        if (result == null) result = caseSynchronizedArgument(minus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MULTI_OR_DIV:
      {
        MultiOrDiv multiOrDiv = (MultiOrDiv)theEObject;
        T result = caseMultiOrDiv(multiOrDiv);
        if (result == null) result = caseExpression(multiOrDiv);
        if (result == null) result = caseSTimeout(multiOrDiv);
        if (result == null) result = caseSBreakOnNoLock(multiOrDiv);
        if (result == null) result = caseSynchronizedArgument(multiOrDiv);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.BOOLEAN_NEGATION:
      {
        BooleanNegation booleanNegation = (BooleanNegation)theEObject;
        T result = caseBooleanNegation(booleanNegation);
        if (result == null) result = caseExpression(booleanNegation);
        if (result == null) result = caseSTimeout(booleanNegation);
        if (result == null) result = caseSBreakOnNoLock(booleanNegation);
        if (result == null) result = caseSynchronizedArgument(booleanNegation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.ARITHMETIC_SIGNED:
      {
        ArithmeticSigned arithmeticSigned = (ArithmeticSigned)theEObject;
        T result = caseArithmeticSigned(arithmeticSigned);
        if (result == null) result = caseExpression(arithmeticSigned);
        if (result == null) result = caseSTimeout(arithmeticSigned);
        if (result == null) result = caseSBreakOnNoLock(arithmeticSigned);
        if (result == null) result = caseSynchronizedArgument(arithmeticSigned);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.EXPRESSION_LITERAL:
      {
        ExpressionLiteral expressionLiteral = (ExpressionLiteral)theEObject;
        T result = caseExpressionLiteral(expressionLiteral);
        if (result == null) result = caseExpression(expressionLiteral);
        if (result == null) result = caseSTimeout(expressionLiteral);
        if (result == null) result = caseSBreakOnNoLock(expressionLiteral);
        if (result == null) result = caseSynchronizedArgument(expressionLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.NUMBER_LITERAL:
      {
        NumberLiteral numberLiteral = (NumberLiteral)theEObject;
        T result = caseNumberLiteral(numberLiteral);
        if (result == null) result = caseExpression(numberLiteral);
        if (result == null) result = caseSTimeout(numberLiteral);
        if (result == null) result = caseSBreakOnNoLock(numberLiteral);
        if (result == null) result = caseSynchronizedArgument(numberLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.STRING_LITERAL:
      {
        StringLiteral stringLiteral = (StringLiteral)theEObject;
        T result = caseStringLiteral(stringLiteral);
        if (result == null) result = caseExpression(stringLiteral);
        if (result == null) result = caseSTimeout(stringLiteral);
        if (result == null) result = caseSBreakOnNoLock(stringLiteral);
        if (result == null) result = caseSynchronizedArgument(stringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.BOOLEAN_LITERAL:
      {
        BooleanLiteral booleanLiteral = (BooleanLiteral)theEObject;
        T result = caseBooleanLiteral(booleanLiteral);
        if (result == null) result = caseExpression(booleanLiteral);
        if (result == null) result = caseSTimeout(booleanLiteral);
        if (result == null) result = caseSBreakOnNoLock(booleanLiteral);
        if (result == null) result = caseSynchronizedArgument(booleanLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.FUNCTION_CALL_LITERAL:
      {
        FunctionCallLiteral functionCallLiteral = (FunctionCallLiteral)theEObject;
        T result = caseFunctionCallLiteral(functionCallLiteral);
        if (result == null) result = caseExpression(functionCallLiteral);
        if (result == null) result = caseSTimeout(functionCallLiteral);
        if (result == null) result = caseSBreakOnNoLock(functionCallLiteral);
        if (result == null) result = caseSynchronizedArgument(functionCallLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MAPPABLE_IDENTIFIER_LITERAL:
      {
        MappableIdentifierLiteral mappableIdentifierLiteral = (MappableIdentifierLiteral)theEObject;
        T result = caseMappableIdentifierLiteral(mappableIdentifierLiteral);
        if (result == null) result = caseExpression(mappableIdentifierLiteral);
        if (result == null) result = caseSTimeout(mappableIdentifierLiteral);
        if (result == null) result = caseSBreakOnNoLock(mappableIdentifierLiteral);
        if (result == null) result = caseSynchronizedArgument(mappableIdentifierLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.TML_IDENTIFIER_LITERAL:
      {
        TmlIdentifierLiteral tmlIdentifierLiteral = (TmlIdentifierLiteral)theEObject;
        T result = caseTmlIdentifierLiteral(tmlIdentifierLiteral);
        if (result == null) result = caseExpression(tmlIdentifierLiteral);
        if (result == null) result = caseSTimeout(tmlIdentifierLiteral);
        if (result == null) result = caseSBreakOnNoLock(tmlIdentifierLiteral);
        if (result == null) result = caseSynchronizedArgument(tmlIdentifierLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.FOR_ALL_LITERAL:
      {
        ForAllLiteral forAllLiteral = (ForAllLiteral)theEObject;
        T result = caseForAllLiteral(forAllLiteral);
        if (result == null) result = caseExpression(forAllLiteral);
        if (result == null) result = caseSTimeout(forAllLiteral);
        if (result == null) result = caseSBreakOnNoLock(forAllLiteral);
        if (result == null) result = caseSynchronizedArgument(forAllLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.NULL_LITERAL:
      {
        NullLiteral nullLiteral = (NullLiteral)theEObject;
        T result = caseNullLiteral(nullLiteral);
        if (result == null) result = caseExpression(nullLiteral);
        if (result == null) result = caseSTimeout(nullLiteral);
        if (result == null) result = caseSBreakOnNoLock(nullLiteral);
        if (result == null) result = caseSynchronizedArgument(nullLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.INT_TYPE:
      {
        IntType intType = (IntType)theEObject;
        T result = caseIntType(intType);
        if (result == null) result = casePropertyType(intType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.STRING_TYPE:
      {
        StringType stringType = (StringType)theEObject;
        T result = caseStringType(stringType);
        if (result == null) result = casePropertyType(stringType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.BOOLEAN_TYPE:
      {
        BooleanType booleanType = (BooleanType)theEObject;
        T result = caseBooleanType(booleanType);
        if (result == null) result = casePropertyType(booleanType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.DATE_TYPE:
      {
        DateType dateType = (DateType)theEObject;
        T result = caseDateType(dateType);
        if (result == null) result = casePropertyType(dateType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.FLOAT_TYPE:
      {
        FloatType floatType = (FloatType)theEObject;
        T result = caseFloatType(floatType);
        if (result == null) result = casePropertyType(floatType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.BINARY_TYPE:
      {
        BinaryType binaryType = (BinaryType)theEObject;
        T result = caseBinaryType(binaryType);
        if (result == null) result = casePropertyType(binaryType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.CLOCK_TIME_TYPE:
      {
        ClockTimeType clockTimeType = (ClockTimeType)theEObject;
        T result = caseClockTimeType(clockTimeType);
        if (result == null) result = casePropertyType(clockTimeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.MEMO_TYPE:
      {
        MemoType memoType = (MemoType)theEObject;
        T result = caseMemoType(memoType);
        if (result == null) result = casePropertyType(memoType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.TIMESTAMP_TYPE:
      {
        TimestampType timestampType = (TimestampType)theEObject;
        T result = caseTimestampType(timestampType);
        if (result == null) result = casePropertyType(timestampType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.PERCENTAGE_TYPE:
      {
        PercentageType percentageType = (PercentageType)theEObject;
        T result = casePercentageType(percentageType);
        if (result == null) result = casePropertyType(percentageType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.SELECTION_TYPE:
      {
        SelectionType selectionType = (SelectionType)theEObject;
        T result = caseSelectionType(selectionType);
        if (result == null) result = casePropertyType(selectionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.ARRAY_TYPE:
      {
        ArrayType arrayType = (ArrayType)theEObject;
        T result = caseArrayType(arrayType);
        if (result == null) result = caseMessageType(arrayType);
        if (result == null) result = caseMessageArgument(arrayType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.SIMPLE_TYPE:
      {
        SimpleType simpleType = (SimpleType)theEObject;
        T result = caseSimpleType(simpleType);
        if (result == null) result = caseMessageType(simpleType);
        if (result == null) result = caseMessageArgument(simpleType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.ARRAY_ELEMENT_TYPE:
      {
        ArrayElementType arrayElementType = (ArrayElementType)theEObject;
        T result = caseArrayElementType(arrayElementType);
        if (result == null) result = caseMessageType(arrayElementType);
        if (result == null) result = caseMessageArgument(arrayElementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.IGNORE:
      {
        Ignore ignore = (Ignore)theEObject;
        T result = caseIgnore(ignore);
        if (result == null) result = caseMessageMode(ignore);
        if (result == null) result = caseMessageArgument(ignore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NavascriptPackage.OVERWRITE:
      {
        Overwrite overwrite = (Overwrite)theEObject;
        T result = caseOverwrite(overwrite);
        if (result == null) result = caseMessageMode(overwrite);
        if (result == null) result = caseMessageArgument(overwrite);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navascript</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navascript</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavascript(Navascript object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Top Level Statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Top Level Statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTopLevelStatements(TopLevelStatements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Top Level Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Top Level Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTopLevelStatement(TopLevelStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inner Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inner Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInnerBody(InnerBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block Statements</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block Statements</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlockStatements(BlockStatements object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Synchronized</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Synchronized</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSynchronized(Synchronized object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Synchronized Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Synchronized Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSynchronizedArguments(SynchronizedArguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Synchronized Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Synchronized Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSynchronizedArgument(SynchronizedArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SKey</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SKey</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSKey(SKey object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>STimeout</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>STimeout</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTimeout(STimeout object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SBreak On No Lock</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SBreak On No Lock</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSBreakOnNoLock(SBreakOnNoLock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Break</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Break</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBreak(Break object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Break Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Break Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBreakParameter(BreakParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Break Parameters</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Break Parameters</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBreakParameters(BreakParameters object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Validations</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Validations</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValidations(Validations object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Define</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Define</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefine(Define object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Check</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Check</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCheck(Check object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Check Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Check Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCheckAttribute(CheckAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Or Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Or Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralOrExpression(LiteralOrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrint(Print object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Log</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Log</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLog(Log object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Finally</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Finally</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFinally(Finally object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Methods</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Methods</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethods(Methods object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethod(Method object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoop(Loop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Include</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Include</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInclude(Include object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Anti Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Anti Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAntiMessage(AntiMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessage(Message object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessageArray(MessageArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message Array Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message Array Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessageArrayElement(MessageArrayElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessageArgument(MessageArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessageArguments(MessageArguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMap(Map object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Or Setter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Or Setter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodOrSetter(MethodOrSetter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Adapter Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Adapter Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdapterMethod(AdapterMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Setter Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Setter Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetterField(SetterField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mapped Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mapped Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMappedMessage(MappedMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mapped Array Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mapped Array Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMappedArrayField(MappedArrayField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mapped Array Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mapped Array Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMappedArrayMessage(MappedArrayMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Key Value Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Key Value Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKeyValueArguments(KeyValueArguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Key Value Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Key Value Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKeyValueArgument(KeyValueArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVar(Var object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarArray(VarArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Array Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Array Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarArrayElement(VarArrayElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarElement(VarElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarArguments(VarArguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarArgument(VarArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarType(VarType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarMode(VarMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProperty(Property object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selection Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selection Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectionArray(SelectionArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selection Array Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selection Array Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectionArrayElement(SelectionArrayElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Option</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Option</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOption(Option object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyArguments(PropertyArguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyArgument(PropertyArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Length Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Length Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLengthArgument(LengthArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Direction Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Direction Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirectionArgument(DirectionArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Description Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Description Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDescriptionArgument(DescriptionArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cardinality Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cardinality Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCardinalityArgument(CardinalityArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeArgument(TypeArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Type Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Type Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubTypeArgument(SubTypeArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional Expressions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional Expressions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionalExpressions(ConditionalExpressions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionalExpression(ConditionalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For All Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For All Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForAllIdentifier(ForAllIdentifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionIdentifier(FunctionIdentifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mappable Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mappable Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMappableIdentifier(MappableIdentifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tml Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tml Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTmlIdentifier(TmlIdentifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyType(PropertyType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessageType(MessageType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessageMode(MessageMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Or Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Or Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndOrExpression(AndOrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparison(Comparison object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquals(Equals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlus(Plus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinus(Minus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi Or Div</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi Or Div</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiOrDiv(MultiOrDiv object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Negation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Negation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanNegation(BooleanNegation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Signed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Signed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticSigned(ArithmeticSigned object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionLiteral(ExpressionLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberLiteral(NumberLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteral(StringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteral(BooleanLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCallLiteral(FunctionCallLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mappable Identifier Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mappable Identifier Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMappableIdentifierLiteral(MappableIdentifierLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tml Identifier Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tml Identifier Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTmlIdentifierLiteral(TmlIdentifierLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For All Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For All Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForAllLiteral(ForAllLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullLiteral(NullLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntType(IntType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringType(StringType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanType(BooleanType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Date Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Date Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDateType(DateType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Float Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Float Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFloatType(FloatType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryType(BinaryType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Clock Time Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Clock Time Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClockTimeType(ClockTimeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Memo Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Memo Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemoType(MemoType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timestamp Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timestamp Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimestampType(TimestampType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Percentage Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Percentage Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePercentageType(PercentageType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selection Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selection Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectionType(SelectionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayType(ArrayType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleType(SimpleType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Element Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Element Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayElementType(ArrayElementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ignore</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ignore</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIgnore(Ignore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Overwrite</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Overwrite</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOverwrite(Overwrite object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //NavascriptSwitch
