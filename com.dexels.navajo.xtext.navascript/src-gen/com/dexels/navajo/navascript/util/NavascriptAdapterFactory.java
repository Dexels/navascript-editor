/**
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.navascript.util;

import com.dexels.navajo.navascript.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.dexels.navajo.navascript.NavascriptPackage
 * @generated
 */
public class NavascriptAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static NavascriptPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavascriptAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = NavascriptPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NavascriptSwitch<Adapter> modelSwitch =
    new NavascriptSwitch<Adapter>()
    {
      @Override
      public Adapter caseNavascript(Navascript object)
      {
        return createNavascriptAdapter();
      }
      @Override
      public Adapter caseTopLevelStatements(TopLevelStatements object)
      {
        return createTopLevelStatementsAdapter();
      }
      @Override
      public Adapter caseTopLevelStatement(TopLevelStatement object)
      {
        return createTopLevelStatementAdapter();
      }
      @Override
      public Adapter caseInnerBody(InnerBody object)
      {
        return createInnerBodyAdapter();
      }
      @Override
      public Adapter caseBlockStatements(BlockStatements object)
      {
        return createBlockStatementsAdapter();
      }
      @Override
      public Adapter caseDebugStatement(DebugStatement object)
      {
        return createDebugStatementAdapter();
      }
      @Override
      public Adapter caseSynchronized(Synchronized object)
      {
        return createSynchronizedAdapter();
      }
      @Override
      public Adapter caseSynchronizedArguments(SynchronizedArguments object)
      {
        return createSynchronizedArgumentsAdapter();
      }
      @Override
      public Adapter caseSynchronizedArgument(SynchronizedArgument object)
      {
        return createSynchronizedArgumentAdapter();
      }
      @Override
      public Adapter caseSKey(SKey object)
      {
        return createSKeyAdapter();
      }
      @Override
      public Adapter caseSTimeout(STimeout object)
      {
        return createSTimeoutAdapter();
      }
      @Override
      public Adapter caseSBreakOnNoLock(SBreakOnNoLock object)
      {
        return createSBreakOnNoLockAdapter();
      }
      @Override
      public Adapter caseBreak(Break object)
      {
        return createBreakAdapter();
      }
      @Override
      public Adapter caseBreakParameter(BreakParameter object)
      {
        return createBreakParameterAdapter();
      }
      @Override
      public Adapter caseBreakParameters(BreakParameters object)
      {
        return createBreakParametersAdapter();
      }
      @Override
      public Adapter caseValidations(Validations object)
      {
        return createValidationsAdapter();
      }
      @Override
      public Adapter caseDefine(Define object)
      {
        return createDefineAdapter();
      }
      @Override
      public Adapter caseCheck(Check object)
      {
        return createCheckAdapter();
      }
      @Override
      public Adapter caseCheckAttribute(CheckAttribute object)
      {
        return createCheckAttributeAdapter();
      }
      @Override
      public Adapter caseLiteralOrExpression(LiteralOrExpression object)
      {
        return createLiteralOrExpressionAdapter();
      }
      @Override
      public Adapter casePrint(Print object)
      {
        return createPrintAdapter();
      }
      @Override
      public Adapter caseLog(Log object)
      {
        return createLogAdapter();
      }
      @Override
      public Adapter caseFinally(Finally object)
      {
        return createFinallyAdapter();
      }
      @Override
      public Adapter caseMethods(Methods object)
      {
        return createMethodsAdapter();
      }
      @Override
      public Adapter caseMethod(Method object)
      {
        return createMethodAdapter();
      }
      @Override
      public Adapter caseLoop(Loop object)
      {
        return createLoopAdapter();
      }
      @Override
      public Adapter caseInclude(Include object)
      {
        return createIncludeAdapter();
      }
      @Override
      public Adapter caseAntiMessage(AntiMessage object)
      {
        return createAntiMessageAdapter();
      }
      @Override
      public Adapter caseMessage(Message object)
      {
        return createMessageAdapter();
      }
      @Override
      public Adapter caseMessageArray(MessageArray object)
      {
        return createMessageArrayAdapter();
      }
      @Override
      public Adapter caseMessageArrayElement(MessageArrayElement object)
      {
        return createMessageArrayElementAdapter();
      }
      @Override
      public Adapter caseMessageArgument(MessageArgument object)
      {
        return createMessageArgumentAdapter();
      }
      @Override
      public Adapter caseMessageArguments(MessageArguments object)
      {
        return createMessageArgumentsAdapter();
      }
      @Override
      public Adapter caseMap(Map object)
      {
        return createMapAdapter();
      }
      @Override
      public Adapter caseMethodOrSetter(MethodOrSetter object)
      {
        return createMethodOrSetterAdapter();
      }
      @Override
      public Adapter caseAdapterMethod(AdapterMethod object)
      {
        return createAdapterMethodAdapter();
      }
      @Override
      public Adapter caseSetterField(SetterField object)
      {
        return createSetterFieldAdapter();
      }
      @Override
      public Adapter caseMappedMessage(MappedMessage object)
      {
        return createMappedMessageAdapter();
      }
      @Override
      public Adapter caseMappedArrayField(MappedArrayField object)
      {
        return createMappedArrayFieldAdapter();
      }
      @Override
      public Adapter caseMappedArrayMessage(MappedArrayMessage object)
      {
        return createMappedArrayMessageAdapter();
      }
      @Override
      public Adapter caseKeyValueArguments(KeyValueArguments object)
      {
        return createKeyValueArgumentsAdapter();
      }
      @Override
      public Adapter caseKeyValueArgument(KeyValueArgument object)
      {
        return createKeyValueArgumentAdapter();
      }
      @Override
      public Adapter caseVar(Var object)
      {
        return createVarAdapter();
      }
      @Override
      public Adapter caseVarArray(VarArray object)
      {
        return createVarArrayAdapter();
      }
      @Override
      public Adapter caseVarArrayElement(VarArrayElement object)
      {
        return createVarArrayElementAdapter();
      }
      @Override
      public Adapter caseVarElement(VarElement object)
      {
        return createVarElementAdapter();
      }
      @Override
      public Adapter caseVarArguments(VarArguments object)
      {
        return createVarArgumentsAdapter();
      }
      @Override
      public Adapter caseVarArgument(VarArgument object)
      {
        return createVarArgumentAdapter();
      }
      @Override
      public Adapter caseVarType(VarType object)
      {
        return createVarTypeAdapter();
      }
      @Override
      public Adapter caseVarMode(VarMode object)
      {
        return createVarModeAdapter();
      }
      @Override
      public Adapter caseProperty(Property object)
      {
        return createPropertyAdapter();
      }
      @Override
      public Adapter caseSelectionArray(SelectionArray object)
      {
        return createSelectionArrayAdapter();
      }
      @Override
      public Adapter caseSelectionArrayElement(SelectionArrayElement object)
      {
        return createSelectionArrayElementAdapter();
      }
      @Override
      public Adapter caseOption(Option object)
      {
        return createOptionAdapter();
      }
      @Override
      public Adapter casePropertyArguments(PropertyArguments object)
      {
        return createPropertyArgumentsAdapter();
      }
      @Override
      public Adapter casePropertyArgument(PropertyArgument object)
      {
        return createPropertyArgumentAdapter();
      }
      @Override
      public Adapter caseLengthArgument(LengthArgument object)
      {
        return createLengthArgumentAdapter();
      }
      @Override
      public Adapter caseDirectionArgument(DirectionArgument object)
      {
        return createDirectionArgumentAdapter();
      }
      @Override
      public Adapter caseDescriptionArgument(DescriptionArgument object)
      {
        return createDescriptionArgumentAdapter();
      }
      @Override
      public Adapter caseCardinalityArgument(CardinalityArgument object)
      {
        return createCardinalityArgumentAdapter();
      }
      @Override
      public Adapter caseTypeArgument(TypeArgument object)
      {
        return createTypeArgumentAdapter();
      }
      @Override
      public Adapter caseSubTypeArgument(SubTypeArgument object)
      {
        return createSubTypeArgumentAdapter();
      }
      @Override
      public Adapter caseConditionalExpressions(ConditionalExpressions object)
      {
        return createConditionalExpressionsAdapter();
      }
      @Override
      public Adapter caseConditionalExpression(ConditionalExpression object)
      {
        return createConditionalExpressionAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseForAllIdentifier(ForAllIdentifier object)
      {
        return createForAllIdentifierAdapter();
      }
      @Override
      public Adapter caseFunctionIdentifier(FunctionIdentifier object)
      {
        return createFunctionIdentifierAdapter();
      }
      @Override
      public Adapter caseMappableIdentifier(MappableIdentifier object)
      {
        return createMappableIdentifierAdapter();
      }
      @Override
      public Adapter caseTmlIdentifier(TmlIdentifier object)
      {
        return createTmlIdentifierAdapter();
      }
      @Override
      public Adapter casePropertyType(PropertyType object)
      {
        return createPropertyTypeAdapter();
      }
      @Override
      public Adapter caseMessageType(MessageType object)
      {
        return createMessageTypeAdapter();
      }
      @Override
      public Adapter caseMessageMode(MessageMode object)
      {
        return createMessageModeAdapter();
      }
      @Override
      public Adapter caseAndOrExpression(AndOrExpression object)
      {
        return createAndOrExpressionAdapter();
      }
      @Override
      public Adapter caseComparison(Comparison object)
      {
        return createComparisonAdapter();
      }
      @Override
      public Adapter caseEquals(Equals object)
      {
        return createEqualsAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseMultiOrDiv(MultiOrDiv object)
      {
        return createMultiOrDivAdapter();
      }
      @Override
      public Adapter caseBooleanNegation(BooleanNegation object)
      {
        return createBooleanNegationAdapter();
      }
      @Override
      public Adapter caseArithmeticSigned(ArithmeticSigned object)
      {
        return createArithmeticSignedAdapter();
      }
      @Override
      public Adapter caseExpressionLiteral(ExpressionLiteral object)
      {
        return createExpressionLiteralAdapter();
      }
      @Override
      public Adapter caseNumberLiteral(NumberLiteral object)
      {
        return createNumberLiteralAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseBooleanLiteral(BooleanLiteral object)
      {
        return createBooleanLiteralAdapter();
      }
      @Override
      public Adapter caseFunctionCallLiteral(FunctionCallLiteral object)
      {
        return createFunctionCallLiteralAdapter();
      }
      @Override
      public Adapter caseMappableIdentifierLiteral(MappableIdentifierLiteral object)
      {
        return createMappableIdentifierLiteralAdapter();
      }
      @Override
      public Adapter caseTmlIdentifierLiteral(TmlIdentifierLiteral object)
      {
        return createTmlIdentifierLiteralAdapter();
      }
      @Override
      public Adapter caseForAllLiteral(ForAllLiteral object)
      {
        return createForAllLiteralAdapter();
      }
      @Override
      public Adapter caseNullLiteral(NullLiteral object)
      {
        return createNullLiteralAdapter();
      }
      @Override
      public Adapter caseTodayLiteral(TodayLiteral object)
      {
        return createTodayLiteralAdapter();
      }
      @Override
      public Adapter caseCurrentOutDoc(CurrentOutDoc object)
      {
        return createCurrentOutDocAdapter();
      }
      @Override
      public Adapter caseCurrentInDoc(CurrentInDoc object)
      {
        return createCurrentInDocAdapter();
      }
      @Override
      public Adapter caseCurrentVarDoc(CurrentVarDoc object)
      {
        return createCurrentVarDocAdapter();
      }
      @Override
      public Adapter caseIntType(IntType object)
      {
        return createIntTypeAdapter();
      }
      @Override
      public Adapter caseStringType(StringType object)
      {
        return createStringTypeAdapter();
      }
      @Override
      public Adapter caseBooleanType(BooleanType object)
      {
        return createBooleanTypeAdapter();
      }
      @Override
      public Adapter caseDateType(DateType object)
      {
        return createDateTypeAdapter();
      }
      @Override
      public Adapter caseFloatType(FloatType object)
      {
        return createFloatTypeAdapter();
      }
      @Override
      public Adapter caseBinaryType(BinaryType object)
      {
        return createBinaryTypeAdapter();
      }
      @Override
      public Adapter caseClockTimeType(ClockTimeType object)
      {
        return createClockTimeTypeAdapter();
      }
      @Override
      public Adapter caseMemoType(MemoType object)
      {
        return createMemoTypeAdapter();
      }
      @Override
      public Adapter caseTimestampType(TimestampType object)
      {
        return createTimestampTypeAdapter();
      }
      @Override
      public Adapter casePercentageType(PercentageType object)
      {
        return createPercentageTypeAdapter();
      }
      @Override
      public Adapter caseSelectionType(SelectionType object)
      {
        return createSelectionTypeAdapter();
      }
      @Override
      public Adapter caseArrayType(ArrayType object)
      {
        return createArrayTypeAdapter();
      }
      @Override
      public Adapter caseSimpleType(SimpleType object)
      {
        return createSimpleTypeAdapter();
      }
      @Override
      public Adapter caseArrayElementType(ArrayElementType object)
      {
        return createArrayElementTypeAdapter();
      }
      @Override
      public Adapter caseIgnore(Ignore object)
      {
        return createIgnoreAdapter();
      }
      @Override
      public Adapter caseOverwrite(Overwrite object)
      {
        return createOverwriteAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Navascript <em>Navascript</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Navascript
   * @generated
   */
  public Adapter createNavascriptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.TopLevelStatements <em>Top Level Statements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.TopLevelStatements
   * @generated
   */
  public Adapter createTopLevelStatementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.TopLevelStatement <em>Top Level Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.TopLevelStatement
   * @generated
   */
  public Adapter createTopLevelStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.InnerBody <em>Inner Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.InnerBody
   * @generated
   */
  public Adapter createInnerBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.BlockStatements <em>Block Statements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.BlockStatements
   * @generated
   */
  public Adapter createBlockStatementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.DebugStatement <em>Debug Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.DebugStatement
   * @generated
   */
  public Adapter createDebugStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Synchronized <em>Synchronized</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Synchronized
   * @generated
   */
  public Adapter createSynchronizedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.SynchronizedArguments <em>Synchronized Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.SynchronizedArguments
   * @generated
   */
  public Adapter createSynchronizedArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.SynchronizedArgument <em>Synchronized Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.SynchronizedArgument
   * @generated
   */
  public Adapter createSynchronizedArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.SKey <em>SKey</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.SKey
   * @generated
   */
  public Adapter createSKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.STimeout <em>STimeout</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.STimeout
   * @generated
   */
  public Adapter createSTimeoutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.SBreakOnNoLock <em>SBreak On No Lock</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.SBreakOnNoLock
   * @generated
   */
  public Adapter createSBreakOnNoLockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Break <em>Break</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Break
   * @generated
   */
  public Adapter createBreakAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.BreakParameter <em>Break Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.BreakParameter
   * @generated
   */
  public Adapter createBreakParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.BreakParameters <em>Break Parameters</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.BreakParameters
   * @generated
   */
  public Adapter createBreakParametersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Validations <em>Validations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Validations
   * @generated
   */
  public Adapter createValidationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Define <em>Define</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Define
   * @generated
   */
  public Adapter createDefineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Check <em>Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Check
   * @generated
   */
  public Adapter createCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.CheckAttribute <em>Check Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.CheckAttribute
   * @generated
   */
  public Adapter createCheckAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.LiteralOrExpression <em>Literal Or Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.LiteralOrExpression
   * @generated
   */
  public Adapter createLiteralOrExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Print <em>Print</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Print
   * @generated
   */
  public Adapter createPrintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Log <em>Log</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Log
   * @generated
   */
  public Adapter createLogAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Finally <em>Finally</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Finally
   * @generated
   */
  public Adapter createFinallyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Methods <em>Methods</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Methods
   * @generated
   */
  public Adapter createMethodsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Method <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Method
   * @generated
   */
  public Adapter createMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Loop <em>Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Loop
   * @generated
   */
  public Adapter createLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Include <em>Include</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Include
   * @generated
   */
  public Adapter createIncludeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.AntiMessage <em>Anti Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.AntiMessage
   * @generated
   */
  public Adapter createAntiMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Message <em>Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Message
   * @generated
   */
  public Adapter createMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MessageArray <em>Message Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MessageArray
   * @generated
   */
  public Adapter createMessageArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MessageArrayElement <em>Message Array Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MessageArrayElement
   * @generated
   */
  public Adapter createMessageArrayElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MessageArgument <em>Message Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MessageArgument
   * @generated
   */
  public Adapter createMessageArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MessageArguments <em>Message Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MessageArguments
   * @generated
   */
  public Adapter createMessageArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Map <em>Map</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Map
   * @generated
   */
  public Adapter createMapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MethodOrSetter <em>Method Or Setter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MethodOrSetter
   * @generated
   */
  public Adapter createMethodOrSetterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.AdapterMethod <em>Adapter Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.AdapterMethod
   * @generated
   */
  public Adapter createAdapterMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.SetterField <em>Setter Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.SetterField
   * @generated
   */
  public Adapter createSetterFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MappedMessage <em>Mapped Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MappedMessage
   * @generated
   */
  public Adapter createMappedMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MappedArrayField <em>Mapped Array Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MappedArrayField
   * @generated
   */
  public Adapter createMappedArrayFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MappedArrayMessage <em>Mapped Array Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MappedArrayMessage
   * @generated
   */
  public Adapter createMappedArrayMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.KeyValueArguments <em>Key Value Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.KeyValueArguments
   * @generated
   */
  public Adapter createKeyValueArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.KeyValueArgument <em>Key Value Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.KeyValueArgument
   * @generated
   */
  public Adapter createKeyValueArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Var <em>Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Var
   * @generated
   */
  public Adapter createVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.VarArray <em>Var Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.VarArray
   * @generated
   */
  public Adapter createVarArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.VarArrayElement <em>Var Array Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.VarArrayElement
   * @generated
   */
  public Adapter createVarArrayElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.VarElement <em>Var Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.VarElement
   * @generated
   */
  public Adapter createVarElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.VarArguments <em>Var Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.VarArguments
   * @generated
   */
  public Adapter createVarArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.VarArgument <em>Var Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.VarArgument
   * @generated
   */
  public Adapter createVarArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.VarType <em>Var Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.VarType
   * @generated
   */
  public Adapter createVarTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.VarMode <em>Var Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.VarMode
   * @generated
   */
  public Adapter createVarModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Property <em>Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Property
   * @generated
   */
  public Adapter createPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.SelectionArray <em>Selection Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.SelectionArray
   * @generated
   */
  public Adapter createSelectionArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.SelectionArrayElement <em>Selection Array Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.SelectionArrayElement
   * @generated
   */
  public Adapter createSelectionArrayElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Option <em>Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Option
   * @generated
   */
  public Adapter createOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.PropertyArguments <em>Property Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.PropertyArguments
   * @generated
   */
  public Adapter createPropertyArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.PropertyArgument <em>Property Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.PropertyArgument
   * @generated
   */
  public Adapter createPropertyArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.LengthArgument <em>Length Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.LengthArgument
   * @generated
   */
  public Adapter createLengthArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.DirectionArgument <em>Direction Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.DirectionArgument
   * @generated
   */
  public Adapter createDirectionArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.DescriptionArgument <em>Description Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.DescriptionArgument
   * @generated
   */
  public Adapter createDescriptionArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.CardinalityArgument <em>Cardinality Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.CardinalityArgument
   * @generated
   */
  public Adapter createCardinalityArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.TypeArgument <em>Type Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.TypeArgument
   * @generated
   */
  public Adapter createTypeArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.SubTypeArgument <em>Sub Type Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.SubTypeArgument
   * @generated
   */
  public Adapter createSubTypeArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.ConditionalExpressions <em>Conditional Expressions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.ConditionalExpressions
   * @generated
   */
  public Adapter createConditionalExpressionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.ConditionalExpression <em>Conditional Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.ConditionalExpression
   * @generated
   */
  public Adapter createConditionalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.ForAllIdentifier <em>For All Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.ForAllIdentifier
   * @generated
   */
  public Adapter createForAllIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.FunctionIdentifier <em>Function Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.FunctionIdentifier
   * @generated
   */
  public Adapter createFunctionIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MappableIdentifier <em>Mappable Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MappableIdentifier
   * @generated
   */
  public Adapter createMappableIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.TmlIdentifier <em>Tml Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.TmlIdentifier
   * @generated
   */
  public Adapter createTmlIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.PropertyType <em>Property Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.PropertyType
   * @generated
   */
  public Adapter createPropertyTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MessageType <em>Message Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MessageType
   * @generated
   */
  public Adapter createMessageTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MessageMode <em>Message Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MessageMode
   * @generated
   */
  public Adapter createMessageModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.AndOrExpression <em>And Or Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.AndOrExpression
   * @generated
   */
  public Adapter createAndOrExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Comparison <em>Comparison</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Comparison
   * @generated
   */
  public Adapter createComparisonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Equals <em>Equals</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Equals
   * @generated
   */
  public Adapter createEqualsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MultiOrDiv <em>Multi Or Div</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MultiOrDiv
   * @generated
   */
  public Adapter createMultiOrDivAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.BooleanNegation <em>Boolean Negation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.BooleanNegation
   * @generated
   */
  public Adapter createBooleanNegationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.ArithmeticSigned <em>Arithmetic Signed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.ArithmeticSigned
   * @generated
   */
  public Adapter createArithmeticSignedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.ExpressionLiteral <em>Expression Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.ExpressionLiteral
   * @generated
   */
  public Adapter createExpressionLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.NumberLiteral <em>Number Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.NumberLiteral
   * @generated
   */
  public Adapter createNumberLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.BooleanLiteral <em>Boolean Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.BooleanLiteral
   * @generated
   */
  public Adapter createBooleanLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.FunctionCallLiteral <em>Function Call Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.FunctionCallLiteral
   * @generated
   */
  public Adapter createFunctionCallLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MappableIdentifierLiteral <em>Mappable Identifier Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MappableIdentifierLiteral
   * @generated
   */
  public Adapter createMappableIdentifierLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.TmlIdentifierLiteral <em>Tml Identifier Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.TmlIdentifierLiteral
   * @generated
   */
  public Adapter createTmlIdentifierLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.ForAllLiteral <em>For All Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.ForAllLiteral
   * @generated
   */
  public Adapter createForAllLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.NullLiteral <em>Null Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.NullLiteral
   * @generated
   */
  public Adapter createNullLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.TodayLiteral <em>Today Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.TodayLiteral
   * @generated
   */
  public Adapter createTodayLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.CurrentOutDoc <em>Current Out Doc</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.CurrentOutDoc
   * @generated
   */
  public Adapter createCurrentOutDocAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.CurrentInDoc <em>Current In Doc</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.CurrentInDoc
   * @generated
   */
  public Adapter createCurrentInDocAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.CurrentVarDoc <em>Current Var Doc</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.CurrentVarDoc
   * @generated
   */
  public Adapter createCurrentVarDocAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.IntType <em>Int Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.IntType
   * @generated
   */
  public Adapter createIntTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.StringType <em>String Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.StringType
   * @generated
   */
  public Adapter createStringTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.BooleanType <em>Boolean Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.BooleanType
   * @generated
   */
  public Adapter createBooleanTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.DateType <em>Date Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.DateType
   * @generated
   */
  public Adapter createDateTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.FloatType <em>Float Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.FloatType
   * @generated
   */
  public Adapter createFloatTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.BinaryType <em>Binary Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.BinaryType
   * @generated
   */
  public Adapter createBinaryTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.ClockTimeType <em>Clock Time Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.ClockTimeType
   * @generated
   */
  public Adapter createClockTimeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.MemoType <em>Memo Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.MemoType
   * @generated
   */
  public Adapter createMemoTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.TimestampType <em>Timestamp Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.TimestampType
   * @generated
   */
  public Adapter createTimestampTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.PercentageType <em>Percentage Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.PercentageType
   * @generated
   */
  public Adapter createPercentageTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.SelectionType <em>Selection Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.SelectionType
   * @generated
   */
  public Adapter createSelectionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.ArrayType <em>Array Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.ArrayType
   * @generated
   */
  public Adapter createArrayTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.SimpleType <em>Simple Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.SimpleType
   * @generated
   */
  public Adapter createSimpleTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.ArrayElementType <em>Array Element Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.ArrayElementType
   * @generated
   */
  public Adapter createArrayElementTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Ignore <em>Ignore</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Ignore
   * @generated
   */
  public Adapter createIgnoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dexels.navajo.navascript.Overwrite <em>Overwrite</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dexels.navajo.navascript.Overwrite
   * @generated
   */
  public Adapter createOverwriteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //NavascriptAdapterFactory
