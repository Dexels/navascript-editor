/**
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.navascript.impl;

import com.dexels.navajo.navascript.ConditionalExpressions;
import com.dexels.navajo.navascript.MappedArrayField;
import com.dexels.navajo.navascript.MappedArrayMessage;
import com.dexels.navajo.navascript.NavascriptPackage;
import com.dexels.navajo.navascript.Property;
import com.dexels.navajo.navascript.PropertyArguments;
import com.dexels.navajo.navascript.SelectionArray;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dexels.navajo.navascript.impl.PropertyImpl#getPropertyName <em>Property Name</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.PropertyImpl#getArguments <em>Arguments</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.PropertyImpl#getExpressionList <em>Expression List</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.PropertyImpl#getSelectionArray <em>Selection Array</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.PropertyImpl#getArrayField <em>Array Field</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.PropertyImpl#getArrayMessage <em>Array Message</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyImpl extends MinimalEObjectImpl.Container implements Property
{
  /**
   * The default value of the '{@link #getPropertyName() <em>Property Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyName()
   * @generated
   * @ordered
   */
  protected static final String PROPERTY_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPropertyName() <em>Property Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyName()
   * @generated
   * @ordered
   */
  protected String propertyName = PROPERTY_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getArguments() <em>Arguments</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArguments()
   * @generated
   * @ordered
   */
  protected PropertyArguments arguments;

  /**
   * The cached value of the '{@link #getExpressionList() <em>Expression List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionList()
   * @generated
   * @ordered
   */
  protected ConditionalExpressions expressionList;

  /**
   * The cached value of the '{@link #getSelectionArray() <em>Selection Array</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectionArray()
   * @generated
   * @ordered
   */
  protected SelectionArray selectionArray;

  /**
   * The cached value of the '{@link #getArrayField() <em>Array Field</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArrayField()
   * @generated
   * @ordered
   */
  protected MappedArrayField arrayField;

  /**
   * The cached value of the '{@link #getArrayMessage() <em>Array Message</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArrayMessage()
   * @generated
   * @ordered
   */
  protected MappedArrayMessage arrayMessage;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NavascriptPackage.Literals.PROPERTY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPropertyName()
  {
    return propertyName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPropertyName(String newPropertyName)
  {
    String oldPropertyName = propertyName;
    propertyName = newPropertyName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.PROPERTY__PROPERTY_NAME, oldPropertyName, propertyName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyArguments getArguments()
  {
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArguments(PropertyArguments newArguments, NotificationChain msgs)
  {
    PropertyArguments oldArguments = arguments;
    arguments = newArguments;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.PROPERTY__ARGUMENTS, oldArguments, newArguments);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArguments(PropertyArguments newArguments)
  {
    if (newArguments != arguments)
    {
      NotificationChain msgs = null;
      if (arguments != null)
        msgs = ((InternalEObject)arguments).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.PROPERTY__ARGUMENTS, null, msgs);
      if (newArguments != null)
        msgs = ((InternalEObject)newArguments).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.PROPERTY__ARGUMENTS, null, msgs);
      msgs = basicSetArguments(newArguments, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.PROPERTY__ARGUMENTS, newArguments, newArguments));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalExpressions getExpressionList()
  {
    return expressionList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionList(ConditionalExpressions newExpressionList, NotificationChain msgs)
  {
    ConditionalExpressions oldExpressionList = expressionList;
    expressionList = newExpressionList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.PROPERTY__EXPRESSION_LIST, oldExpressionList, newExpressionList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpressionList(ConditionalExpressions newExpressionList)
  {
    if (newExpressionList != expressionList)
    {
      NotificationChain msgs = null;
      if (expressionList != null)
        msgs = ((InternalEObject)expressionList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.PROPERTY__EXPRESSION_LIST, null, msgs);
      if (newExpressionList != null)
        msgs = ((InternalEObject)newExpressionList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.PROPERTY__EXPRESSION_LIST, null, msgs);
      msgs = basicSetExpressionList(newExpressionList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.PROPERTY__EXPRESSION_LIST, newExpressionList, newExpressionList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectionArray getSelectionArray()
  {
    return selectionArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelectionArray(SelectionArray newSelectionArray, NotificationChain msgs)
  {
    SelectionArray oldSelectionArray = selectionArray;
    selectionArray = newSelectionArray;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.PROPERTY__SELECTION_ARRAY, oldSelectionArray, newSelectionArray);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelectionArray(SelectionArray newSelectionArray)
  {
    if (newSelectionArray != selectionArray)
    {
      NotificationChain msgs = null;
      if (selectionArray != null)
        msgs = ((InternalEObject)selectionArray).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.PROPERTY__SELECTION_ARRAY, null, msgs);
      if (newSelectionArray != null)
        msgs = ((InternalEObject)newSelectionArray).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.PROPERTY__SELECTION_ARRAY, null, msgs);
      msgs = basicSetSelectionArray(newSelectionArray, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.PROPERTY__SELECTION_ARRAY, newSelectionArray, newSelectionArray));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappedArrayField getArrayField()
  {
    return arrayField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArrayField(MappedArrayField newArrayField, NotificationChain msgs)
  {
    MappedArrayField oldArrayField = arrayField;
    arrayField = newArrayField;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.PROPERTY__ARRAY_FIELD, oldArrayField, newArrayField);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArrayField(MappedArrayField newArrayField)
  {
    if (newArrayField != arrayField)
    {
      NotificationChain msgs = null;
      if (arrayField != null)
        msgs = ((InternalEObject)arrayField).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.PROPERTY__ARRAY_FIELD, null, msgs);
      if (newArrayField != null)
        msgs = ((InternalEObject)newArrayField).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.PROPERTY__ARRAY_FIELD, null, msgs);
      msgs = basicSetArrayField(newArrayField, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.PROPERTY__ARRAY_FIELD, newArrayField, newArrayField));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappedArrayMessage getArrayMessage()
  {
    return arrayMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArrayMessage(MappedArrayMessage newArrayMessage, NotificationChain msgs)
  {
    MappedArrayMessage oldArrayMessage = arrayMessage;
    arrayMessage = newArrayMessage;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.PROPERTY__ARRAY_MESSAGE, oldArrayMessage, newArrayMessage);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArrayMessage(MappedArrayMessage newArrayMessage)
  {
    if (newArrayMessage != arrayMessage)
    {
      NotificationChain msgs = null;
      if (arrayMessage != null)
        msgs = ((InternalEObject)arrayMessage).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.PROPERTY__ARRAY_MESSAGE, null, msgs);
      if (newArrayMessage != null)
        msgs = ((InternalEObject)newArrayMessage).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.PROPERTY__ARRAY_MESSAGE, null, msgs);
      msgs = basicSetArrayMessage(newArrayMessage, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.PROPERTY__ARRAY_MESSAGE, newArrayMessage, newArrayMessage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NavascriptPackage.PROPERTY__ARGUMENTS:
        return basicSetArguments(null, msgs);
      case NavascriptPackage.PROPERTY__EXPRESSION_LIST:
        return basicSetExpressionList(null, msgs);
      case NavascriptPackage.PROPERTY__SELECTION_ARRAY:
        return basicSetSelectionArray(null, msgs);
      case NavascriptPackage.PROPERTY__ARRAY_FIELD:
        return basicSetArrayField(null, msgs);
      case NavascriptPackage.PROPERTY__ARRAY_MESSAGE:
        return basicSetArrayMessage(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NavascriptPackage.PROPERTY__PROPERTY_NAME:
        return getPropertyName();
      case NavascriptPackage.PROPERTY__ARGUMENTS:
        return getArguments();
      case NavascriptPackage.PROPERTY__EXPRESSION_LIST:
        return getExpressionList();
      case NavascriptPackage.PROPERTY__SELECTION_ARRAY:
        return getSelectionArray();
      case NavascriptPackage.PROPERTY__ARRAY_FIELD:
        return getArrayField();
      case NavascriptPackage.PROPERTY__ARRAY_MESSAGE:
        return getArrayMessage();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NavascriptPackage.PROPERTY__PROPERTY_NAME:
        setPropertyName((String)newValue);
        return;
      case NavascriptPackage.PROPERTY__ARGUMENTS:
        setArguments((PropertyArguments)newValue);
        return;
      case NavascriptPackage.PROPERTY__EXPRESSION_LIST:
        setExpressionList((ConditionalExpressions)newValue);
        return;
      case NavascriptPackage.PROPERTY__SELECTION_ARRAY:
        setSelectionArray((SelectionArray)newValue);
        return;
      case NavascriptPackage.PROPERTY__ARRAY_FIELD:
        setArrayField((MappedArrayField)newValue);
        return;
      case NavascriptPackage.PROPERTY__ARRAY_MESSAGE:
        setArrayMessage((MappedArrayMessage)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NavascriptPackage.PROPERTY__PROPERTY_NAME:
        setPropertyName(PROPERTY_NAME_EDEFAULT);
        return;
      case NavascriptPackage.PROPERTY__ARGUMENTS:
        setArguments((PropertyArguments)null);
        return;
      case NavascriptPackage.PROPERTY__EXPRESSION_LIST:
        setExpressionList((ConditionalExpressions)null);
        return;
      case NavascriptPackage.PROPERTY__SELECTION_ARRAY:
        setSelectionArray((SelectionArray)null);
        return;
      case NavascriptPackage.PROPERTY__ARRAY_FIELD:
        setArrayField((MappedArrayField)null);
        return;
      case NavascriptPackage.PROPERTY__ARRAY_MESSAGE:
        setArrayMessage((MappedArrayMessage)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NavascriptPackage.PROPERTY__PROPERTY_NAME:
        return PROPERTY_NAME_EDEFAULT == null ? propertyName != null : !PROPERTY_NAME_EDEFAULT.equals(propertyName);
      case NavascriptPackage.PROPERTY__ARGUMENTS:
        return arguments != null;
      case NavascriptPackage.PROPERTY__EXPRESSION_LIST:
        return expressionList != null;
      case NavascriptPackage.PROPERTY__SELECTION_ARRAY:
        return selectionArray != null;
      case NavascriptPackage.PROPERTY__ARRAY_FIELD:
        return arrayField != null;
      case NavascriptPackage.PROPERTY__ARRAY_MESSAGE:
        return arrayMessage != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (propertyName: ");
    result.append(propertyName);
    result.append(')');
    return result.toString();
  }

} //PropertyImpl
