/**
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.navascript.impl;

import com.dexels.navajo.navascript.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class NavascriptFactoryImpl extends EFactoryImpl implements NavascriptFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static NavascriptFactory init()
  {
    try
    {
      NavascriptFactory theNavascriptFactory = (NavascriptFactory)EPackage.Registry.INSTANCE.getEFactory(NavascriptPackage.eNS_URI);
      if (theNavascriptFactory != null)
      {
        return theNavascriptFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new NavascriptFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NavascriptFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case NavascriptPackage.NAVASCRIPT: return createNavascript();
      case NavascriptPackage.TOP_LEVEL_STATEMENTS: return createTopLevelStatements();
      case NavascriptPackage.TOP_LEVEL_STATEMENT: return createTopLevelStatement();
      case NavascriptPackage.INNER_BODY: return createInnerBody();
      case NavascriptPackage.BLOCK_STATEMENTS: return createBlockStatements();
      case NavascriptPackage.DEBUG_STATEMENT: return createDebugStatement();
      case NavascriptPackage.SYNCHRONIZED: return createSynchronized();
      case NavascriptPackage.SYNCHRONIZED_ARGUMENTS: return createSynchronizedArguments();
      case NavascriptPackage.SYNCHRONIZED_ARGUMENT: return createSynchronizedArgument();
      case NavascriptPackage.SKEY: return createSKey();
      case NavascriptPackage.STIMEOUT: return createSTimeout();
      case NavascriptPackage.SBREAK_ON_NO_LOCK: return createSBreakOnNoLock();
      case NavascriptPackage.BREAK: return createBreak();
      case NavascriptPackage.BREAK_PARAMETER: return createBreakParameter();
      case NavascriptPackage.BREAK_PARAMETERS: return createBreakParameters();
      case NavascriptPackage.VALIDATIONS: return createValidations();
      case NavascriptPackage.DEFINE: return createDefine();
      case NavascriptPackage.CHECK: return createCheck();
      case NavascriptPackage.CHECK_ATTRIBUTE: return createCheckAttribute();
      case NavascriptPackage.LITERAL_OR_EXPRESSION: return createLiteralOrExpression();
      case NavascriptPackage.PRINT: return createPrint();
      case NavascriptPackage.LOG: return createLog();
      case NavascriptPackage.FINALLY: return createFinally();
      case NavascriptPackage.METHODS: return createMethods();
      case NavascriptPackage.METHOD: return createMethod();
      case NavascriptPackage.LOOP: return createLoop();
      case NavascriptPackage.INCLUDE: return createInclude();
      case NavascriptPackage.ANTI_MESSAGE: return createAntiMessage();
      case NavascriptPackage.MESSAGE: return createMessage();
      case NavascriptPackage.MESSAGE_ARRAY: return createMessageArray();
      case NavascriptPackage.MESSAGE_ARRAY_ELEMENT: return createMessageArrayElement();
      case NavascriptPackage.MESSAGE_ARGUMENT: return createMessageArgument();
      case NavascriptPackage.MESSAGE_ARGUMENTS: return createMessageArguments();
      case NavascriptPackage.MAP: return createMap();
      case NavascriptPackage.METHOD_OR_SETTER: return createMethodOrSetter();
      case NavascriptPackage.ADAPTER_METHOD: return createAdapterMethod();
      case NavascriptPackage.SETTER_FIELD: return createSetterField();
      case NavascriptPackage.MAPPED_MESSAGE: return createMappedMessage();
      case NavascriptPackage.MAPPED_ARRAY_FIELD: return createMappedArrayField();
      case NavascriptPackage.MAPPED_ARRAY_MESSAGE: return createMappedArrayMessage();
      case NavascriptPackage.KEY_VALUE_ARGUMENTS: return createKeyValueArguments();
      case NavascriptPackage.KEY_VALUE_ARGUMENT: return createKeyValueArgument();
      case NavascriptPackage.VAR: return createVar();
      case NavascriptPackage.VAR_ARRAY: return createVarArray();
      case NavascriptPackage.VAR_ARRAY_ELEMENT: return createVarArrayElement();
      case NavascriptPackage.VAR_ELEMENT: return createVarElement();
      case NavascriptPackage.VAR_ARGUMENTS: return createVarArguments();
      case NavascriptPackage.VAR_ARGUMENT: return createVarArgument();
      case NavascriptPackage.VAR_TYPE: return createVarType();
      case NavascriptPackage.VAR_MODE: return createVarMode();
      case NavascriptPackage.PROPERTY: return createProperty();
      case NavascriptPackage.SELECTION_ARRAY: return createSelectionArray();
      case NavascriptPackage.SELECTION_ARRAY_ELEMENT: return createSelectionArrayElement();
      case NavascriptPackage.OPTION: return createOption();
      case NavascriptPackage.PROPERTY_ARGUMENTS: return createPropertyArguments();
      case NavascriptPackage.PROPERTY_ARGUMENT: return createPropertyArgument();
      case NavascriptPackage.LENGTH_ARGUMENT: return createLengthArgument();
      case NavascriptPackage.DIRECTION_ARGUMENT: return createDirectionArgument();
      case NavascriptPackage.DESCRIPTION_ARGUMENT: return createDescriptionArgument();
      case NavascriptPackage.CARDINALITY_ARGUMENT: return createCardinalityArgument();
      case NavascriptPackage.TYPE_ARGUMENT: return createTypeArgument();
      case NavascriptPackage.SUB_TYPE_ARGUMENT: return createSubTypeArgument();
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS: return createConditionalExpressions();
      case NavascriptPackage.CONDITIONAL_EXPRESSION: return createConditionalExpression();
      case NavascriptPackage.EXPRESSION: return createExpression();
      case NavascriptPackage.FOR_ALL_IDENTIFIER: return createForAllIdentifier();
      case NavascriptPackage.FUNCTION_IDENTIFIER: return createFunctionIdentifier();
      case NavascriptPackage.MAPPABLE_IDENTIFIER: return createMappableIdentifier();
      case NavascriptPackage.TML_IDENTIFIER: return createTmlIdentifier();
      case NavascriptPackage.PROPERTY_TYPE: return createPropertyType();
      case NavascriptPackage.MESSAGE_TYPE: return createMessageType();
      case NavascriptPackage.MESSAGE_MODE: return createMessageMode();
      case NavascriptPackage.AND_OR_EXPRESSION: return createAndOrExpression();
      case NavascriptPackage.COMPARISON: return createComparison();
      case NavascriptPackage.EQUALS: return createEquals();
      case NavascriptPackage.PLUS: return createPlus();
      case NavascriptPackage.MINUS: return createMinus();
      case NavascriptPackage.MULTI_OR_DIV: return createMultiOrDiv();
      case NavascriptPackage.BOOLEAN_NEGATION: return createBooleanNegation();
      case NavascriptPackage.ARITHMETIC_SIGNED: return createArithmeticSigned();
      case NavascriptPackage.EXPRESSION_LITERAL: return createExpressionLiteral();
      case NavascriptPackage.NUMBER_LITERAL: return createNumberLiteral();
      case NavascriptPackage.STRING_LITERAL: return createStringLiteral();
      case NavascriptPackage.BOOLEAN_LITERAL: return createBooleanLiteral();
      case NavascriptPackage.FUNCTION_CALL_LITERAL: return createFunctionCallLiteral();
      case NavascriptPackage.MAPPABLE_IDENTIFIER_LITERAL: return createMappableIdentifierLiteral();
      case NavascriptPackage.TML_IDENTIFIER_LITERAL: return createTmlIdentifierLiteral();
      case NavascriptPackage.FOR_ALL_LITERAL: return createForAllLiteral();
      case NavascriptPackage.NULL_LITERAL: return createNullLiteral();
      case NavascriptPackage.INT_TYPE: return createIntType();
      case NavascriptPackage.STRING_TYPE: return createStringType();
      case NavascriptPackage.BOOLEAN_TYPE: return createBooleanType();
      case NavascriptPackage.DATE_TYPE: return createDateType();
      case NavascriptPackage.FLOAT_TYPE: return createFloatType();
      case NavascriptPackage.BINARY_TYPE: return createBinaryType();
      case NavascriptPackage.CLOCK_TIME_TYPE: return createClockTimeType();
      case NavascriptPackage.MEMO_TYPE: return createMemoType();
      case NavascriptPackage.TIMESTAMP_TYPE: return createTimestampType();
      case NavascriptPackage.PERCENTAGE_TYPE: return createPercentageType();
      case NavascriptPackage.SELECTION_TYPE: return createSelectionType();
      case NavascriptPackage.ARRAY_TYPE: return createArrayType();
      case NavascriptPackage.SIMPLE_TYPE: return createSimpleType();
      case NavascriptPackage.ARRAY_ELEMENT_TYPE: return createArrayElementType();
      case NavascriptPackage.IGNORE: return createIgnore();
      case NavascriptPackage.OVERWRITE: return createOverwrite();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Navascript createNavascript()
  {
    NavascriptImpl navascript = new NavascriptImpl();
    return navascript;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TopLevelStatements createTopLevelStatements()
  {
    TopLevelStatementsImpl topLevelStatements = new TopLevelStatementsImpl();
    return topLevelStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TopLevelStatement createTopLevelStatement()
  {
    TopLevelStatementImpl topLevelStatement = new TopLevelStatementImpl();
    return topLevelStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InnerBody createInnerBody()
  {
    InnerBodyImpl innerBody = new InnerBodyImpl();
    return innerBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockStatements createBlockStatements()
  {
    BlockStatementsImpl blockStatements = new BlockStatementsImpl();
    return blockStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DebugStatement createDebugStatement()
  {
    DebugStatementImpl debugStatement = new DebugStatementImpl();
    return debugStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Synchronized createSynchronized()
  {
    SynchronizedImpl synchronized_ = new SynchronizedImpl();
    return synchronized_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SynchronizedArguments createSynchronizedArguments()
  {
    SynchronizedArgumentsImpl synchronizedArguments = new SynchronizedArgumentsImpl();
    return synchronizedArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SynchronizedArgument createSynchronizedArgument()
  {
    SynchronizedArgumentImpl synchronizedArgument = new SynchronizedArgumentImpl();
    return synchronizedArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SKey createSKey()
  {
    SKeyImpl sKey = new SKeyImpl();
    return sKey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STimeout createSTimeout()
  {
    STimeoutImpl sTimeout = new STimeoutImpl();
    return sTimeout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SBreakOnNoLock createSBreakOnNoLock()
  {
    SBreakOnNoLockImpl sBreakOnNoLock = new SBreakOnNoLockImpl();
    return sBreakOnNoLock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Break createBreak()
  {
    BreakImpl break_ = new BreakImpl();
    return break_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BreakParameter createBreakParameter()
  {
    BreakParameterImpl breakParameter = new BreakParameterImpl();
    return breakParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BreakParameters createBreakParameters()
  {
    BreakParametersImpl breakParameters = new BreakParametersImpl();
    return breakParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Validations createValidations()
  {
    ValidationsImpl validations = new ValidationsImpl();
    return validations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Define createDefine()
  {
    DefineImpl define = new DefineImpl();
    return define;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Check createCheck()
  {
    CheckImpl check = new CheckImpl();
    return check;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CheckAttribute createCheckAttribute()
  {
    CheckAttributeImpl checkAttribute = new CheckAttributeImpl();
    return checkAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralOrExpression createLiteralOrExpression()
  {
    LiteralOrExpressionImpl literalOrExpression = new LiteralOrExpressionImpl();
    return literalOrExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Print createPrint()
  {
    PrintImpl print = new PrintImpl();
    return print;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Log createLog()
  {
    LogImpl log = new LogImpl();
    return log;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Finally createFinally()
  {
    FinallyImpl finally_ = new FinallyImpl();
    return finally_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Methods createMethods()
  {
    MethodsImpl methods = new MethodsImpl();
    return methods;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Method createMethod()
  {
    MethodImpl method = new MethodImpl();
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Loop createLoop()
  {
    LoopImpl loop = new LoopImpl();
    return loop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AntiMessage createAntiMessage()
  {
    AntiMessageImpl antiMessage = new AntiMessageImpl();
    return antiMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message createMessage()
  {
    MessageImpl message = new MessageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageArray createMessageArray()
  {
    MessageArrayImpl messageArray = new MessageArrayImpl();
    return messageArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageArrayElement createMessageArrayElement()
  {
    MessageArrayElementImpl messageArrayElement = new MessageArrayElementImpl();
    return messageArrayElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageArgument createMessageArgument()
  {
    MessageArgumentImpl messageArgument = new MessageArgumentImpl();
    return messageArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageArguments createMessageArguments()
  {
    MessageArgumentsImpl messageArguments = new MessageArgumentsImpl();
    return messageArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map createMap()
  {
    MapImpl map = new MapImpl();
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodOrSetter createMethodOrSetter()
  {
    MethodOrSetterImpl methodOrSetter = new MethodOrSetterImpl();
    return methodOrSetter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdapterMethod createAdapterMethod()
  {
    AdapterMethodImpl adapterMethod = new AdapterMethodImpl();
    return adapterMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetterField createSetterField()
  {
    SetterFieldImpl setterField = new SetterFieldImpl();
    return setterField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappedMessage createMappedMessage()
  {
    MappedMessageImpl mappedMessage = new MappedMessageImpl();
    return mappedMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappedArrayField createMappedArrayField()
  {
    MappedArrayFieldImpl mappedArrayField = new MappedArrayFieldImpl();
    return mappedArrayField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappedArrayMessage createMappedArrayMessage()
  {
    MappedArrayMessageImpl mappedArrayMessage = new MappedArrayMessageImpl();
    return mappedArrayMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KeyValueArguments createKeyValueArguments()
  {
    KeyValueArgumentsImpl keyValueArguments = new KeyValueArgumentsImpl();
    return keyValueArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KeyValueArgument createKeyValueArgument()
  {
    KeyValueArgumentImpl keyValueArgument = new KeyValueArgumentImpl();
    return keyValueArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarArray createVarArray()
  {
    VarArrayImpl varArray = new VarArrayImpl();
    return varArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarArrayElement createVarArrayElement()
  {
    VarArrayElementImpl varArrayElement = new VarArrayElementImpl();
    return varArrayElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarElement createVarElement()
  {
    VarElementImpl varElement = new VarElementImpl();
    return varElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarArguments createVarArguments()
  {
    VarArgumentsImpl varArguments = new VarArgumentsImpl();
    return varArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarArgument createVarArgument()
  {
    VarArgumentImpl varArgument = new VarArgumentImpl();
    return varArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarType createVarType()
  {
    VarTypeImpl varType = new VarTypeImpl();
    return varType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarMode createVarMode()
  {
    VarModeImpl varMode = new VarModeImpl();
    return varMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectionArray createSelectionArray()
  {
    SelectionArrayImpl selectionArray = new SelectionArrayImpl();
    return selectionArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectionArrayElement createSelectionArrayElement()
  {
    SelectionArrayElementImpl selectionArrayElement = new SelectionArrayElementImpl();
    return selectionArrayElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Option createOption()
  {
    OptionImpl option = new OptionImpl();
    return option;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyArguments createPropertyArguments()
  {
    PropertyArgumentsImpl propertyArguments = new PropertyArgumentsImpl();
    return propertyArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyArgument createPropertyArgument()
  {
    PropertyArgumentImpl propertyArgument = new PropertyArgumentImpl();
    return propertyArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LengthArgument createLengthArgument()
  {
    LengthArgumentImpl lengthArgument = new LengthArgumentImpl();
    return lengthArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DirectionArgument createDirectionArgument()
  {
    DirectionArgumentImpl directionArgument = new DirectionArgumentImpl();
    return directionArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DescriptionArgument createDescriptionArgument()
  {
    DescriptionArgumentImpl descriptionArgument = new DescriptionArgumentImpl();
    return descriptionArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CardinalityArgument createCardinalityArgument()
  {
    CardinalityArgumentImpl cardinalityArgument = new CardinalityArgumentImpl();
    return cardinalityArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeArgument createTypeArgument()
  {
    TypeArgumentImpl typeArgument = new TypeArgumentImpl();
    return typeArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubTypeArgument createSubTypeArgument()
  {
    SubTypeArgumentImpl subTypeArgument = new SubTypeArgumentImpl();
    return subTypeArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalExpressions createConditionalExpressions()
  {
    ConditionalExpressionsImpl conditionalExpressions = new ConditionalExpressionsImpl();
    return conditionalExpressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalExpression createConditionalExpression()
  {
    ConditionalExpressionImpl conditionalExpression = new ConditionalExpressionImpl();
    return conditionalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForAllIdentifier createForAllIdentifier()
  {
    ForAllIdentifierImpl forAllIdentifier = new ForAllIdentifierImpl();
    return forAllIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionIdentifier createFunctionIdentifier()
  {
    FunctionIdentifierImpl functionIdentifier = new FunctionIdentifierImpl();
    return functionIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappableIdentifier createMappableIdentifier()
  {
    MappableIdentifierImpl mappableIdentifier = new MappableIdentifierImpl();
    return mappableIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TmlIdentifier createTmlIdentifier()
  {
    TmlIdentifierImpl tmlIdentifier = new TmlIdentifierImpl();
    return tmlIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyType createPropertyType()
  {
    PropertyTypeImpl propertyType = new PropertyTypeImpl();
    return propertyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageType createMessageType()
  {
    MessageTypeImpl messageType = new MessageTypeImpl();
    return messageType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageMode createMessageMode()
  {
    MessageModeImpl messageMode = new MessageModeImpl();
    return messageMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndOrExpression createAndOrExpression()
  {
    AndOrExpressionImpl andOrExpression = new AndOrExpressionImpl();
    return andOrExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equals createEquals()
  {
    EqualsImpl equals = new EqualsImpl();
    return equals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiOrDiv createMultiOrDiv()
  {
    MultiOrDivImpl multiOrDiv = new MultiOrDivImpl();
    return multiOrDiv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanNegation createBooleanNegation()
  {
    BooleanNegationImpl booleanNegation = new BooleanNegationImpl();
    return booleanNegation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticSigned createArithmeticSigned()
  {
    ArithmeticSignedImpl arithmeticSigned = new ArithmeticSignedImpl();
    return arithmeticSigned;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionLiteral createExpressionLiteral()
  {
    ExpressionLiteralImpl expressionLiteral = new ExpressionLiteralImpl();
    return expressionLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteral createBooleanLiteral()
  {
    BooleanLiteralImpl booleanLiteral = new BooleanLiteralImpl();
    return booleanLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCallLiteral createFunctionCallLiteral()
  {
    FunctionCallLiteralImpl functionCallLiteral = new FunctionCallLiteralImpl();
    return functionCallLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappableIdentifierLiteral createMappableIdentifierLiteral()
  {
    MappableIdentifierLiteralImpl mappableIdentifierLiteral = new MappableIdentifierLiteralImpl();
    return mappableIdentifierLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TmlIdentifierLiteral createTmlIdentifierLiteral()
  {
    TmlIdentifierLiteralImpl tmlIdentifierLiteral = new TmlIdentifierLiteralImpl();
    return tmlIdentifierLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForAllLiteral createForAllLiteral()
  {
    ForAllLiteralImpl forAllLiteral = new ForAllLiteralImpl();
    return forAllLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NullLiteral createNullLiteral()
  {
    NullLiteralImpl nullLiteral = new NullLiteralImpl();
    return nullLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntType createIntType()
  {
    IntTypeImpl intType = new IntTypeImpl();
    return intType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringType createStringType()
  {
    StringTypeImpl stringType = new StringTypeImpl();
    return stringType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanType createBooleanType()
  {
    BooleanTypeImpl booleanType = new BooleanTypeImpl();
    return booleanType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DateType createDateType()
  {
    DateTypeImpl dateType = new DateTypeImpl();
    return dateType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FloatType createFloatType()
  {
    FloatTypeImpl floatType = new FloatTypeImpl();
    return floatType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinaryType createBinaryType()
  {
    BinaryTypeImpl binaryType = new BinaryTypeImpl();
    return binaryType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClockTimeType createClockTimeType()
  {
    ClockTimeTypeImpl clockTimeType = new ClockTimeTypeImpl();
    return clockTimeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MemoType createMemoType()
  {
    MemoTypeImpl memoType = new MemoTypeImpl();
    return memoType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimestampType createTimestampType()
  {
    TimestampTypeImpl timestampType = new TimestampTypeImpl();
    return timestampType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PercentageType createPercentageType()
  {
    PercentageTypeImpl percentageType = new PercentageTypeImpl();
    return percentageType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectionType createSelectionType()
  {
    SelectionTypeImpl selectionType = new SelectionTypeImpl();
    return selectionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayType createArrayType()
  {
    ArrayTypeImpl arrayType = new ArrayTypeImpl();
    return arrayType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleType createSimpleType()
  {
    SimpleTypeImpl simpleType = new SimpleTypeImpl();
    return simpleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayElementType createArrayElementType()
  {
    ArrayElementTypeImpl arrayElementType = new ArrayElementTypeImpl();
    return arrayElementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ignore createIgnore()
  {
    IgnoreImpl ignore = new IgnoreImpl();
    return ignore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Overwrite createOverwrite()
  {
    OverwriteImpl overwrite = new OverwriteImpl();
    return overwrite;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NavascriptPackage getNavascriptPackage()
  {
    return (NavascriptPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static NavascriptPackage getPackage()
  {
    return NavascriptPackage.eINSTANCE;
  }

} //NavascriptFactoryImpl
