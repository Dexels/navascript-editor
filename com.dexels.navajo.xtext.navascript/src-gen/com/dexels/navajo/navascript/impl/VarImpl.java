/**
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.navascript.impl;

import com.dexels.navajo.navascript.ConditionalExpressions;
import com.dexels.navajo.navascript.MappedArrayField;
import com.dexels.navajo.navascript.MappedArrayMessage;
import com.dexels.navajo.navascript.NavascriptPackage;
import com.dexels.navajo.navascript.Var;
import com.dexels.navajo.navascript.VarArguments;
import com.dexels.navajo.navascript.VarArray;
import com.dexels.navajo.navascript.VarElement;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Var</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dexels.navajo.navascript.impl.VarImpl#getVarName <em>Var Name</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.VarImpl#getArguments <em>Arguments</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.VarImpl#getExpressionList <em>Expression List</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.VarImpl#getVarArray <em>Var Array</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.VarImpl#getVarElements <em>Var Elements</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.VarImpl#getMappedArrayField <em>Mapped Array Field</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.VarImpl#getMappedArrayMessage <em>Mapped Array Message</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VarImpl extends MinimalEObjectImpl.Container implements Var
{
  /**
   * The default value of the '{@link #getVarName() <em>Var Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarName()
   * @generated
   * @ordered
   */
  protected static final String VAR_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVarName() <em>Var Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarName()
   * @generated
   * @ordered
   */
  protected String varName = VAR_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getArguments() <em>Arguments</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArguments()
   * @generated
   * @ordered
   */
  protected VarArguments arguments;

  /**
   * The cached value of the '{@link #getExpressionList() <em>Expression List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionList()
   * @generated
   * @ordered
   */
  protected ConditionalExpressions expressionList;

  /**
   * The cached value of the '{@link #getVarArray() <em>Var Array</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarArray()
   * @generated
   * @ordered
   */
  protected VarArray varArray;

  /**
   * The cached value of the '{@link #getVarElements() <em>Var Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarElements()
   * @generated
   * @ordered
   */
  protected EList<VarElement> varElements;

  /**
   * The cached value of the '{@link #getMappedArrayField() <em>Mapped Array Field</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMappedArrayField()
   * @generated
   * @ordered
   */
  protected MappedArrayField mappedArrayField;

  /**
   * The cached value of the '{@link #getMappedArrayMessage() <em>Mapped Array Message</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMappedArrayMessage()
   * @generated
   * @ordered
   */
  protected MappedArrayMessage mappedArrayMessage;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VarImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NavascriptPackage.Literals.VAR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVarName()
  {
    return varName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVarName(String newVarName)
  {
    String oldVarName = varName;
    varName = newVarName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.VAR__VAR_NAME, oldVarName, varName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarArguments getArguments()
  {
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArguments(VarArguments newArguments, NotificationChain msgs)
  {
    VarArguments oldArguments = arguments;
    arguments = newArguments;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.VAR__ARGUMENTS, oldArguments, newArguments);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArguments(VarArguments newArguments)
  {
    if (newArguments != arguments)
    {
      NotificationChain msgs = null;
      if (arguments != null)
        msgs = ((InternalEObject)arguments).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.VAR__ARGUMENTS, null, msgs);
      if (newArguments != null)
        msgs = ((InternalEObject)newArguments).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.VAR__ARGUMENTS, null, msgs);
      msgs = basicSetArguments(newArguments, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.VAR__ARGUMENTS, newArguments, newArguments));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalExpressions getExpressionList()
  {
    return expressionList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionList(ConditionalExpressions newExpressionList, NotificationChain msgs)
  {
    ConditionalExpressions oldExpressionList = expressionList;
    expressionList = newExpressionList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.VAR__EXPRESSION_LIST, oldExpressionList, newExpressionList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpressionList(ConditionalExpressions newExpressionList)
  {
    if (newExpressionList != expressionList)
    {
      NotificationChain msgs = null;
      if (expressionList != null)
        msgs = ((InternalEObject)expressionList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.VAR__EXPRESSION_LIST, null, msgs);
      if (newExpressionList != null)
        msgs = ((InternalEObject)newExpressionList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.VAR__EXPRESSION_LIST, null, msgs);
      msgs = basicSetExpressionList(newExpressionList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.VAR__EXPRESSION_LIST, newExpressionList, newExpressionList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarArray getVarArray()
  {
    return varArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVarArray(VarArray newVarArray, NotificationChain msgs)
  {
    VarArray oldVarArray = varArray;
    varArray = newVarArray;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.VAR__VAR_ARRAY, oldVarArray, newVarArray);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVarArray(VarArray newVarArray)
  {
    if (newVarArray != varArray)
    {
      NotificationChain msgs = null;
      if (varArray != null)
        msgs = ((InternalEObject)varArray).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.VAR__VAR_ARRAY, null, msgs);
      if (newVarArray != null)
        msgs = ((InternalEObject)newVarArray).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.VAR__VAR_ARRAY, null, msgs);
      msgs = basicSetVarArray(newVarArray, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.VAR__VAR_ARRAY, newVarArray, newVarArray));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VarElement> getVarElements()
  {
    if (varElements == null)
    {
      varElements = new EObjectContainmentEList<VarElement>(VarElement.class, this, NavascriptPackage.VAR__VAR_ELEMENTS);
    }
    return varElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappedArrayField getMappedArrayField()
  {
    return mappedArrayField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMappedArrayField(MappedArrayField newMappedArrayField, NotificationChain msgs)
  {
    MappedArrayField oldMappedArrayField = mappedArrayField;
    mappedArrayField = newMappedArrayField;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.VAR__MAPPED_ARRAY_FIELD, oldMappedArrayField, newMappedArrayField);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMappedArrayField(MappedArrayField newMappedArrayField)
  {
    if (newMappedArrayField != mappedArrayField)
    {
      NotificationChain msgs = null;
      if (mappedArrayField != null)
        msgs = ((InternalEObject)mappedArrayField).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.VAR__MAPPED_ARRAY_FIELD, null, msgs);
      if (newMappedArrayField != null)
        msgs = ((InternalEObject)newMappedArrayField).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.VAR__MAPPED_ARRAY_FIELD, null, msgs);
      msgs = basicSetMappedArrayField(newMappedArrayField, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.VAR__MAPPED_ARRAY_FIELD, newMappedArrayField, newMappedArrayField));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappedArrayMessage getMappedArrayMessage()
  {
    return mappedArrayMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMappedArrayMessage(MappedArrayMessage newMappedArrayMessage, NotificationChain msgs)
  {
    MappedArrayMessage oldMappedArrayMessage = mappedArrayMessage;
    mappedArrayMessage = newMappedArrayMessage;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.VAR__MAPPED_ARRAY_MESSAGE, oldMappedArrayMessage, newMappedArrayMessage);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMappedArrayMessage(MappedArrayMessage newMappedArrayMessage)
  {
    if (newMappedArrayMessage != mappedArrayMessage)
    {
      NotificationChain msgs = null;
      if (mappedArrayMessage != null)
        msgs = ((InternalEObject)mappedArrayMessage).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.VAR__MAPPED_ARRAY_MESSAGE, null, msgs);
      if (newMappedArrayMessage != null)
        msgs = ((InternalEObject)newMappedArrayMessage).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.VAR__MAPPED_ARRAY_MESSAGE, null, msgs);
      msgs = basicSetMappedArrayMessage(newMappedArrayMessage, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.VAR__MAPPED_ARRAY_MESSAGE, newMappedArrayMessage, newMappedArrayMessage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NavascriptPackage.VAR__ARGUMENTS:
        return basicSetArguments(null, msgs);
      case NavascriptPackage.VAR__EXPRESSION_LIST:
        return basicSetExpressionList(null, msgs);
      case NavascriptPackage.VAR__VAR_ARRAY:
        return basicSetVarArray(null, msgs);
      case NavascriptPackage.VAR__VAR_ELEMENTS:
        return ((InternalEList<?>)getVarElements()).basicRemove(otherEnd, msgs);
      case NavascriptPackage.VAR__MAPPED_ARRAY_FIELD:
        return basicSetMappedArrayField(null, msgs);
      case NavascriptPackage.VAR__MAPPED_ARRAY_MESSAGE:
        return basicSetMappedArrayMessage(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NavascriptPackage.VAR__VAR_NAME:
        return getVarName();
      case NavascriptPackage.VAR__ARGUMENTS:
        return getArguments();
      case NavascriptPackage.VAR__EXPRESSION_LIST:
        return getExpressionList();
      case NavascriptPackage.VAR__VAR_ARRAY:
        return getVarArray();
      case NavascriptPackage.VAR__VAR_ELEMENTS:
        return getVarElements();
      case NavascriptPackage.VAR__MAPPED_ARRAY_FIELD:
        return getMappedArrayField();
      case NavascriptPackage.VAR__MAPPED_ARRAY_MESSAGE:
        return getMappedArrayMessage();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NavascriptPackage.VAR__VAR_NAME:
        setVarName((String)newValue);
        return;
      case NavascriptPackage.VAR__ARGUMENTS:
        setArguments((VarArguments)newValue);
        return;
      case NavascriptPackage.VAR__EXPRESSION_LIST:
        setExpressionList((ConditionalExpressions)newValue);
        return;
      case NavascriptPackage.VAR__VAR_ARRAY:
        setVarArray((VarArray)newValue);
        return;
      case NavascriptPackage.VAR__VAR_ELEMENTS:
        getVarElements().clear();
        getVarElements().addAll((Collection<? extends VarElement>)newValue);
        return;
      case NavascriptPackage.VAR__MAPPED_ARRAY_FIELD:
        setMappedArrayField((MappedArrayField)newValue);
        return;
      case NavascriptPackage.VAR__MAPPED_ARRAY_MESSAGE:
        setMappedArrayMessage((MappedArrayMessage)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NavascriptPackage.VAR__VAR_NAME:
        setVarName(VAR_NAME_EDEFAULT);
        return;
      case NavascriptPackage.VAR__ARGUMENTS:
        setArguments((VarArguments)null);
        return;
      case NavascriptPackage.VAR__EXPRESSION_LIST:
        setExpressionList((ConditionalExpressions)null);
        return;
      case NavascriptPackage.VAR__VAR_ARRAY:
        setVarArray((VarArray)null);
        return;
      case NavascriptPackage.VAR__VAR_ELEMENTS:
        getVarElements().clear();
        return;
      case NavascriptPackage.VAR__MAPPED_ARRAY_FIELD:
        setMappedArrayField((MappedArrayField)null);
        return;
      case NavascriptPackage.VAR__MAPPED_ARRAY_MESSAGE:
        setMappedArrayMessage((MappedArrayMessage)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NavascriptPackage.VAR__VAR_NAME:
        return VAR_NAME_EDEFAULT == null ? varName != null : !VAR_NAME_EDEFAULT.equals(varName);
      case NavascriptPackage.VAR__ARGUMENTS:
        return arguments != null;
      case NavascriptPackage.VAR__EXPRESSION_LIST:
        return expressionList != null;
      case NavascriptPackage.VAR__VAR_ARRAY:
        return varArray != null;
      case NavascriptPackage.VAR__VAR_ELEMENTS:
        return varElements != null && !varElements.isEmpty();
      case NavascriptPackage.VAR__MAPPED_ARRAY_FIELD:
        return mappedArrayField != null;
      case NavascriptPackage.VAR__MAPPED_ARRAY_MESSAGE:
        return mappedArrayMessage != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (varName: ");
    result.append(varName);
    result.append(')');
    return result.toString();
  }

} //VarImpl
