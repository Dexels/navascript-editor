/**
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.navascript.impl;

import com.dexels.navajo.navascript.ConditionalExpression;
import com.dexels.navajo.navascript.ConditionalExpressions;
import com.dexels.navajo.navascript.LiteralOrExpression;
import com.dexels.navajo.navascript.NavascriptPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conditional Expressions</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dexels.navajo.navascript.impl.ConditionalExpressionsImpl#getConditionalExpressions <em>Conditional Expressions</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.ConditionalExpressionsImpl#getElseExpresssion <em>Else Expresssion</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.ConditionalExpressionsImpl#getSingleExpression <em>Single Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionalExpressionsImpl extends MinimalEObjectImpl.Container implements ConditionalExpressions
{
  /**
   * The cached value of the '{@link #getConditionalExpressions() <em>Conditional Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionalExpressions()
   * @generated
   * @ordered
   */
  protected EList<ConditionalExpression> conditionalExpressions;

  /**
   * The cached value of the '{@link #getElseExpresssion() <em>Else Expresssion</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseExpresssion()
   * @generated
   * @ordered
   */
  protected LiteralOrExpression elseExpresssion;

  /**
   * The cached value of the '{@link #getSingleExpression() <em>Single Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSingleExpression()
   * @generated
   * @ordered
   */
  protected LiteralOrExpression singleExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionalExpressionsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NavascriptPackage.Literals.CONDITIONAL_EXPRESSIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConditionalExpression> getConditionalExpressions()
  {
    if (conditionalExpressions == null)
    {
      conditionalExpressions = new EObjectContainmentEList<ConditionalExpression>(ConditionalExpression.class, this, NavascriptPackage.CONDITIONAL_EXPRESSIONS__CONDITIONAL_EXPRESSIONS);
    }
    return conditionalExpressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralOrExpression getElseExpresssion()
  {
    return elseExpresssion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseExpresssion(LiteralOrExpression newElseExpresssion, NotificationChain msgs)
  {
    LiteralOrExpression oldElseExpresssion = elseExpresssion;
    elseExpresssion = newElseExpresssion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.CONDITIONAL_EXPRESSIONS__ELSE_EXPRESSSION, oldElseExpresssion, newElseExpresssion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElseExpresssion(LiteralOrExpression newElseExpresssion)
  {
    if (newElseExpresssion != elseExpresssion)
    {
      NotificationChain msgs = null;
      if (elseExpresssion != null)
        msgs = ((InternalEObject)elseExpresssion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.CONDITIONAL_EXPRESSIONS__ELSE_EXPRESSSION, null, msgs);
      if (newElseExpresssion != null)
        msgs = ((InternalEObject)newElseExpresssion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.CONDITIONAL_EXPRESSIONS__ELSE_EXPRESSSION, null, msgs);
      msgs = basicSetElseExpresssion(newElseExpresssion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.CONDITIONAL_EXPRESSIONS__ELSE_EXPRESSSION, newElseExpresssion, newElseExpresssion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralOrExpression getSingleExpression()
  {
    return singleExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSingleExpression(LiteralOrExpression newSingleExpression, NotificationChain msgs)
  {
    LiteralOrExpression oldSingleExpression = singleExpression;
    singleExpression = newSingleExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.CONDITIONAL_EXPRESSIONS__SINGLE_EXPRESSION, oldSingleExpression, newSingleExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSingleExpression(LiteralOrExpression newSingleExpression)
  {
    if (newSingleExpression != singleExpression)
    {
      NotificationChain msgs = null;
      if (singleExpression != null)
        msgs = ((InternalEObject)singleExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.CONDITIONAL_EXPRESSIONS__SINGLE_EXPRESSION, null, msgs);
      if (newSingleExpression != null)
        msgs = ((InternalEObject)newSingleExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.CONDITIONAL_EXPRESSIONS__SINGLE_EXPRESSION, null, msgs);
      msgs = basicSetSingleExpression(newSingleExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.CONDITIONAL_EXPRESSIONS__SINGLE_EXPRESSION, newSingleExpression, newSingleExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__CONDITIONAL_EXPRESSIONS:
        return ((InternalEList<?>)getConditionalExpressions()).basicRemove(otherEnd, msgs);
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__ELSE_EXPRESSSION:
        return basicSetElseExpresssion(null, msgs);
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__SINGLE_EXPRESSION:
        return basicSetSingleExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__CONDITIONAL_EXPRESSIONS:
        return getConditionalExpressions();
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__ELSE_EXPRESSSION:
        return getElseExpresssion();
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__SINGLE_EXPRESSION:
        return getSingleExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__CONDITIONAL_EXPRESSIONS:
        getConditionalExpressions().clear();
        getConditionalExpressions().addAll((Collection<? extends ConditionalExpression>)newValue);
        return;
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__ELSE_EXPRESSSION:
        setElseExpresssion((LiteralOrExpression)newValue);
        return;
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__SINGLE_EXPRESSION:
        setSingleExpression((LiteralOrExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__CONDITIONAL_EXPRESSIONS:
        getConditionalExpressions().clear();
        return;
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__ELSE_EXPRESSSION:
        setElseExpresssion((LiteralOrExpression)null);
        return;
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__SINGLE_EXPRESSION:
        setSingleExpression((LiteralOrExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__CONDITIONAL_EXPRESSIONS:
        return conditionalExpressions != null && !conditionalExpressions.isEmpty();
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__ELSE_EXPRESSSION:
        return elseExpresssion != null;
      case NavascriptPackage.CONDITIONAL_EXPRESSIONS__SINGLE_EXPRESSION:
        return singleExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //ConditionalExpressionsImpl
