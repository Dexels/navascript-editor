/**
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.navascript.impl;

import com.dexels.navajo.navascript.InnerBody;
import com.dexels.navajo.navascript.KeyValueArguments;
import com.dexels.navajo.navascript.Map;
import com.dexels.navajo.navascript.NavascriptPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Map</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dexels.navajo.navascript.impl.MapImpl#getAdapterName <em>Adapter Name</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.MapImpl#getArguments <em>Arguments</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.MapImpl#getObjectName <em>Object Name</em>}</li>
 *   <li>{@link com.dexels.navajo.navascript.impl.MapImpl#getStatements <em>Statements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MapImpl extends MinimalEObjectImpl.Container implements Map
{
  /**
   * The default value of the '{@link #getAdapterName() <em>Adapter Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdapterName()
   * @generated
   * @ordered
   */
  protected static final String ADAPTER_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAdapterName() <em>Adapter Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdapterName()
   * @generated
   * @ordered
   */
  protected String adapterName = ADAPTER_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getArguments() <em>Arguments</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArguments()
   * @generated
   * @ordered
   */
  protected KeyValueArguments arguments;

  /**
   * The default value of the '{@link #getObjectName() <em>Object Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectName()
   * @generated
   * @ordered
   */
  protected static final String OBJECT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getObjectName() <em>Object Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectName()
   * @generated
   * @ordered
   */
  protected String objectName = OBJECT_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected EList<InnerBody> statements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MapImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NavascriptPackage.Literals.MAP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAdapterName()
  {
    return adapterName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAdapterName(String newAdapterName)
  {
    String oldAdapterName = adapterName;
    adapterName = newAdapterName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.MAP__ADAPTER_NAME, oldAdapterName, adapterName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KeyValueArguments getArguments()
  {
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArguments(KeyValueArguments newArguments, NotificationChain msgs)
  {
    KeyValueArguments oldArguments = arguments;
    arguments = newArguments;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NavascriptPackage.MAP__ARGUMENTS, oldArguments, newArguments);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArguments(KeyValueArguments newArguments)
  {
    if (newArguments != arguments)
    {
      NotificationChain msgs = null;
      if (arguments != null)
        msgs = ((InternalEObject)arguments).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.MAP__ARGUMENTS, null, msgs);
      if (newArguments != null)
        msgs = ((InternalEObject)newArguments).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NavascriptPackage.MAP__ARGUMENTS, null, msgs);
      msgs = basicSetArguments(newArguments, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.MAP__ARGUMENTS, newArguments, newArguments));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getObjectName()
  {
    return objectName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObjectName(String newObjectName)
  {
    String oldObjectName = objectName;
    objectName = newObjectName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NavascriptPackage.MAP__OBJECT_NAME, oldObjectName, objectName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InnerBody> getStatements()
  {
    if (statements == null)
    {
      statements = new EObjectContainmentEList<InnerBody>(InnerBody.class, this, NavascriptPackage.MAP__STATEMENTS);
    }
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NavascriptPackage.MAP__ARGUMENTS:
        return basicSetArguments(null, msgs);
      case NavascriptPackage.MAP__STATEMENTS:
        return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NavascriptPackage.MAP__ADAPTER_NAME:
        return getAdapterName();
      case NavascriptPackage.MAP__ARGUMENTS:
        return getArguments();
      case NavascriptPackage.MAP__OBJECT_NAME:
        return getObjectName();
      case NavascriptPackage.MAP__STATEMENTS:
        return getStatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NavascriptPackage.MAP__ADAPTER_NAME:
        setAdapterName((String)newValue);
        return;
      case NavascriptPackage.MAP__ARGUMENTS:
        setArguments((KeyValueArguments)newValue);
        return;
      case NavascriptPackage.MAP__OBJECT_NAME:
        setObjectName((String)newValue);
        return;
      case NavascriptPackage.MAP__STATEMENTS:
        getStatements().clear();
        getStatements().addAll((Collection<? extends InnerBody>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NavascriptPackage.MAP__ADAPTER_NAME:
        setAdapterName(ADAPTER_NAME_EDEFAULT);
        return;
      case NavascriptPackage.MAP__ARGUMENTS:
        setArguments((KeyValueArguments)null);
        return;
      case NavascriptPackage.MAP__OBJECT_NAME:
        setObjectName(OBJECT_NAME_EDEFAULT);
        return;
      case NavascriptPackage.MAP__STATEMENTS:
        getStatements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NavascriptPackage.MAP__ADAPTER_NAME:
        return ADAPTER_NAME_EDEFAULT == null ? adapterName != null : !ADAPTER_NAME_EDEFAULT.equals(adapterName);
      case NavascriptPackage.MAP__ARGUMENTS:
        return arguments != null;
      case NavascriptPackage.MAP__OBJECT_NAME:
        return OBJECT_NAME_EDEFAULT == null ? objectName != null : !OBJECT_NAME_EDEFAULT.equals(objectName);
      case NavascriptPackage.MAP__STATEMENTS:
        return statements != null && !statements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (adapterName: ");
    result.append(adapterName);
    result.append(", objectName: ");
    result.append(objectName);
    result.append(')');
    return result.toString();
  }

} //MapImpl
