/*
 * generated by Xtext 2.24.0
 */
package com.dexels.navajo.validation;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceEvent;
import org.osgi.framework.ServiceListener;
import org.osgi.framework.ServiceReference;

import com.dexels.navajo.navascript.Expression;
import com.dexels.navajo.navascript.InnerBody;
import com.dexels.navajo.navascript.KeyValueArgument;
import com.dexels.navajo.navascript.KeyValueArguments;
import com.dexels.navajo.navascript.Message;
import com.dexels.navajo.navascript.NavascriptPackage;
import com.dexels.navajo.navascript.PropertyArgument;
import com.dexels.navajo.navascript.PropertyArguments;
import com.dexels.navajo.navascript.impl.AdapterMethodImpl;
import com.dexels.navajo.navascript.impl.FunctionIdentifierImpl;
import com.dexels.navajo.navascript.impl.MapImpl;
import com.dexels.navajo.navascript.impl.MappableIdentifierImpl;
import com.dexels.navajo.navascript.impl.MappedArrayFieldImpl;
import com.dexels.navajo.navascript.impl.MappedMessageImpl;
import com.dexels.navajo.navascript.impl.MessageImpl;
import com.dexels.navajo.navascript.impl.PropertyImpl;
import com.dexels.navajo.navascript.impl.SetterFieldImpl;
import com.dexels.navajo.navigation.NavigationUtils;
import com.dexels.navajo.xtext.navascript.navajobridge.AdapterClassDefinition;
import com.dexels.navajo.xtext.navascript.navajobridge.NavajoProxyStub;
import com.dexels.navajo.xtext.navascript.navajobridge.OSGIRuntime;
import com.dexels.navajo.xtext.navascript.navajobridge.ProxyFunctionDefinition;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class NavascriptValidator extends AbstractNavascriptValidator implements ServiceListener {

	NavajoProxyStub adapters = null;
	BundleContext context;

	public NavascriptValidator() {
		context = OSGIRuntime.getDefaultBundleContext();
		context.addServiceListener(this);
		System.err.println("In NavascriptValidator: " + context);
	}

	public synchronized void init() {
		if (adapters == null) {
			ServiceReference<NavajoProxyStub> ref = context.getServiceReference(NavajoProxyStub.class);
			adapters = context.getService(ref);
			System.err.println("In NavascriptValidator.init(): " + ref);
		}
	}

	private NavajoProxyStub getNavajoProxyStub() {
		init();
		return adapters;
	}

	@Check
	public void checkFunction(FunctionIdentifierImpl function) {

		String functionName = function.getFunc();
		EList<Expression> arguments = function.getArgs();

		ProxyFunctionDefinition functionDef = getNavajoProxyStub().getFunction(functionName);

		if (functionDef == null) {
			warning("Unknown function: " + functionName, NavascriptPackage.Literals.FUNCTION_IDENTIFIER__FUNC);
			return;
		} 

		List<String> altInputs = functionDef.getInput();
		if ( altInputs.isEmpty() ) { // If there are no inputs specified, return;
			return;
		}
		for (String alt : altInputs) {
			int argSize = alt.split(",").length;
			if (argSize == arguments.size()) {
				return;
			}
		}

		error("Invalid number of parameters", NavascriptPackage.Literals.FUNCTION_IDENTIFIER__ARGS);
	}

	@Check
	public void checkMapDefinition(MapImpl map) {

		String adapterName = map.getAdapterName();
		String objectName = map.getObjectName();

		// System.err.println("In checkMapDefinition. adapterName: " + adapterName + ",
		// objectName: " + objectName);

		// If an objectName (old style) is used, ignore check.
		if (objectName != null && !"".equals(objectName)) {
			return;
		}

		if (adapterName != null && !"".equals(adapterName)) {
			if (getNavajoProxyStub().getAdapter(adapterName) == null) {
				warning("Unknown adapter: " + adapterName, NavascriptPackage.Literals.MAP__ADAPTER_NAME);
			}
		}
	}

	private void fieldValidator(EObject mai, String prefix) {
		boolean isSetterField = ( mai instanceof SetterFieldImpl );
		String fieldName = NavigationUtils.getFieldFromMappableIdentifier(prefix);
		int level = NavigationUtils.countMappableParentLevel(prefix);
		EObject parent = NavigationUtils.findFirstMapOrMappedField(mai.eContainer(), level);
		AdapterClassDefinition mapdef = NavigationUtils.findAdapterClass(getNavajoProxyStub(), parent, null);
		if (mapdef != null) {
			boolean isValid = mapdef.isGetter(fieldName);

			if (!isValid) {
				if ( isSetterField ) {
					warning("Unknown mappable field: " + fieldName, NavascriptPackage.Literals.SETTER_FIELD__FIELD);
					return;
				} else {
					warning("Unknown mappable field: " + fieldName, NavascriptPackage.Literals.MAPPABLE_IDENTIFIER__FIELD);
					return;
				}
			}

			if ( mai instanceof MappableIdentifierImpl) {
				int numberOfArguments = ((MappableIdentifierImpl) mai).getArgs().size();
				List<List<String>> signatures = mapdef.getGetterTypeSignatures(fieldName);
				for (List<String> parameters : signatures) {
					if (parameters.size() == numberOfArguments) {
						return;
					}
				}
			}
			
			if ( mai instanceof SetterFieldImpl) {
				int numberOfArguments = ((SetterFieldImpl) mai).getArguments().getKeyValueArguments().size();
				List<List<String>> signatures = mapdef.getGetterTypeSignatures(fieldName);
				for (List<String> parameters : signatures) {
					if (parameters.size() == numberOfArguments) {
						return;
					}
				}
			}
			
			
			if ( isSetterField ) {
				error("Invalid number of arguments", NavascriptPackage.Literals.SETTER_FIELD__EXPRESSION_LIST);
			} else {
				error("Invalid number of arguments", NavascriptPackage.Literals.MAPPABLE_IDENTIFIER__ARGS);
			}
		} else {
			if ( isSetterField ) {
				warning("Unknown mappable field: " + fieldName, NavascriptPackage.Literals.SETTER_FIELD__FIELD);
			} else {
				warning("Invalid mappable field: " + fieldName, NavascriptPackage.Literals.MAPPABLE_IDENTIFIER__FIELD);
			}
		}
	}
	
	@Check
	public void checkSetterField(SetterFieldImpl sfi) {
		fieldValidator(sfi, sfi.getField());	
	}
	
	@Check
	public void checkMappedMessage(MappedMessageImpl mmi) {
		System.err.println("In checkMappedMessage: " + mmi);
	}
	
	@Check
	public void checkMappableIdentifier(MappableIdentifierImpl mai) {
		fieldValidator(mai, mai.getField());
	}

	private int countPropertiesWithName(String name, EList<EObject> children) {

		int count = 0;

		for (EObject child : children) {
			if (child instanceof PropertyImpl) {
				PropertyImpl prop = (PropertyImpl) child;
				InnerBody ib = NavigationUtils.findInnerBody(prop); // If property has a condition, do not count it.
				if (ib.getCondition() == null && prop.getPropertyName().equals(name)) {
					count++;
				}
			}
			if (!(child instanceof MessageImpl) && child.eContents() != null) {
				count += countPropertiesWithName(name, child.eContents());
			}
		}

		return count;
	}

	/*
	 * Returns true if this message contains this property name.
	 */
	private boolean checkForPropertyName(PropertyImpl checkit, Message m) {
		return countPropertiesWithName(checkit.getPropertyName(), m.eContents()) > 1;
	}

	@Check
	public void checkUniquePropertyName(PropertyImpl property) {
		// Get message.
		Message parent = NavigationUtils.findMessage(property);
		boolean isConstantArrayMessage = parent.getMessageArray() != null && parent.getMessageArray().getArrayMessageElements().size() > 0;
		if ( !isConstantArrayMessage && checkForPropertyName(property, parent)) {
			warning("Duplicate property name in message", NavascriptPackage.Literals.PROPERTY__PROPERTY_NAME);
		}
	}

	@Check
	public void checkUniquePropertyArguments(PropertyImpl property) {

		PropertyArguments arguments = property.getArguments();
		if (arguments != null) {
			EList<PropertyArgument> args = arguments.getArguments();
			Set<String> found = new HashSet<>();
			for ( PropertyArgument pa : args ) {
				if ( found.contains(pa.getClass().getName())) {
					error("Duplicate arguments in property: " + property.getPropertyName(), NavascriptPackage.Literals.PROPERTY__ARGUMENTS);
				}
				found.add(pa.getClass().getName());
			}
		}
	}

	@Check
	public void checkMappedMappedArrayFieldImpl(MappedArrayFieldImpl maf) {
		String raw = maf.getField();
		int level = NavigationUtils.countMappableParentLevel(raw);
		String field = NavigationUtils.getFieldFromMappableIdentifier(raw);
		EObject eObject = NavigationUtils.findFirstMapOrMappedField(maf.eContainer(), level);
		AdapterClassDefinition map = NavigationUtils.findAdapterClass(getNavajoProxyStub(), eObject, null);
		if (map != null) {
			boolean isValid = map.isGetter(field);
			if (!isValid) {
				error("Cannot find field: " + field, NavascriptPackage.Literals.MAPPED_ARRAY_FIELD__FIELD);
			}
		} else {
			System.err.println("Cannot find field, producing message...");
			error("Cannot find adapter for field: " + raw, NavascriptPackage.Literals.MAPPED_ARRAY_FIELD__FIELD);
		}
	}

	@Check
	public void checkAdapterMethodParameters(AdapterMethodImpl am) {

		try {

			EObject eObject = NavigationUtils.findFirstMapOrMappedField(am.eContainer(), 0);
			if (eObject instanceof MapImpl) {
				MapImpl map = (MapImpl) eObject;
				String adapterName = map.getAdapterName();
				if (adapterName == null || "null".equals(adapterName)) {
					warning("Missing adapter definition for method", NavascriptPackage.Literals.ADAPTER_METHOD__METHOD);
					return;
				}

				KeyValueArguments kvas = am.getArguments();

				AdapterClassDefinition mapdef = getNavajoProxyStub().getAdapter(adapterName);

				if (mapdef == null) {
					return;
				}

				List<String> parameters = new ArrayList<>();

				if (kvas != null) {
					for (KeyValueArgument a : kvas.getKeyValueArguments()) {
						parameters.add(a.getKey());
					}
				}

				String methodName = am.getMethod().substring(1);
				Set<String> missing = mapdef.missingRequiredParameters(methodName, parameters);

				Set<String> unknown = mapdef.unknownParameters(methodName, parameters);

				StringBuffer message = new StringBuffer();
				if (missing.size() > 0) {
					message.append("Missing required parameters: " + missing + ". ");
				}
				if (unknown.size() > 0) {
					message.append("Unknown parameters: " + unknown);
				}
				if (missing.size() > 0 || unknown.size() > 0) {
					error(message.toString(), NavascriptPackage.Literals.ADAPTER_METHOD__METHOD);
				}

			} else {

			}
		} catch (Throwable t) {
			t.printStackTrace(System.err);
		}

	}

	@Override
	public void serviceChanged(ServiceEvent event) {
		init();
	}
}
