grammar com.dexels.navajo.Navascript 

hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore"

generate navascript "http://www.dexels.com/navajo/Navascript"
 
Navascript: {Navascript} debug=DebugStatement? validations=Validations? toplevelStatements=TopLevelStatements finally=Finally?;

// TopLevelStatement ::= Include | Message | Var | Break | Map | AntiMessage | Define | ConditionalEmptyMessage | Synchronized | Print | Log | Loop | Methods

TopLevelStatements : {TopLevelStatements} statements+=TopLevelStatement*;

TopLevelStatement : {TopLevelStatement}  ('if' condition=Expression 'then')?
	statement=( Message | Var | Map | AntiMessage | Define | Print | Log | Loop | Methods | Include | Break | Synchronized | BlockStatements )
;

InnerBody:
	{InnerBody} ('if' condition=Expression 'then')?
	statement=( Property |  Option | MethodOrSetter|  Message | AntiMessage | Include | Methods | Var | Print | Log | Define | Loop | Map | Break | Synchronized | BlockStatements )
;

/*
 * if EXPRESSION THEN { [STATEMENTS }
 */
BlockStatements : {BlockStatements} '{' statements+=InnerBody* '}' ;

/*
 * synchronized() {
 * 
 * }
 */

DebugStatement:
	{DebugStatement} '@debug=' ( value=( 'all' | 'request' | 'response') );

Synchronized : 'synchronized' '(' arguments=SynchronizedArguments ')' '{' statements+=TopLevelStatement* '}';

SynchronizedArguments : arguments+=SynchronizedArgument ( ',' arguments+= SynchronizedArgument )*;

SynchronizedArgument :  {SynchronizedArgument} SContext | SKey | STimeout | SBreakOnNoLock ;

SContext : 'context' ('=' | ':') ('user' | 'service');

SKey : 'key' ('=' | ':') LiteralOrExpression;

STimeout : 'timeout' ('=' | ':') Expression;

SBreakOnNoLock : 'breakOnNoLock' ('=' | ':') Expression;

/*
 * break([code=VALUE,description=VALUE,error=VALUE])
 */
Break : {Break} 'break' ( '(' parameters=BreakParameters? ')' )? ';';

BreakParameter : ( 'code' ('=' | ':') code=LiteralOrExpression | 'description' ('=' | ':') description=LiteralOrExpression | 'error' ('=' | ':') LiteralOrExpression ) ;

BreakParameters : parameters+=BreakParameter ( ',' parameters+=BreakParameter )*;

Validations : {Validations} 'validations' '{' checks+=Check* '}' ;

Define:
	{Define} 'define' defineKey=QUOTED_IDENTIFIER ('=' | ':') expression=Expression ';'
;

Check : {Check} ('if' condition=Expression 'then')? 'check' '(' checkAttributes+=CheckAttribute ( ',' checkAttributes+=CheckAttribute)? ')' ('=' | ':') expression=Expression ';';

CheckAttribute : {CheckAttribute} ('code' ('=' | ':') value=LiteralOrExpression) | ('description' ('=' | ':') value=LiteralOrExpression);

LiteralOrExpression : {LiteralOrExpression} expression=Expression ;

Print:
	{Print} 'print' '(' expression=Expression ')' ';'
;

Log:
	{Log} 'log' '(' expression=Expression ')' ';'
;

Finally: 
	{Finally} 'finally' '{' finallyStatements=TopLevelStatements '}'
;

Methods:
	{Methods} 'methods' '{' ( methods+=Method )* '}'
;

Method:
	{Method} methodName=QUOTED_IDENTIFIER ';'
;

Loop:
	{Loop} 'loop' ( mappable=MAPPABLE_IDENTIFIER | tml=TmlIdentifier ) 
	   ( '(' 'filter' ('=' | ':') filter=Expression ')' )? '{' statements+=InnerBody* '}' 
;

Include:
	{Include} 'include' scriptName=QUOTED_IDENTIFIER ';'
;

AntiMessage : {AntiMessage} 'antimessage' messageName=QUOTED_IDENTIFIER ';';

Message: 
	{Message} 'message' messageName=QUOTED_IDENTIFIER ( '(' arguments=MessageArguments ')' )?  ( ( '{' ( statements+=InnerBody* |  arrayField=MappedArrayField | arrayMessage=MappedArrayMessage ) '}' ) | ';' 
		| ('[' | '"') messageArray=MessageArray? (']' | '"')
	)
;

MessageArray : arrayMessageElements+=MessageArrayElement (',' arrayMessageElements+=MessageArrayElement)*;

MessageArrayElement : {MessageArrayElement} '{' statements+=InnerBody* '}';

MessageArgument : ( 'type' ('=' | ':') MessageType ) | ( 'mode' ('=' | ':') MessageMode ) | ('orderby' ( '=' | ':') MessageOrderBy );

MessageArguments : arguments+=MessageArgument ( ',' arguments+=MessageArgument )*;

Map : {Map} ( 'map.' adapterName=IDENTIFIER ('(' arguments=KeyValueArguments? ')')? | 
	   'map' '(' 'object' ('=' | ':') objectName=OBJECT_IDENTIFIER ( ',' arguments=KeyValueArguments )? ')') (';' | '{' statements+=InnerBody* '}' )
;

MethodOrSetter : AdapterMethod | SetterField ;

AdapterMethod: {AdapterMethod} method=METHOD_IDENTIFIER '(' arguments=KeyValueArguments? ')' ';';

SetterField: {SetterField} field=MAPPABLE_IDENTIFIER  ( ('=' | ':') expressionList=ConditionalExpressions ';' 
	  | ('(' arguments=KeyValueArguments ')')? '{' mappedArray=MappedArrayMessage '}' | mappedField=MappedArrayField | mappedMessage=MappedMessage );

MappedMessage : {MappedMessage} '{' statements += InnerBody* '}';
	
MappedArrayField : {MappedArrayField} field=MAPPABLE_IDENTIFIER ( '(' 'filter' ('=' | ':') filter=Expression ')' )? '{' statements+=InnerBody* '}' ;

MappedArrayMessage : {MappedArrayMessage} message=( CURRENT_OUTDOC | CURRENT_INDOC | CURRENT_VARDOC | TML_LITERAL | QUOTED_IDENTIFIER ) ( '(' 'filter' ('=' | ':') filter=Expression ')' )? '{' statements+=InnerBody* '}' ;

KeyValueArguments : {KeyValueArguments} keyValueArguments+=KeyValueArgument ( ',' keyValueArguments+=KeyValueArgument )*;

KeyValueArgument : {KeyValueArgument} key=(IDENTIFIER | OPTION_TYPE) ('=' | ':') value=LiteralOrExpression;

Var: {Var} 'var' (  varName=VarName)  (arguments=VarArguments)? ( ('=' | ':') expressionList=ConditionalExpressions ';' |  '[' varArray=VarArray? ']' | 
	'{' varElements+=VarElement* '}'  
 | '{' mappedArrayField=MappedArrayField '}' | '{' mappedArrayMessage=MappedArrayMessage '}' )
;

VarName : '/' | '../'* IDENTIFIER;

VarArray : {VarArray} vararrayelement+=VarArrayElement (',' vararrayelement+=VarArrayElement)*;

VarArrayElement : {VarArrayElement} '{' (varElements+=VarElement)* '}';

VarElement : {VarElement} ('if' condition=Expression 'then')? var=Var;

VarArguments: {VarArguments} '(' varArguments+=VarArgument (',' varArguments+=VarArgument )* ')';

VarArgument : {VarArgument} argument=( VarType | VarMode);

VarType: {VarType} 'type' ('=' | ':') type=( MessageType | PropertyType ) ;

VarMode : {VarMode} 'mode'  ('=' | ':') mode=MessageMode;

Property : {Property} 'property' propertyName=QUOTED_IDENTIFIER (arguments=PropertyArguments)? 
	( 
		   (('=' | ':') (expressionList=ConditionalExpressions))? ';' 
		 | '[' selectionArray=SelectionArray ']'   
		 | '{' arrayField=MappedArrayField '}' 
		 | '{' arrayMessage=MappedArrayMessage '}'  
	)
;

SelectionArray : arrayElements+=SelectionArrayElement (',' arrayElements+=SelectionArrayElement)*;

SelectionArrayElement : {SelectionArrayElement} '{' innerBody+=InnerBody* '}';

Option : 'option' option=OPTION_TYPE  ('=' | ':') expressionList=ConditionalExpressions ';' ;

PropertyArguments : {PropertyArguments} '(' (arguments+=PropertyArgument) (',' (arguments+=PropertyArgument))* ')';

PropertyArgument : DirectionArgument | TypeArgument | SubTypeArgument | DescriptionArgument | CardinalityArgument | LengthArgument ; 

LengthArgument :  'length' ('=' | ':') (value=INTEGER);

DirectionArgument : 'direction' ('=' | ':') (value=( 'in' | 'out' | 'inout' ) );

DescriptionArgument : 'description' ('=' | ':') value=LiteralOrExpression;

CardinalityArgument : 'cardinality' ('=' | ':') value=('+' | ONE );

TypeArgument : 'type' ('=' | ':') (value=PropertyType);

SubTypeArgument : 'subtype' ('=' | ':') value=STRING_LITERAL;

ConditionalExpressions : {ConditionalExpressions} conditionalExpressions+=ConditionalExpression+ 'else' elseExpresssion=LiteralOrExpression | singleExpression=LiteralOrExpression;

ConditionalExpression :
	'if' condition=Expression 'then' expression=LiteralOrExpression;

Expression:
    BooleanExpression;

BooleanExpression returns Expression:
    Comparison 
    (({AndOrExpression.left=current} op=("OR"|"AND")) right=Comparison)*;

Comparison returns Expression:
       Equals
       (({Comparison.left=current} op=("<"|">"|"<="|">=") ) right=Equals)*;

Equals returns Expression:
       Addition 
       (({Equals.left=current} op=("=="|'!='|'~=') ) right=Addition)*;
 
Addition returns Expression:
    Multiplication
   (({Plus.left=current} '+' | {Minus.left=current} '-' | {Modulo.left=current} '%')
        right=Multiplication)*; 

Multiplication returns Expression:
    Prefixed (({MultiOrDiv.left=current} op=("*"|"/")) right=Prefixed)*;

Prefixed returns Expression:
    {BooleanNegation} =>"!" expression=Atomic | 
    {ArithmeticSigned} =>"-" expression=Atomic | 
    Atomic;

Atomic returns Expression:
    {ExpressionLiteral} '(' value=Expression ')' |
    {NumberLiteral} value=( INTEGER | ONE | FLOAT ) |
    {StringLiteral} value=STRING_LITERAL |
    {BooleanLiteral} value=( TRUE | FALSE) | 
    {FunctionCallLiteral} value=FunctionIdentifier |
    {MappableIdentifierLiteral} value=MappableIdentifier |
    {TmlIdentifierLiteral} hasExists?='?'? value=TmlIdentifier |
    {ScriptIdentifier} value=ScriptIdentifier |
    {TmlIdentifier} value=TmlIdentifier |
    {ForAllLiteral} value=ForAllIdentifier |
    {NullLiteral} value=NULL_DEF |
    {TodayLiteral} value="TODAY" |
    {CurrentOutDoc} value=CURRENT_OUTDOC |
    {CurrentInDoc} value=CURRENT_INDOC |
    {CurrentVarDoc} value=CURRENT_VARDOC |
    {VariableIdentifier} value=IDENTIFIER
;

ScriptIdentifier:
	{ScriptIdentifier} scriptUrl= SCRIPT_PREFIX  (script= SCRIPT_REFERENCE ) 
;

ForAllIdentifier:
	{ForAllIdentifier} op=( FORALL | EXISTS ) '(' "`" (expression=Expression) "`" ',' (messagedefinition=STRING_LITERAL) ')' 
;

FunctionIdentifier:
	{FunctionIdentifier} func=IDENTIFIER ('(' (args+=Expression (',' args+=Expression)*)? ')')
;

MappableIdentifier:
	{MappableIdentifier} field=MAPPABLE_IDENTIFIER ('(' (args+=Expression (',' args+=Expression)*)? ')')?
;

TmlIdentifier :
  {TmlIdentifier} tml=(TML_LITERAL | QUOTED_IDENTIFIER)
;

PropertyType:
    {IntType} 'integer' |
    {StringType} 'string' |
    {BooleanType} 'boolean' | 
    {DateType} 'date' |
    {FloatType} 'float' |
    {BinaryType} 'binary' |
    {CoordinateType} 'coordinate' |
    {ClockTimeType} 'clocktime' |
    {MemoType} 'memo' |
    {TimestampType} 'timestamp' |
    {PercentageType} 'percentage' |
    {SelectionType} 'selection'
;

SCRIPT_PREFIX :
	'script:'
;

OPTION_TYPE : 
   'name' | 'value' | 'selected';

MessageType : {ArrayType} "array" | {SimpleType} "simple" | {ArrayElementType} "arrayelement";

MessageMode : {Ignore} "ignore" | {Overwrite} "overwrite";

MessageOrderBy : {OrderBy} orderby=IDENTIFIER ('ASC' | 'asc' | 'DESC' | 'desc')? (',' IDENTIFIER ('ASC' | 'asc' | 'DESC' | 'desc')? )*;

terminal METHOD_IDENTIFIER: '.' IDENTIFIER;

terminal MAPPABLE_IDENTIFIER: MAPPABLE_ID '../'* IDENTIFIER;

terminal STRING_LITERAL:
	"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'";	

terminal FORALL : 'FORALL';
terminal EXISTS : 'EXISTS';
terminal TRUE : 'true';
terminal FALSE : 'false';
terminal MAPPABLE_ID : '$';
terminal NULL_DEF : 'null';

terminal SCRIPT_REFERENCE:
	'/'IDENTIFIER ('/' IDENTIFIER)*
;

terminal CURRENT_OUTDOC: 
	 '"."'
;

terminal CURRENT_INDOC: 
	 '[.]'
;

terminal CURRENT_VARDOC: 
	 '[@.]'
;


terminal TML_LITERAL:
	'[' ( '../'+ | '/' )? '@'? IDENTIFIER ( '/' IDENTIFIER)*  ']'
;
terminal OBJECT_IDENTIFIER:
	'"' IDENTIFIER ( '.' IDENTIFIER)+ '"'
;

terminal QUOTED_IDENTIFIER:
	'"' ( ( '../'+ | '/' )?  IDENTIFIER ( '/' IDENTIFIER)* ) '"' 	
;

terminal ONE:
	'1'
;

terminal UNDERSCORE:
	'_'
;

terminal IDENTIFIER : ( LETTER  | UNDERSCORE ) ( LETTER | "0" | ONE | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | UNDERSCORE )*;
		
terminal INTEGER : "0" | ( ( ONE | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ) ( "0" | ONE | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" )* );

terminal FLOAT : INTEGER? "." "0"* INTEGER;

		
terminal LETTER : "A" | "B" | "C" | "D" | "E" | "F" | "G"
 | "H" | "I" | "J" | "K" | "L" | "M" | "N"
 | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
 | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
 | "c" | "d" | "e" | "f" | "g" | "h" | "i"
 | "j" | "k" | "l" | "m" | "n" | "o" | "p"
 | "q" | "r" | "s" | "t" | "u" | "v" | "w"
 | "x" | "y" | "z" ;


terminal ML_COMMENT : '/*' -> '*/';

terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

//terminal SYMBOL : 
//    "\n" | "!" | "@" | "$" | "#" | "%" | "^" | "&" | "*" | "(" | ")" | "-" | "_" | 
//    "=" | "+" | "{" | "}" | "[" | "]" | ":" | ";" | "|" |  "," | "." | "?" | "§" | "±" | "~" | "`" | '"' | '>' | '<'  ;

